<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh_CN">
  <id>https://silverrainz.me</id>
  <title>银色子弹</title>
  <updated>2021-02-14T14:43:15.748368+00:00</updated>
  <link href="https://silverrainz.me"/>
  <link href="https://silverrainz.me/blog/atom.xml"/>
  <generator uri="https://ablog.readthedocs.org" version="0.10.13">ABlog</generator>
  <subtitle>Yes silver bullet here.</subtitle>
  <entry>
    <id>https://silverrainz.me/blog/idf-reverse-writeup.html</id>
    <title>IDF 实验室逆向题部分题解</title>
    <updated>2015-01-02T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="idf"&gt;

&lt;p&gt;地址在这里：&lt;a class="reference external" href="http://ctf.idf.cn/index.php?g=game&amp;amp;m=list&amp;amp;a=index&amp;amp;id=21"&gt;IDF逆向题&lt;/a&gt;
这些题都比较水，好在我和它一样水。&lt;/p&gt;
&lt;div class="section" id="python-btyecode"&gt;
&lt;h2&gt;Python BtyeCode:&lt;/h2&gt;
&lt;p&gt;好像是用Cpython编译的, 手头没工具, 用的是师兄给的反编译出来的代码:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;rst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rst&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Welcome to idf&amp;#39;s python crackme&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter the Flag: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;KEY1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Maybe you are good at decryptint Byte Code, have a try!&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;KEY2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="mi"&gt;124&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;164&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;232&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;en_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KEY1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;KEY2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;en_out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;You Win&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Try Again !&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;rst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rst&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Welcome to idf&amp;#39;s python crackme&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter the Flag: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;KEY1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Maybe you are good at decryptint Byte Code, have a try!&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;KEY2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="mi"&gt;124&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;164&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;232&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;en_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KEY1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;KEY2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;en_out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;You Win&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Try Again !&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;正常人反着推肯定是写: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;arr[i]&lt;/span&gt; &lt;span class="pre"&gt;-&lt;/span&gt;&amp;#160; &lt;span class="pre"&gt;(key[seed]&lt;/span&gt; &lt;span class="pre"&gt;^&lt;/span&gt; &lt;span class="pre"&gt;seed)&lt;/span&gt;&lt;/code&gt; 不过这样肯定推不出来,
因为出题人写错了… (师兄想出来的… 打死我也不知道是题目错了啊…),
出题的用了正确的算法给出密文之后, 把 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rst.append((ord(v)&lt;/span&gt; &lt;span class="pre"&gt;^&lt;/span&gt; &lt;span class="pre"&gt;ord(key[seed])&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;seed)&lt;/span&gt; &lt;span class="pre"&gt;%&lt;/span&gt; &lt;span class="pre"&gt;255)&lt;/span&gt;&lt;/code&gt;
写成了: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rst.append((ord(v)&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;seed&lt;/span&gt; &lt;span class="pre"&gt;^&lt;/span&gt; &lt;span class="pre"&gt;ord(key[seed]))&lt;/span&gt; &lt;span class="pre"&gt;%&lt;/span&gt; &lt;span class="pre"&gt;255)&lt;/span&gt;&lt;/code&gt;
所以没必要深究什么了,代码:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;124&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;164&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;232&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Maybe you are good at decryptint Byte Code, have a try!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//事实上为什么要%127也不太清楚&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;arr[%d] = %d; key[%d] = %d; ^ = %d flag[%d] = %d;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flag:&lt;/span&gt; &lt;span class="pre"&gt;WCTF{ILOVEPYTHONSOMUCH}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="elf"&gt;
&lt;h2&gt;简单的ELF逆向:&lt;/h2&gt;
&lt;p&gt;这题是ELFx64位的CrackMe, 只能用IDA啦, 载入之,师兄叫我用F4 F5,不过64位的IDA好像没有F5,
找到main函数, F4, 得到代码:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;addr_0x400900_12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;v13&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v3&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v13&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;v14&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;uint1_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;v14&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;eax15&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;v8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;eax15&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;v13&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rsi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rsi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;v14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;eax16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;v17&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;eax16&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;
            &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eax18&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;v19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;eax18&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eax20&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;v21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;eax20&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eax22&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;v23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;eax22&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eax24&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;v25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;eax24&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mh"&gt;0x7d&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v13&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/* v13 应该是一个标志变量 */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v13&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;u r wrong&lt;/span&gt;&lt;span class="se"&gt;\r\n\r&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;rax26&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;u r wrong&lt;/span&gt;&lt;span class="se"&gt;\r\n\r&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;u r right!&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;addr_0x4008ff_7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;addr_0x400900_12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;果然代码的可读性不是很好, 前面的printf之类的被我省去了, 重点放在while循环和那个if上,
可以看到if要求的是几个变量必须分别为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0,&lt;/span&gt; &lt;span class="pre"&gt;8,&lt;/span&gt; &lt;span class="pre"&gt;2,&lt;/span&gt; &lt;span class="pre"&gt;3,}&lt;/span&gt;&lt;/code&gt;
应该就是flag 的后部分了, 从最后的判断right和wrong可以看出v13是判断正确与否的变量.&lt;/p&gt;
&lt;p&gt;while 循环实在是难懂, 乖乖回去看汇编好了. 右键选择Graphic View模式, 这样汇编代码显得很清晰,
把重点放在while循环对应的那部分, 简单分析得到, 红笔标注的地方就是程序内为数不多的循环了,
循环之后多条并排的绿线那里是多路if,最后的是正确与否的判断以及输出.&lt;/p&gt;
&lt;img alt="1" src="_images/idf-reverse-writeup-1.png" /&gt;
&lt;p&gt;关键代码如下, interator 对应var_14, arr_1 对应var_40, arr_2 对应 var_c0:&lt;/p&gt;
&lt;div class="highlight-nasm notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;loc_40097C:&lt;/span&gt;
&lt;span class="nf"&gt;cmp&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mh"&gt;10h&lt;/span&gt;    &lt;span class="c1"&gt;; 循环总次数&lt;/span&gt;
&lt;span class="nf"&gt;setle&lt;/span&gt;   &lt;span class="nb"&gt;al&lt;/span&gt;
&lt;span class="nf"&gt;test&lt;/span&gt;    &lt;span class="nb"&gt;al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;al&lt;/span&gt;
&lt;span class="nf"&gt;jnz&lt;/span&gt;     &lt;span class="nv"&gt;short&lt;/span&gt; &lt;span class="nv"&gt;loc_40091D&lt;/span&gt;

&lt;span class="nl"&gt;loc_40091D:&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;; 装入循环变量&lt;/span&gt;
&lt;span class="nf"&gt;cdqe&lt;/span&gt;
&lt;span class="nf"&gt;movzx&lt;/span&gt;   &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;arr_1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;movsx&lt;/span&gt;   &lt;span class="nb"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;al&lt;/span&gt;        &lt;span class="c1"&gt;; 取出(unsigned char)arr_1[iterator], 数组元素只有一个字节&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;cdqe&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;rax&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;arr_2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;; 取出(int)arr_2[iterator], 四个字节&lt;/span&gt;
&lt;span class="nf"&gt;sub&lt;/span&gt;     &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;        &lt;span class="c1"&gt;; eax = eax - 1&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt;     &lt;span class="nb"&gt;ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;eax&lt;/span&gt;     &lt;span class="c1"&gt;; ecx = eax&lt;/span&gt;
&lt;span class="nf"&gt;shr&lt;/span&gt;     &lt;span class="nb"&gt;ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;1Fh&lt;/span&gt;    &lt;span class="c1"&gt;; ecx = ecx &amp;gt;&amp;gt; 0x1f&lt;/span&gt;
&lt;span class="nf"&gt;lea&lt;/span&gt;     &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rcx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;; 装入地址其实就是 eax = ecx + eax;&lt;/span&gt;
&lt;span class="nf"&gt;sar&lt;/span&gt;     &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="c1"&gt;; eax = eax &amp;gt;&amp;gt; 1&lt;/span&gt;
&lt;span class="nf"&gt;cmp&lt;/span&gt;     &lt;span class="nb"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;eax&lt;/span&gt;     &lt;span class="c1"&gt;; 比较arr_2[iterator]经过运算的值是否等于arr_1[iterator]&lt;/span&gt;
&lt;span class="nf"&gt;jz&lt;/span&gt;      &lt;span class="nv"&gt;short&lt;/span&gt; &lt;span class="nv"&gt;loc_400978&lt;/span&gt;    &lt;span class="c1"&gt;; 等于则跳&lt;/span&gt;

&lt;span class="nl"&gt;loc_400978:&lt;/span&gt;
&lt;span class="nf"&gt;add&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;rbp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;经过以上分析可以知道 arr_1 应该是我们输入的key, 所以有必要知道arr_2 的值, 跳转到arr_2的定义:&lt;/p&gt;
&lt;img alt="2" src="_images/idf-reverse-writeup-2.png" /&gt;
&lt;p&gt;是空的…
但是我们回到代码中, 对arr_2有这样的操作:&lt;/p&gt;
&lt;img alt="3" src="_images/idf-reverse-writeup-3.png" /&gt;
&lt;p&gt;刚好17个项(0-10h),
所以说 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;arr_i[i]&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;((arr_2[i]&lt;/span&gt; &lt;span class="pre"&gt;–&lt;/span&gt; &lt;span class="pre"&gt;1)&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;(arr_2[i]&lt;/span&gt; &lt;span class="pre"&gt;–&lt;/span&gt; &lt;span class="pre"&gt;1)&amp;gt;&amp;gt;0x1f)&amp;gt;&amp;gt;1&lt;/span&gt;&lt;/code&gt;
(忽略了shr 和 sar 以及各种细节问题… 所幸没有出错)
(vim 来处理这些最爽了)&lt;/p&gt;
&lt;p&gt;代码:&lt;/p&gt;
&lt;div class="highlight-cpp notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define N 17&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arr_2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mh"&gt;0x0EF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0C7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0E9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0CD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0F7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x8B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0D9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mh"&gt;0x8D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0BF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0D9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0DD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0B1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0BF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mh"&gt;0x0D7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0DB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0BF&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;arr_2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;arr_2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0x1f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="cm"&gt;/*注意一下 &amp;gt;&amp;gt; 的优先级*/&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0823}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pause.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flag:&lt;/span&gt; &lt;span class="pre"&gt;wctf{ElF_lnX_Ckm_0823}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pe"&gt;
&lt;h2&gt;简单的PE文件逆向:&lt;/h2&gt;
&lt;p&gt;x86平台, 双击没法运行, 应该需要某个古老的C++运行时, 那就放弃用OD了, IDA载入,
稍微翻一翻(其实是不知道如何有效定位), 0x4113a0处就是关键处, F5之, 这次代码好看多了,
可以看出和上一个CrackMe基本相同…&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;v76&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;byte_415768&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v53&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;v77&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;v78&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;v79&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;v80&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;v81&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;125&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;v76&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v75&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sub_411136&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;u r wrong&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sub_411136&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;sub_41113B&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;u r right!&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sub_411136&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;同样是把flag分成两部分, 后面五个必须是1024},前面的在一个for循环里算出:
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;v76[i]&lt;/span&gt; &lt;span class="pre"&gt;!=&lt;/span&gt; &lt;span class="pre"&gt;byte_415768[*(&amp;amp;v53&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;i)]&lt;/span&gt;&lt;/code&gt;
通过一个数组v53[]运算出下标, 再用下标从另一个数组byte_415768[]取出值来, 数组是:&lt;/p&gt;
&lt;div class="highlight-text notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v53 = 1;
v54 = 4;
v55 = 14;
v56 = 10;
v57 = 5;
v58 = 36;
v59 = 23;
v60 = 42;
v61 = 13;
v62 = 19;
v63 = 28;
v64 = 13;
v65 = 27;
v66 = 39;
v67 = 48;
v68 = 41;
v69 = 42;
byte_415768 db 73h
    db &amp;#39;wfxc{gdv}fwfctslydRddoepsckaNDMSRITPNsmr1_=2cdsef66246087138&amp;#39;,0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;要注意byte_415768[]的一个元素s(73h)没有被识别.
所以:&lt;/p&gt;
&lt;div class="highlight-cpp notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;v53&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;byte_415768&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;swfxc{gdv}fwfctslydRddoepsckaNDMSRITPNsmr1_=2cdsef66246087138&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;byte_415768&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v53&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1024}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flag:&lt;/span&gt; &lt;span class="pre"&gt;wctf{Pe_cRackme1c1024}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/idf-reverse-writeup.html" rel="alternate"/>
    <published>2015-01-02T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/haskell-beginning.html</id>
    <title>Hello Haskell</title>
    <updated>2015-01-30T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="hello-haskell"&gt;

&lt;p&gt;我想学Haskell的原因在很大程度上拜轮子叔所赐，前一阵子在图书馆意外发现了一本
&lt;a class="reference internal" href="todo.html#book-Haskell" title="Haskell 趣学指南 book"&gt;&lt;code class="xref any any-book docutils literal notranslate"&gt;&lt;span class="pre"&gt;Haskell&lt;/span&gt; &lt;span class="pre"&gt;趣学指南&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; ，这下子更没有不学的理由了。&lt;/p&gt;
&lt;p&gt;多说一句，有趣的是这本书的译者之一竟然是 &lt;code class="xref any any-friend docutils literal notranslate"&gt;&lt;span class="pre"&gt;Fleurer&lt;/span&gt;&lt;/code&gt; ，我曾经好几次发邮件询问他有关OS的事情，
没想到在图书馆借到了他的书。。。另一个译者是蓝莲花的 &lt;code class="xref any any-friend docutils literal notranslate"&gt;&lt;span class="pre"&gt;MaskRay&lt;/span&gt;&lt;/code&gt; ，曾经在中大听过蓝莲花的宣讲会，
可惜当时他并没有在场。 不得不说世界真是太小了.&lt;/p&gt;
&lt;div class="topic"&gt;
&lt;p class="topic-title"&gt;2021-02-12&lt;/p&gt;
&lt;p&gt;当时在宣讲会上的是诸葛建伟老师和 &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:people:`ztrix &amp;lt;https://ztrix.me&amp;gt;`&lt;/span&gt;&lt;/a&gt; ，
后来我加入长亭科技，ztrix 自然也成为了我的老板。&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/haskell-beginning.rst&lt;/span&gt;, line 19)&lt;/p&gt;
&lt;p&gt;No role entry for “people” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “people” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/haskell-beginning.rst&lt;/span&gt;, line 19); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “people”.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;好了说点正事。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;Haskell的编译器是GHC，我的系统是openSUSE，安装ghc可以直接&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sudo&lt;/span&gt; &lt;span class="pre"&gt;zypper&lt;/span&gt; &lt;span class="pre"&gt;in&lt;/span&gt; &lt;span class="pre"&gt;ghc&lt;/span&gt;&lt;/code&gt;,
但是比ghc更方便的是Haskell Platform, 安装同样可以&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sudo&lt;/span&gt; &lt;span class="pre"&gt;zypper&lt;/span&gt; &lt;span class="pre"&gt;in&lt;/span&gt; &lt;span class="pre"&gt;haskell-platform&lt;/span&gt;&lt;/code&gt;,
在 Windows 上则可以直接去官网下载安装包。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;随便说说&lt;/h2&gt;
&lt;p&gt;因为借书的时候已经是考试周的前夕，所以到现在翻看书的时间仅限于之前在阅览室里无聊的那一会还有回家的路上，
现在是第五章，似乎有点初窥门径的感觉，又怕是自己想得太简单了。 总得来说是这么些感受吧：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;列表推导式很神奇，&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[x&lt;/span&gt; &lt;span class="pre"&gt;|&lt;/span&gt; &lt;span class="pre"&gt;x&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pre"&gt;xs&lt;/span&gt; &lt;span class="pre"&gt;,&lt;/span&gt; &lt;span class="pre"&gt;x&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pre"&gt;100]&lt;/span&gt;&lt;/code&gt;,其形式类似于之前用来描述集合的公式，
之前上离散的时候不明白为什么要有谓词这个鸡肋的概念，原来可以用在这里;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类型类（Type Class）: 有点像是接口之类的东西，这个类型类的实例具有特定的特征，
类型类也必须为这些实例提供对应的方法，两个数如果可比较（Ord），那么就能判断这两个数的相等性（Eq）;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模式匹配（Pattern Macthing）: 一开始我自动脑补成了函数的重载，但其实不是重载，
因为函数的参数根本就没有改变。 是不是觉得模式匹配只是可以避免&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;if-else&lt;/span&gt;&lt;/code&gt;而已，
类似于case？ 后来书里也说到了模式匹配就是case的语法糖，我暂时是说不出模式匹配到底有什么特别的地方，
但是在写递归函数的时候模式匹配用起来特别顺手；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;递归： 拜模式匹配所赐，递归在Haskell写起来真是漂亮极了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;柯里函数 （Curry Function）： 请注意他的命名来自于 Haskell Curry, 对，
和Haskell这个名字的来源一样。柯里函数的出现解释了为什么接受多个参数的函数的声明必须类似于&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;b&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;c&lt;/span&gt;&lt;/code&gt;
而不是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;a,&lt;/span&gt; &lt;span class="pre"&gt;b&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;c&lt;/span&gt;&lt;/code&gt;, 柯里函数是一个一元函数， 每次调用只接受一个参数，
并返回一个固化了该参数的一元函数，书里的比喻非常有趣，对于代码：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;multThree&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;multThree&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;你可以将函数看做小工厂， 它们会取一些原材料，然后生产一些东西，对于上面的代码，
执行 multThree 3 5 9，我们将数值3喂给multThree工厂，这个工厂产生了一个更小的工厂，
这家小工厂得到数值5，继续搞出来一家小工厂， 第三家工厂得到数值9,产出最终的结果，
也就是135。&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;qsort&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Ord&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;qsort&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="nf"&gt;qsort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qsort&lt;/span&gt; &lt;span class="n"&gt;lteq&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;qsort&lt;/span&gt; &lt;span class="n"&gt;gt&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;lteq&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="n"&gt;gt&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;对于我这种初学者来说，最有诱惑力也最后成就感的自然就是三行快排了。。。
诶，去掉声明就是三行了。当然还会有更加厉害的实现，不过，先这样好了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/haskell-beginning.html" rel="alternate"/>
    <published>2015-01-30T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/syntax-highlight-in-haskell.html</id>
    <title>Syntax Highligh.hs</title>
    <updated>2015-02-16T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="syntax-highligh-hs"&gt;

&lt;p&gt;书还没看完，不过还是很想用Haskell写点什么出来，所以简单地实现了一个基于替换的Java代码高亮。&lt;/p&gt;
&lt;p&gt;不过这种替换的做法有很大的问题，当你的字符串或者注释里出现了关键字，那么里面也会被高亮，
有个想法就是将整段代码按是否高亮划分为一些元素:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;关键字&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;宏&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;块注释&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行注释&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数字&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空白&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后按顺序一个个用正则取出，使得每一个元素都只能被着色一次，不过这个想法暂时没实现。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;正则&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;双引号的转义&lt;/h3&gt;
&lt;p&gt;另外遇到的问题是正则表达式，首先是双引号内字符串的匹配问题，对正则不熟悉，
试了很多次都没法匹配，因为考虑了反斜杠 对引号的转义问题，从语言描述上可以说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;匹配两个引号之间的尽量短的所有内容，并且内容中不能包含回车和没有被转义的引号
（即只能包含左侧有奇数个反斜杠的引号）&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;写正则实在是太烧脑子了，匹配奇数个可以用 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[^\\]((\\\\)*\\&amp;quot;)&lt;/span&gt;&lt;/code&gt; ，
然后最后面的引号只能左侧包含偶数个引号 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[^\\]((\\\\)*&amp;quot;)&lt;/span&gt;&lt;/code&gt;
（本来可以将两个分组用后向引用省略了，试了一下发现错误，也不知道怎么解决）
最后写出来是恶心的表达式：&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;(.|[^\\](\\\\)*&amp;quot;)*?[^\\](\\\\)*&amp;quot;&lt;/span&gt;&lt;/code&gt;，但是还是有问题:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;table class="docutils align-default"&gt;
&lt;colgroup&gt;
&lt;col style="width: 43%" /&gt;
&lt;col style="width: 57%" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;“regexp”&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;匹配 “regexp”&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;“regexp&amp;quot;regexp”&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;匹配 “regexp&amp;quot;regexp”&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;“reg &amp;quot; exp”reg”exp”&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;匹配 “reg &amp;quot; 和 “reg”&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;“reg &amp;quot;””regexp”&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;匹配 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;reg&lt;/span&gt; &lt;span class="pre"&gt;\\&amp;quot;&lt;/span&gt;&lt;/code&gt; 和 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;&amp;quot;regexp&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;就最后一个错了，因为”也是满足&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[^\\](\\\\)*&amp;quot;&lt;/span&gt;&lt;/code&gt;的，懒得再想了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;反斜杠的转义&lt;/h3&gt;
&lt;p&gt;还有一个问题，也是转义，本来为了代码的简洁，将正则表达式写在了文件里，每行一个，
逐行读取，接下来读每个正则对应的颜色，代码很漂亮：&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;handle&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;openFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;keywords.txt&amp;quot;&lt;/span&gt; &lt;span class="kt"&gt;ReadMode&lt;/span&gt;
&lt;span class="nf"&gt;pattern&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;replicate&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;hGetLine&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;
&lt;span class="nf"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;replicate&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;lhGetLine&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;
&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;patCol&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;后来发现没法匹配块注释&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/\*(.|\n)*\*/&lt;/span&gt;&lt;/code&gt;，原因在于表达式里面的n只是代表回车，
而当你从文件里面读 “n” 的时候，他就真的是“n” 了，他代表一个反斜杠和一个字符n。
你没法从文件的一行里面读取一个回车吧，并且n后面还有内容，所以这种方案失败，
我只把关键字放在了文件里。代码变成了：&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;pattern&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;*(.|&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s"&gt;)*&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;*/&amp;quot;&lt;/span&gt;
           &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;//.*&amp;quot;&lt;/span&gt;
           &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#.*&amp;quot;&lt;/span&gt;
           &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;(.|(&lt;/span&gt;&lt;span class="se"&gt;\\\\\\\\&lt;/span&gt;&lt;span class="s"&gt;)*&lt;/span&gt;&lt;span class="se"&gt;\\\\\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;)*[^&lt;/span&gt;&lt;span class="se"&gt;\\\\&lt;/span&gt;&lt;span class="s"&gt;](&lt;/span&gt;&lt;span class="se"&gt;\\\\\\\\&lt;/span&gt;&lt;span class="s"&gt;)*&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
           &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Purple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Gray&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;readFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;keywords.txt&amp;quot;&lt;/span&gt;
        &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pattern&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;patCol&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这里又引发一个问题是：之前本来不用转义的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt; 变成了 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;\&amp;quot;&lt;/span&gt;&lt;/code&gt;，需要转义一次的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;\\&lt;/span&gt;&lt;/code&gt;，变成了&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;\\\\&lt;/span&gt;&lt;/code&gt;，
表达式更难看了。 而且需要注意到的是最难看的那个表达式里面的懒惰匹配 “?” 没有出现，
我一加他就出错。所以出现了更多的问题，效果比在测试器里面的还差。&lt;/p&gt;
&lt;div class="topic"&gt;
&lt;p class="topic-title"&gt;2015.3.2 update:&lt;/p&gt;
&lt;p&gt;事实上Haskell的Posix库的底层是C的Regex.h,并且Posix规范的正则并不支持懒惰匹配。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="haskell"&gt;
&lt;h2&gt;Haskell&lt;/h2&gt;
&lt;p&gt;除了了上面那些讨厌的问题之外，对于Haskell本身，也有一些不适应的地方。&lt;/p&gt;
&lt;div class="section" id="io"&gt;
&lt;h3&gt;IO用起来束手束脚&lt;/h3&gt;
&lt;p&gt;Haskell的IO()像是一种具有传染性的代码（诶我说的不是GPL），一个函数中一旦出现了IO操作，
函数的返回值就被限定为 IO()，导致你没法往外传参数，除非你把值包裹在IO()里变成IO(String)这样一种结构，
调用这个函数的函数也必须是IO操作，这一循环直到main才终止。当然Haskell这样做肯定是有它的理由的，
但是他们所说的“纯粹与非纯粹的分离”，我还暂时体会不到这样做的好处。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;不知道这么写是否合适&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;我将正则保存在一个列表，将每个正则对应的颜色保存在另一个列表，
再从文件里读取匹配关键字的正则加在第一个列表的尾部，合并两个列表；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将要着色的文件读出，传给htmlen函数；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;htmlen函数调用rep函数对代码进行着色（用左折叠flodl的方式调用），
然后为返回的结果加上html的头部尾部标签还有样式；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rep函数接受htmlen传给的文件内容，以及存有正则和颜色的二元组，
每一次对文件中匹配该表达式的模式加上&amp;amp;lt;font color&amp;amp;gt;标签&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不知道这么写是否正确， 什么才是好的代码， 这个问题至今还是很模糊啊。
（不过谈论这个问题之前应该把前面那些问题先解决了才是）&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.IO&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Text.Regex.Posix&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Pattern&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Color&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="cm"&gt;{- Highlighter in Haskell -}&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Reading config...&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;readFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;keywords.txt&amp;quot;&lt;/span&gt;
        &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pattern&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;patCol&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
        &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Processing...&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;readFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test.java&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;writeFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test.java.html&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;htmlen&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="n"&gt;patCol&lt;/span&gt;
        &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Finished.&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;htmlHead&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;utf-8&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&amp;lt;/head&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;htmlStyle&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;style&amp;gt;code{font: 14px/200% &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Consolas&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;;}&amp;lt;/style&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;htmlLast&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;htmlen&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="nf"&gt;htmlen&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="n"&gt;patCol&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;htmlBody&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;rep&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="n"&gt;patCol&lt;/span&gt;
                        &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;htmlHead&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;htmlStyle&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;htmlLast&lt;/span&gt;

&lt;span class="nf"&gt;rep&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="nf"&gt;rep&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;patCol&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
            &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_head&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;rep&lt;/span&gt; &lt;span class="n"&gt;_tail&lt;/span&gt; &lt;span class="n"&gt;patCol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;font color=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;
          &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;pattern&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;*(.|&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s"&gt;)*&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;*/&amp;quot;&lt;/span&gt;
           &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;//.*&amp;quot;&lt;/span&gt;
           &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#.*&amp;quot;&lt;/span&gt;
           &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;(.|(&lt;/span&gt;&lt;span class="se"&gt;\\\\\\\\&lt;/span&gt;&lt;span class="s"&gt;)*&lt;/span&gt;&lt;span class="se"&gt;\\\\\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;)*[^&lt;/span&gt;&lt;span class="se"&gt;\\\\&lt;/span&gt;&lt;span class="s"&gt;](&lt;/span&gt;&lt;span class="se"&gt;\\\\\\\\&lt;/span&gt;&lt;span class="s"&gt;)*&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
           &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Purple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Gray&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;最后的结果如下：&lt;/p&gt;
&lt;img alt="_images/2021-02-12_14:56:46.png" src="_images/2021-02-12_14:56:46.png" /&gt;
&lt;p&gt;可以看到最后一个字符串是着色错误的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/syntax-highlight-in-haskell.html" rel="alternate"/>
    <published>2015-02-16T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/windows-chinese-username.html</id>
    <title>把 Windows 中文用户名改为英文</title>
    <updated>2015-03-08T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="windows"&gt;

&lt;p&gt;上次暑假回家重装系统,Win 8.1 和 openSUSE 13.2, 在同步Outlook账号的时候,
没注意到当前我的账户名是中文的. 导致了我在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;C:\Users\&lt;/span&gt;&lt;/code&gt; 目录下的用户目录变成了中文的.
本来以为问题不大, 没想到有些程序对中文路径名的支持还是这么差.&lt;/p&gt;
&lt;p&gt;首先是Virtual Box, 虽然能够安装上, 但是无论如何虚拟机就是打不开, 经确认是因为路径的关系了,
再接着是Haskell Platform, cabal update 的时候也是报错说路径错误什么的.&lt;/p&gt;
&lt;p&gt;因为重装系统就要把两个一起重装了, 实在麻烦(事实上是我还不会用Grub).
我在网上稍微百度了一下怎么在不重装的情况下把用户目录给换成英文的.
但是实在找不到简单又靠谱的方法, 都是改注册表什么的, 也就作罢. 放假回来下午稍微一折腾, done.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;首先在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;我的电脑-&amp;gt;管理-&amp;gt;本地用户和组-&amp;gt;用户&lt;/span&gt;&lt;/code&gt; 新建一个用户,名字要是英文的, 全称就随便了,
我写了LA, 新建后右击选择这个新账户的属性, 在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;隶属于&lt;/span&gt;&lt;/code&gt;标签页输入对象&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Administrators&lt;/span&gt;&lt;/code&gt;,
就是把它归入Administrators组的意思. 你可以在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;本地用户和组-&amp;gt;组&lt;/span&gt;&lt;/code&gt;里面看到它.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后在开始屏幕先把自己注销, 再切换到这个新的账户LA, 刚刚进入的时候, 会做一些初始化的工作, 等就行了.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进入系统到 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;C:\Users\&lt;/span&gt;&lt;/code&gt;目录, &lt;strong&gt;在文件夹选项中选择显示隐藏文件&lt;/strong&gt;, 对旧账户文件夹右键,
取得管理员所有权, 然后把所有文件覆盖到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;C:\Users\LA&lt;/span&gt;&lt;/code&gt;下, 复制不过来的就算了.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重启一次, 登陆到LA , 看看之前的软件的配置是否没哟改变.(桌面配置就无法保留了.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回到中文名账户把Outlook连接关闭, 切换到本地账号, 注销回到LA, 把原来的账号删掉.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把新账户连接到Outlook, 等他同步完.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置文件强制迁移后可能还是会有些问题, 有可能有些软件硬编码了你的用户路径,
这就只能把个别软件配置删掉了, 自行到 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;LA\AppData&lt;/span&gt;&lt;/code&gt; 中找.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我遇到的另一个问题是OneDrive同步失效了,打开OneDrive的Metro版, 显示”找不到此位置”,
在文件夹导航栏中也找不到OneDrive,图标栏也没有. 我的解决方案是:
到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;LA\AppData\Local\Microsoft\Windows\SkyDrive&lt;/span&gt;&lt;/code&gt; (我这里真的是SkyDrive)中把Setting文件夹剪切掉,
过一会OneDrive就自动开始同步了, 这个时候把同步暂停, 更改同步位置, 把以前的旧文件覆盖过去就行了.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Done.&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/windows-chinese-username.html" rel="alternate"/>
    <published>2015-03-08T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/matrix-arithmetic-in-haskell.html</id>
    <title>用 Haskell 实现的矩阵运算</title>
    <updated>2015-03-17T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="haskell"&gt;

&lt;p&gt;这学期开线性代数, 虽然我一向不喜欢数学, 本着将Haskell运用到实践中的精神,
想把上课教的几个矩阵运算写出来…虽然调试了半天, 回头一看,
好吧原来这么久简单的东西花了我那么多时间.&lt;/p&gt;
&lt;p&gt;虽然到现在的我都没把趣学指南看完因为课有点多&lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:s:`事实上是太懒了`&lt;/span&gt;&lt;/a&gt;, 只看到了State Monad这里吧,
还不是太懂, 一旦碰到「作为Monad值的函数」,「作为Applicate值的函数」这种东西我就抓瞎了.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/matrix-arithmetic-in-haskell.rst&lt;/span&gt;, line 16)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/matrix-arithmetic-in-haskell.rst&lt;/span&gt;, line 16); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;说回矩阵吧, 用Haskell写这个还是挺爽的, 相较于C来说:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;不用和各种数组下标打交道&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;经常编译不过, 但一旦通过编译, 往往就得到正确的结果了&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数出乎意料地短, 数乘和矩阵加减本来都是用递归实现的, 写完后发现原来分别可以用map和zipWith来替代,
一下子长度就缩短了一半不止&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各种类型错误让我想起了以前写Delphi的时候…&lt;/p&gt;
&lt;p&gt;实现矩阵转置的时候卡了一下, 我原来写的是&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt;
&lt;span class="nf"&gt;transpose&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="nf"&gt;transpose&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;一直爆empty list exception, 因为pattern matching 不到 ys, 最后一步是&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[[],[]...]&lt;/span&gt;&lt;/code&gt;
而不是&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[]&lt;/span&gt;&lt;/code&gt;, 上网查了一下矩阵转置函数才知道可以用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[]:_&lt;/span&gt;&lt;/code&gt;来匹配.&lt;/p&gt;
&lt;p&gt;对于矩阵乘法, 我采取的是将右边那个矩阵转置, 这样就可以简化成行乘行, 左边矩阵拆成单行乘过去.&lt;/p&gt;
&lt;p&gt;在用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$&lt;/span&gt;&lt;/code&gt;的时候总是遇到问题…总是报错, 也不知道为什么…我把简单地$当成让函数右结合的操作符,
但是如果写: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;getMartix&lt;/span&gt; &lt;span class="pre"&gt;$&lt;/span&gt; &lt;span class="pre"&gt;Matrix&lt;/span&gt; &lt;span class="pre"&gt;xs&lt;/span&gt; &lt;span class="pre"&gt;`mmul`&lt;/span&gt; &lt;span class="pre"&gt;ys&lt;/span&gt;&lt;/code&gt; 就错误.
看来理解还是有偏差的.&lt;/p&gt;
&lt;p&gt;下面的代码分别实现了:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;矩阵加法 plus&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;矩阵减法 sub&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;矩阵数乘 smul&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;矩阵乘积 mmul&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;矩阵的Eq实例和show实例&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到底乘法用的是 multiplication 还是 product 呢… 好奇怪.&lt;/p&gt;
&lt;p&gt;因为定义矩阵直接用了 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[[Int]]&lt;/span&gt;&lt;/code&gt;, 无法限制每个list的长度,
所以并不能保证这个Matrix里面肯定是一个符合定义的矩阵, 这个不知道怎么加以限制.&lt;/p&gt;
&lt;p&gt;看看接下来教的什么或许可以再往代码里加点东西, 改天看看别人是怎么写的.&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;getMartix&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;]]}&lt;/span&gt;

&lt;span class="nf"&gt;smul&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt;
&lt;span class="nf"&gt;i&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;smul&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;

&lt;span class="nf"&gt;plus&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt;  &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt;
&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;plus&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;

&lt;span class="nf"&gt;sub&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt;
&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;

&lt;span class="nf"&gt;transpose&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt;
&lt;span class="nf"&gt;transpose&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;[]:&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="nf"&gt;transpose&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;getMartix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transpose&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;mmul&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt;
&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mmul&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mmul&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mul_&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;getMartix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transpose&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;getMartix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mmul&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;mul_&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;mul_&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="nf"&gt;mul_&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mul_&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;

&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Eq&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
    &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;

&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt; &lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/matrix-arithmetic-in-haskell.html" rel="alternate"/>
    <published>2015-03-17T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/some-minds-about-linux.html</id>
    <title>不求甚解者用不好 Linux</title>
    <updated>2015-03-27T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="linux"&gt;

&lt;p&gt;今晚无聊到写这么一篇废话, 很大程度上是想自我批评一下.&lt;/p&gt;
&lt;p&gt;因为这学期又开始做手头的OS67, 打代码的环境就又切换到Linux下来了, Linux用得频繁了,
自然就会想折腾了. 但是在这几天的折腾过程中, 我发现我似乎不是那么适合使用Linux.&lt;/p&gt;
&lt;p&gt;虽然从开始装双系统到现在小半年有余, 可我还是不能顺利的解决我遇到的问题,
并且每次的解决方案总是做到「刚刚好能解决问题」为止, 从遇到问题开始,
搜索答案 -&amp;gt; 尝试解决 -&amp;gt; 找到解决方案, 然后这个周期就结束了.&lt;/p&gt;
&lt;p&gt;我很少去仔细思考, 「为什么会发生这种问题」「为什么这样做能解决问题」,
而发生问题的时候我也很难冷静下来看资料, 经常是随便把页面里的代码试一遍,
我甚至不知道用什么关键词去Google.&lt;/p&gt;
&lt;p&gt;比如说呢, 这个暑假回家带了一台旧笔记本回来, 想要在上面只装一个openSUSE 13.2,
安装过程一切顺利, 安装完毕后把系统更新到最新后就没法开机了, grub似乎正常,
卡在了&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;initrd&lt;/span&gt; &lt;span class="pre"&gt;/boot/initrd-3.16.7-7-desktop&lt;/span&gt;&lt;/code&gt;这里, 可选的另一个是&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;initrd-3.16.6-2-desktop&lt;/span&gt;&lt;/code&gt;,
这似乎是内核版本? 在网上搜索了很久, 凡是贴近这种情况的资料几乎都是英文的,
基本看不懂. 而且我连Rescue CD都不会用, 谈何修复?  最后我只能忍着不&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zypper&lt;/span&gt; &lt;span class="pre"&gt;up&lt;/span&gt;&lt;/code&gt;,
用着不更新的openSUSE.&lt;/p&gt;
&lt;p&gt;又比如今天折腾wine, (我甚至觉得这根本不是折腾…),
openSUSE社区的HillWood维护了一个项目叫winetricks-zh, 可以通过他很方便地安装
「符合中国国情」的各种软件, 比如QQ, 斗地主, 美图什么的.
当然我只是想用QQ(或许再加上个网易云音乐?). winetricks 本来是一个脚本,
用来快速下载wine下能跑的Windows软件的, 它的使用已经相当简单了:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="nd"&gt;@github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;hillwoodroc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;winetricks&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;winetricks&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zh&lt;/span&gt;
&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="n"&gt;winetricks&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;winetricks&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;verb&lt;/span&gt;
&lt;span class="n"&gt;winetricks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;最开始安装的是QQ轻聊版, 在winetricks qqlight.verb时遇到问题, 首先脚本要从Sourceforge上拉东西,
要备一张梯子(所以也折腾了一会儿的GoAgent), 安装好了之后打开来, QQ却莫名假死,
不能操作, 而且在安装完成后启动一次, 桌面上没有启动器, 我以为要自己去挂载的磁盘上找,
但是也找不到.&lt;/p&gt;
&lt;p&gt;尝试几次都得到错误的结果后我就怀疑是wine-64bit的问题, 如果你只安装wine-32bit的话,
winetricks就会提示 wineserver not found, 不能启动, 安装了完整的wine包,
默认的wine却是64bit的, 但是再切换32bit之后依然错误.&lt;/p&gt;
&lt;p&gt;在这之后我就把所有的配置&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.wine&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.local/share/applictions&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.local/share/wineprefixs&lt;/span&gt;&lt;/code&gt;
全都删除了, 再把和wine有关的包统统删掉, 又重新安装了一次, 桌面终于出现了启动器,
但是依然卡死.  最后我放弃了用轻聊版, 用了QQ正式版, 出乎意料地顺利(checksum错误竟然没问题?)
勉强安装是安装成功了, 速度还好.&lt;/p&gt;
&lt;p&gt;但是在这整个的过程中, 我感觉我并没有学到了什么, 在不断地尝试中我只是把Linux看成了一种玄学,
「或许多试几次就成功了呢?」,「把这里改一下或许就不报错了呢?」&lt;/p&gt;
&lt;p&gt;然后在好不容易成功了之后, 我就几乎不想再去动它了, 我还是不明白为什么这样做成功了,
那样做为什么就不对…&lt;/p&gt;
&lt;p&gt;是否就是这种不求甚解的心态阻止了我的前进呢? 我怕麻烦, 觉得弄不懂, Linux的世界太复杂了,
不明白苏姐他们到底经过了怎样一番努力才能如此熟悉一个发行版.&lt;/p&gt;
&lt;p&gt;不求甚解者, 玩不好Linux, 这句话其实还可以继续推广,
不求甚解者, 当不好黑客, 写不好代码, 画不好画……&lt;/p&gt;
&lt;p&gt;我曾经在知乎上提了一个问题, &lt;a class="reference external" href="http://www.zhihu.com/question/26956394"&gt;发现自己不愿意思考怎么办&lt;/a&gt;,
现在想想, 「不求甚解」也是浮躁的一种表现吧?&lt;/p&gt;
&lt;p&gt;感觉我的问题, 白提了呢.&lt;/p&gt;
&lt;p&gt;睡觉吧, 或许明天起来后, 突然就知道应该这么做了.&lt;/p&gt;
&lt;p&gt;顺道一说, 今晚水了一道AliCTF的Reverse题…估计也就这一道了.&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/some-minds-about-linux.html" rel="alternate"/>
    <published>2015-03-27T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/do-notation-and-bind-of-haskell.html</id>
    <title>do 记法和 &gt;&gt;= 的等效表达</title>
    <updated>2015-04-09T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="do"&gt;

&lt;p&gt;明明在开学的时候，&lt;a class="reference internal" href="todo.html#book-Haskell" title="Haskell 趣学指南 book"&gt;&lt;code class="xref any any-book docutils literal notranslate"&gt;&lt;span class="pre"&gt;Haskell&lt;/span&gt; &lt;span class="pre"&gt;趣学指南&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 就只剩下三十来页了，但是还书日在即，
我就到图书馆问阿姨能不能还了马上再借，这样做的结果是，书还在我手里，
可是至今没看完。&lt;/p&gt;
&lt;p&gt;当然这和后面的内容有点难有关系（岂止是有点难？！），本来脑子就不够用，
看到State Monad那一段就懵了。&lt;/p&gt;
&lt;p&gt;今晚看了挺久的，勉强算有点思路，当然对它的理解应该还是在一个比较low的水平上。
就算是看了大半本书， 知乎上对Haskell的讨论还是又非常多看不懂。&lt;/p&gt;
&lt;p&gt;State Monad是一种函数，当然也是一种Monad，是一种带状态的计算，等待着一个状态，
如果得到状态后会产生一个值和新的状态。&lt;/p&gt;
&lt;p&gt;书里用栈作为例子，实现了push和pop，但是只提供了do记法的示例，自己尝试用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;改写并没有成功。&lt;/p&gt;
&lt;p&gt;State Monad对于bind(&amp;gt;&amp;gt;=)的一种解释是这样子的：
来自：&lt;a class="reference external" href="https://wiki.haskell.org/State_Monad"&gt;https://wiki.haskell.org/State_Monad&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;act1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;fact2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runState&lt;/span&gt; &lt;span class="n"&gt;act2&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;
                &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runState&lt;/span&gt; &lt;span class="n"&gt;act1&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
                      &lt;span class="n"&gt;act2&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fact2&lt;/span&gt; &lt;span class="n"&gt;iv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以看到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;接受一个State，和一个生成State的函数，最后生成一个State，
注意最后生成的这个State是一个函数，还需要一个状态。&lt;/p&gt;
&lt;p&gt;act1是一个带状态计算，接受状态s后（不能直接接受，必须用runState「脱壳」）生成一个tuple，
左边是值，右边是新的状态。从fact2的类型签名可以知道，act2是fact2应用值iv后得到的 &lt;strong&gt;带状态计算&lt;/strong&gt; 。
那么它还需要一个状态，这个&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;函数的最终值就是act2脱壳后应用新状态的值。&lt;/p&gt;
&lt;p&gt;注意上面这段代码是表示了当带有&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;的运算遇到一个状态时所做的操作，似乎少了一个runState?&lt;/p&gt;
&lt;p&gt;那么对于：&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Stack&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="kt"&gt;Stack&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="kt"&gt;Stack&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="kt"&gt;Stack&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="n"&gt;pop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;结果应该是:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ghci&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;runState&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;怎么用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;改写上面的do notation呢？&lt;/p&gt;
&lt;p&gt;do实际上是嵌套的&amp;gt;&amp;gt;=的一个语法糖，&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;x&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="pre"&gt;foo&lt;/span&gt;&lt;/code&gt; 就是一个绑定， 而且一旦绑定，
在之后的语句里也可以使用x了，所以相当于&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;foo&lt;/span&gt; &lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="pre"&gt;(\x&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;后面的语句)&lt;/span&gt;&lt;/code&gt;。
下面的两段程序是等价的，第二段程序为了最后能用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;return&lt;/span&gt; &lt;span class="pre"&gt;（x*y）&lt;/span&gt;&lt;/code&gt;，
就得两个lambda嵌套起来。&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;但是do里面也可以不用绑定，不用绑定的话，&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;也可以不必嵌套，而且和上面的不同，
这里有push和pop两个函数，pop相当于act1，push则是fact2，他们的行为不同，
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt; 的前面必须是一个act1类型，后面必须是fact2类型，
如果用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;串起来应该是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pop&lt;/span&gt; &lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="pre"&gt;push&lt;/span&gt; &lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="pre"&gt;push&lt;/span&gt; &lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="pre"&gt;push&lt;/span&gt;&lt;/code&gt;，
但是要push三个值，push并不需要从&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;接收值，
可以用lambda来更改(因为没有利用到前面的值，所以这里嵌套与否都没问题)：&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;test&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="kt"&gt;Stack&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;test&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-text notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ghci&amp;gt; runState test&amp;#39; []
(5,[4,3])
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;最后，书里的&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt; 实现是这样子的：&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
                                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;State&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
                                &lt;span class="kr"&gt;in&lt;/span&gt;  &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;newState&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;现在看来就好懂多了。对于State Monad，&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;的意义是，等待一个初始状态，
取一个带状态计算，讲初始状态应用到带状态计算上，得到一个值和新状态，
值和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;右边的函数应用得到新的带状态计算，这个带状态计算又和新状态作用，
得到最终值和最终状态。当然这里的值和状态都可以继续传递下去，形成一条链。&lt;/p&gt;
&lt;p&gt;（我觉得State Monad有个反人类的地方就是，本来按顺序沿着&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;处理状态，
偏偏初始状态是放在最右的)&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/do-notation-and-bind-of-haskell.html" rel="alternate"/>
    <published>2015-04-09T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/record-of-a-boring-hack.html</id>
    <title>记一次毫无技术含量的 Hack</title>
    <updated>2015-05-12T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="hack"&gt;

&lt;p&gt;早上起晚了, 八点的汇编实验课七点三十五才起床, 起来抄完待会要交的作业然后去等公交,
大概八点二十分到机房, 老师并没有说什么.&lt;/p&gt;
&lt;p&gt;这几天的心情不是太爽, 因此实验课没打算做作业. 然而桌面上有个OD, 就随便打开来看看了.&lt;/p&gt;
&lt;p&gt;「学校的用的防护软件不会这么渣吧?」我是这样想的, 但不妨一试, 反正试了也不花钱.&lt;/p&gt;
&lt;p&gt;系统是古旧的XP, 在托盘那里有SQLServer, 瑞星, 联想远程网络控制被控端,
联想硬盘保护工具(好像是这个名字), 因为是电脑联想品牌机, 所以后两个应该是买的时候送的,
点击退出硬盘保护工具, 一下子就能退出, 但这并没有什么卯用, 硬盘保护已经在系统启动前就先行启动了.
退出被控端需要管理员密码, 对这个密码我倒是有点兴趣, 用OD附加看看.&lt;/p&gt;
&lt;p&gt;附加了并没有办法运行, 提示该线程被挂起或者线程终止. 但是在网络控制软件下有个小工具,
叫ChangeIP.exe, 使用它更改电脑的IP也需要密码, 挑这个软柿子捏好了. OD打开,
发现他是用MFC写的(有MFC的模块), 查看导入函数, 没有GetWindowText 或者是 GetDlgItem 之类的函数,
但是有 IsDebugPresent(), 有反调试, 所幸这个OD里插件齐全,
打开HideOD插件把所有绕过的选项勾上, 重启.&lt;/p&gt;
&lt;p&gt;重启后, 程序正常地在OD里跑起来了. 到了输入密码这个窗口, 程序里并没有搜到什么有用的字符串,
那就内存断点吧. 随便输入一个密码, 然后回到内存窗口里搜索该密码…没有搜到.
那就点击确定-&amp;gt;提示密码错误, 之后再搜索, 有了. 对该地址下内存断点. 再输入一次,
点击确定, 程序断下来了.&lt;/p&gt;
&lt;p&gt;为什么说这是一次没有技术含量的Hack呢? 程序读取改地址的第一个字节,
写入 00(并不是我输入的值), 我并没有耐心分析他想做什么(当然分析了也不一定有结果),
所以直接F9让他继续执行, 继续触发断点, 果然瞎猫碰见死耗子了, F9几次后,
到了密码验证的环节了, esi寄存器里出现了一个字符串的地址 “jsjxxgmm”
(教师教学修改密码?及时进行修改密码?), 八九不离十. 我重开了ChangeIP.exe,
输入这个字串, Accepted.&lt;/p&gt;
&lt;p&gt;取得了这个密码除了脱离被控端外似乎没什么卯用, 但是整个机房的软件都是这个密码,
完全可以下载一个控制端软件, 通过这个对其他电脑进行控制(下次试试).
另外的很重要的一点是, 硬盘保护系统也是这个密码, 这样一来, 还原卡就失效了.
想往电脑里放什么就能放什么.&lt;/p&gt;
&lt;p&gt;嗯, 大致如此.&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/record-of-a-boring-hack.html" rel="alternate"/>
    <published>2015-05-12T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/threee-way-of-anti-debug.html</id>
    <title>几种简单的反调试方法</title>
    <updated>2015-05-19T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="id1"&gt;

&lt;p&gt;这里面没有什么自己的东西,
都是从看雪的&lt;a class="reference external" href="http://bbs.pediy.com/showthread.php?t=184679"&gt;OD从零系列教程&lt;/a&gt;里看来的.
最近看到的几章都是讲反调试的, 虽然对其本质还没有去深入了解,
还是觉得应该先把这些记下来.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面的一些信息是基于自己现有的知识推测出来的, 不一定对.&lt;/strong&gt;
关于函数的说明, 都是基于MSDN的粗浅翻译, 要想了解更准确的信息, 请查阅MSDN.&lt;/p&gt;
&lt;div class="contents topic" id="id2"&gt;
&lt;p class="topic-title"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id1" id="id4"&gt;几种简单的反调试方法&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x0-isdebuggerparent" id="id5"&gt;0x0  利用IsDebuggerParent()&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x0-0" id="id6"&gt;0x0.0 介绍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x0-1" id="id7"&gt;0x0.1 栗子&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x0-2" id="id8"&gt;0x0.2 绕过&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x1-i" id="id9"&gt;0x1 检测进程名I&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x1-0" id="id10"&gt;0x1.0 介绍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x1-1" id="id11"&gt;0x1.1 栗子&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x1-2" id="id12"&gt;0x1.2 绕过&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x2-ii" id="id13"&gt;0x2 检测进程名II&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x2-0" id="id14"&gt;0x2.0 介绍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x2-1" id="id15"&gt;0x2.1 栗子&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x2-2" id="id16"&gt;0x2.2 绕过&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id17"&gt;检测窗口类名&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x3-0" id="id18"&gt;0x3.0 介绍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x3-1" id="id19"&gt;0x3.1 栗子&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x3-2" id="id20"&gt;0x3.2 绕过&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x3-unhandledexcepitonzwqueryinformationprocess" id="id21"&gt;0x3 UnhandledExcepiton和ZwQueryInformationProcess&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x4-ntglobalflag-processheap-outputdebugstringa" id="id22"&gt;0x4 NtGlobalFlag,ProcessHeap,OutputDebugStringA&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#ntglobalflag" id="id23"&gt;NtGlobalFlag&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#processheap" id="id24"&gt;ProcessHeap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#outputdebugstringa" id="id25"&gt;OutputDebugStringA&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x4-1" id="id26"&gt;0x4.1 栗子&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#x4-2" id="id27"&gt;0x4.2 绕过&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="x0-isdebuggerparent"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;0x0  利用IsDebuggerParent()&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="x0-0"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;0x0.0 介绍&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该函数检测程序是否正在被调试, 是的话返回1,否则返回0,
该函数位于&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Kernel32.dll&lt;/span&gt;&lt;/code&gt;中, 其代码如下:&lt;/p&gt;
&lt;div class="highlight-nasm notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;dword&lt;/span&gt; &lt;span class="nv"&gt;ptr&lt;/span&gt; &lt;span class="nb"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mh"&gt;0x18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;dword&lt;/span&gt; &lt;span class="nv"&gt;ptr&lt;/span&gt; &lt;span class="nb"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="nb"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;movzx&lt;/span&gt; &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="nv"&gt;ptr&lt;/span&gt; &lt;span class="nb"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="nb"&gt;eax&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mh"&gt;0x2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;fs寄存器指示了(并不是储存了)&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PEB&lt;/span&gt;&lt;/code&gt;(Process Environment Block)的地址,
因为GDT的关系,fs寄存器中储存的只是选择子而不是地址,
因此要从fs的0x18偏移处取一个指向自己的self指针(这一步实际上是可以省略的).&lt;/p&gt;
&lt;p&gt;接下来从&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PEB&lt;/span&gt;&lt;/code&gt;的0x30偏移处取得&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NT_TIB&lt;/span&gt;&lt;/code&gt;结构的首地址,
该结构的0x2偏移处是&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;BeingDebugged&lt;/span&gt;&lt;/code&gt;字段, 表示当前进程是否被调试,
因此通过这个函数可以检测调试器.&lt;/p&gt;
&lt;p&gt;你可以在代码中直接使用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;IsDebuggerParent&lt;/span&gt;&lt;/code&gt;或者嵌入等价的汇编代码.
动态载入函数比直接引入好些.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x0-1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;0x0.1 栗子&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* 内联汇编 */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="cm"&gt;/* 这里的 movl %fs:30, %ebx 就相当于&lt;/span&gt;
&lt;span class="cm"&gt;     * mov eax, dword ptr fs:[0x18]&lt;/span&gt;
&lt;span class="cm"&gt;     * mov eax, dword ptr fs:[eax + 0x30]&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;movl %fs:0x30, %ebx; movzx 2(%ebx), %eax&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* 动态载入 */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;HINSTANCE&lt;/span&gt; &lt;span class="n"&gt;kern_lib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoadLibraryEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kernel32.dll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kern_lib&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;FARPROC&lt;/span&gt; &lt;span class="n"&gt;lIsDebuggerPresent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetProcAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kern_lib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IsDebuggerPresent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lIsDebuggerPresent&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;lIsDebuggerPresent&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;FreeLibrary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kern_lib&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* 测试的时候记得关掉OD的插件, 或者直接用原版 */&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="x0-2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;0x0.2 绕过&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;如果能定位到函数的话, 修改他的流程.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以在载入程序后, 把那个&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;BeingDebugged&lt;/span&gt;&lt;/code&gt;位置0,
当然, HideDebugger插件已经替我们做了这件事.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="x1-i"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;0x1 检测进程名I&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="x1-0"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;0x1.0 介绍&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通过检测特定调试器(常常是OD)的进程是否存在来防止被调试.&lt;/p&gt;
&lt;p&gt;用到了下面几个API:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;EnumProcesses&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;WINAPI&lt;/span&gt; &lt;span class="nf"&gt;EnumProcesses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;_Out_&lt;/span&gt; &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pProcessIds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt;  &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_Out_&lt;/span&gt; &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pBytesReturned&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;EnumProcesses 枚举所有的进程PID, 第一个参数是缓冲区, 储存所有进程PID的列表,
参数二是以byte计数的数组长度, 参数三是阶收到的数组长度, 同样以byte计数.
函数执行成功返回非零值.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;GetModuleBaseNameA&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;WINAPI&lt;/span&gt; &lt;span class="nf"&gt;GetModuleBaseName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt;     &lt;span class="n"&gt;HANDLE&lt;/span&gt;  &lt;span class="n"&gt;hProcess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_In_opt_&lt;/span&gt; &lt;span class="n"&gt;HMODULE&lt;/span&gt; &lt;span class="n"&gt;hModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_Out_&lt;/span&gt;    &lt;span class="n"&gt;LPTSTR&lt;/span&gt;  &lt;span class="n"&gt;lpBaseName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt;     &lt;span class="n"&gt;DWORD&lt;/span&gt;   &lt;span class="n"&gt;nSize&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;该函数取得某个模块的名称, 参数一是线程句柄,  参数二是模块句柄,
参数三是储存返回模块名的缓冲区, 最后是缓冲区的长度, 以char计数.
函数执行成功则返回接收到的模块名的长度&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;OpenProcess&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="n"&gt;WINAPI&lt;/span&gt; &lt;span class="nf"&gt;OpenProcess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt; &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;dwDesiredAccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt; &lt;span class="n"&gt;BOOL&lt;/span&gt;  &lt;span class="n"&gt;bInheritHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt; &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;dwProcessId&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;该函数通过PID(参数4)获得进程句柄失败则返回NULL.
(获得句柄后可以在OD的H窗口看到该句柄).&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;EnumProcessModules&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;WINAPI&lt;/span&gt; &lt;span class="nf"&gt;EnumProcessModules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt;  &lt;span class="n"&gt;HANDLE&lt;/span&gt;  &lt;span class="n"&gt;hProcess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_Out_&lt;/span&gt; &lt;span class="n"&gt;HMODULE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lphModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt;  &lt;span class="n"&gt;DWORD&lt;/span&gt;   &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_Out_&lt;/span&gt; &lt;span class="n"&gt;LPDWORD&lt;/span&gt; &lt;span class="n"&gt;lpcbNeeded&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;函数枚举指定进程里的所有Modules, 取回句柄. 参数一指定了进程句柄,
参数二是返回的模块句柄缓冲区, 参数三是以byte计数的缓冲区大小,
四是最终取回句柄的大小, byte计数. 函数执行成功返回非零值.&lt;/p&gt;
&lt;p&gt;利用这些函数检测调试器的经典过程是这样的:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;首先用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;GetProcAddress&lt;/span&gt;&lt;/code&gt;动态载入上面的其他函数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;EnumProcesses&lt;/span&gt;&lt;/code&gt;对所有进程进行枚举, 实际上是获得一个储存了所有进程PID的列表&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以获取到的PID为参数调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OpenProcess&lt;/span&gt;&lt;/code&gt;, 取得进程句柄&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用获取到的句柄执行&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;EnumProcessModules&lt;/span&gt;&lt;/code&gt;枚举进程的模块, 只取第一个模块&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用进程句柄和模块句柄为参数调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;GetModuleBaseNameA&lt;/span&gt;&lt;/code&gt;得到进程名&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和要检测的进程名作比较, 这决定了程序的流程&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果是待检测进程的话, 选择自行退出或者是结束调试器, 可能用到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TerminatePorcess&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CloseHandle&lt;/span&gt;&lt;/code&gt;关闭句柄&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="x1-1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;0x1.1 栗子&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;//TODO&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x1-2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;0x1.2 绕过&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;令OpenProcess始终返回&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NULL&lt;/span&gt;&lt;/code&gt;, 打不开任何进程.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;改动OpenProcess后的程序流程&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更改OD的名字, 进程名也会同时被更改;(最简单的做法了)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="x2-ii"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;0x2 检测进程名II&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="x2-0"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;0x2.0 介绍&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用的API:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;CreateToolhelp32Snapshot&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="n"&gt;WINAPI&lt;/span&gt; &lt;span class="nf"&gt;CreateToolhelp32Snapshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt; &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;dwFlags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt; &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;th32ProcessID&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;该函数对指定的进程做快照, dwFlags参数决定进程的那一部分会被包含在快照中.
参数二为PID, 返回快照句柄. 指定参数 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,&lt;/span&gt; &lt;span class="pre"&gt;0)&lt;/span&gt;&lt;/code&gt;
则对系统中所有的进程进行快照, 可以被&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Process32First&lt;/span&gt;&lt;/code&gt;进行枚举.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Process32First&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;WINAPI&lt;/span&gt; &lt;span class="nf"&gt;Process32First&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt;    &lt;span class="n"&gt;HANDLE&lt;/span&gt;           &lt;span class="n"&gt;hSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_Inout_&lt;/span&gt; &lt;span class="n"&gt;LPPROCESSENTRY32&lt;/span&gt; &lt;span class="n"&gt;lppe&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在快照中取得第一个进程的相关信息.
参数一: 由CreateToolhelp32Snapshot返回的快照句柄.
参数二: 指向PORCESSENTRY32结构体的指针, 包含可执行文件名, PID,和父进程PID等.
执行成功返回true.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Process32Next&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;WINAPI&lt;/span&gt; &lt;span class="nf"&gt;Process32Next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;_In_&lt;/span&gt;  &lt;span class="n"&gt;HANDLE&lt;/span&gt;           &lt;span class="n"&gt;hSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_Out_&lt;/span&gt; &lt;span class="n"&gt;LPPROCESSENTRY32&lt;/span&gt; &lt;span class="n"&gt;lppe&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;取回快照中下一个进程的信息(然而你必须先用Process32First取第一个), 参数和Process32First基本相同.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Process32First&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Process32Next&lt;/span&gt;&lt;/code&gt;中涉及到的&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PPROCESSENTRY32&lt;/span&gt;&lt;/code&gt;结构体如下:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PROCESSENTRY32&lt;/span&gt; &lt;span class="n"&gt;structure&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;tagPROCESSENTRY32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;     &lt;span class="n"&gt;dwSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;     &lt;span class="n"&gt;cntUsage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;     &lt;span class="n"&gt;th32ProcessID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;ULONG_PTR&lt;/span&gt; &lt;span class="n"&gt;th32DefaultHeapID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;     &lt;span class="n"&gt;th32ModuleID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;     &lt;span class="n"&gt;cntThreads&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;     &lt;span class="n"&gt;th32ParentProcessID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;LONG&lt;/span&gt;      &lt;span class="n"&gt;pcPriClassBase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;     &lt;span class="n"&gt;dwFlags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;TCHAR&lt;/span&gt;     &lt;span class="n"&gt;szExeFile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX_PATH&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;PROCESSENTRY32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;PPRO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;最后一个参数就是进程名了好像.&lt;/p&gt;
&lt;p&gt;利用该方法检测进程的基本流程是:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,&lt;/span&gt; &lt;span class="pre"&gt;0)&lt;/span&gt;&lt;/code&gt;获得所有进程快照&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Process32First&lt;/span&gt;&lt;/code&gt;取得第一个进程的信息, 判断是否是要检测的进程&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Process32Next&lt;/span&gt;&lt;/code&gt;循环检测其他进程&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="x2-1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;0x2.1 栗子&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;//TODO&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x2-2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;0x2.2 绕过&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;绕过的做法基本同I.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;检测窗口类名&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="x3-0"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;0x3.0 介绍&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;又是API…&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;FindWindowA&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HWND&lt;/span&gt; &lt;span class="n"&gt;WINAPI&lt;/span&gt; &lt;span class="nf"&gt;FindWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;_In_opt_&lt;/span&gt; &lt;span class="n"&gt;LPCTSTR&lt;/span&gt; &lt;span class="n"&gt;lpClassName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;_In_opt_&lt;/span&gt; &lt;span class="n"&gt;LPCTSTR&lt;/span&gt; &lt;span class="n"&gt;lpWindowName&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;该函数取回和参数匹配的顶级窗口的句柄, 大小写不敏感.&lt;/p&gt;
&lt;p&gt;参数一: 窗口类名
参数二: 窗口名
参数可选, 至少一个, 另一个可置NULL.
执行成功返回句柄.&lt;/p&gt;
&lt;p&gt;因为OD的窗口名常常不确定, 利用窗口类名往往比较靠谱;
将窗口名置NULL, 检测OD的顶级窗体类名即可, 该类名可以通过Spy++得到.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x3-1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;0x3.1 栗子&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;//TODO&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x3-2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;0x3.2 绕过&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;HideDebugger插件有绕过 FindWindowA/EnumWindows 的选项;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用RE-Pair为OD主程序打补丁, 可更改其类名&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="x3-unhandledexcepitonzwqueryinformationprocess"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;0x3 UnhandledExcepiton和ZwQueryInformationProcess&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这种反调试方法比前面的方法更具技巧性一些, 利用了Windows的异常处理机制,
但是我还不了解这些异常处理, 不敢胡说,暂时略过.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/threee-way-of-anti-debug.rst&lt;/span&gt;, line 320)&lt;/p&gt;
&lt;p&gt;No directive entry for “raw” in module “docutils.parsers.rst.languages.zh_cn”.
Using English fallback for directive “raw”.&lt;/p&gt;
&lt;/div&gt;
&lt;p style="display:none;"&gt;

* SetUnhandledExceptionFilter

```c
LPTOP_LEVEL_EXCEPTION_FILTER WINAPI SetUnhandledExceptionFilter(
  _In_ LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
);
```
该函数让应用程序可以取代该进程中所有线程的系统异常处理函数.(大概是吧...)

&gt; Enables an application to supersede the top-level exception handler of each
&gt; thread of a process.

调用该函数后, 如果有异常发生, 且该进程当前没有被调试,
则该异常会被 `Unhandled Exception Filter`处理 , Filter会调用异常筛选(?)函数,
该函数由参数一指定.

&gt; After calling this function, if an exception occurs in a process that is not being debugged,
&gt; and the exception makes it to the unhandled exception filter,
&gt; that filter will call the exception filter function specified by the
&gt; lpTopLevelExceptionFilter parameter.

* UnhandledExceptionFilter

```c
LONG WINAPI UnhandledExceptionFilter(
  _In_ struct _EXCEPTION_POINTERS *ExceptionInfo
);
```

如果当前进程被调试的话, 程序定义的函数(?)会将未处理的异常传递给调试器.
否则, 它将可选地显示一个应用程序错误的消息框, 并使得异常处理函数执行.
该函数只能在异常处理例程中的Filter Expression中被调用.

&gt; An application-defined function that passes unhandled exceptions to the debugger,
&gt; if the process is being debugged. Otherwise,
&gt; it optionally displays an Application Error message box and causes the exception handler to be executed.
&gt; This function can be called only from within the filter expression of an exception handler.

该函数唯一的参数是一个`EXCEPTION_POINTERS`指针,
指定了对此异常的描述和发生异常时的上下文.

&gt; A pointer to an `EXCEPTION_POINTERS` structure that specifies a description
&gt; of the exception and the processor context at the time of the exception.

&gt; 发生异常时系统的处理顺序(by Jeremy Gordon, Hume):
&gt; 1. 系统首先判断异常是否应发送给目标程序的异常处理例程,如果决定应该发送,
&gt;    并且目标程序正在被调试,则系统挂起程序并向调试器发送`EXCEPTION_DEBUG_EVENT`消息.
&gt; 1. 如果你的程序没有被调试或者调试器未能处理异常,
&gt;    系统就会继续查找你是否安装了线程相关的异常处理例程,
&gt;    如果你安装了线程相关的异常处理例程,系统就把异常发送给你的程序seh处理例程,
&gt;    交由其处理.
&gt; 1. 每个线程相关的异常处理例程可以处理或者不处理这个异常,
&gt;    如果他不处理并且安装了多个线程相关的异常处理例程, 可交由链起来的其他例程处理.
&gt; 1. 如果这些例程均选择不处理异常,如果程序处于被调试状态,操作系统仍会再次挂起程序通知debugger.
&gt; 1. **如果程序未处于被调试状态或者debugger没有能够处理,
&gt;    并且你调用SetUnhandledExceptionFilter安装了最后异常处理例程的话,系统转向对它的调用.**
&gt; 1. **如果你没有安装最后异常处理例程或者他没有处理这个异常,
&gt;    系统会调用默认的系统处理程序(UnhandledExceptionFilter),通常显示一个对话框,
&gt;    你可以选择关闭或者最后将其附加到调试器上的调试按钮.
&gt;    如果没有调试器能被附加于其上或者调试器也处理不了,系统就调用ExitProcess终结程序.**
&gt; 1. 不过在终结之前,系统仍然对发生异常的线程异常处理句柄来一次展开,
&gt;    这是线程异常处理例程最后清理的机会.

利用这两个函数的流程可能是:

1. 当点击CM中的check按钮时, 程序抛出不可忽略的异常, 因为程序正在被调试,
   所以系统将异常传递给调试器(EXCEPITON_DEBUG_EVENT),
   `SetUnhandledExceptionFilter`指定的异常处理函数并没有被执行
   (实际上这个函数里放置的应该是程序的真正流程).
2. 然而OD并不能处理这个异常, 因此最终将调用`UnhandledExceptionFilter`处理异常.

在`UnhandledExceptionFilter`中有函数`ZwQueryInfomationProcess`,
可以用来判断程序是否被调试, 它是随着`UnhandledExceptionFilter`被调用(在系统领空中),
但是这个函数也可以单独抽取出来被调用.

```c
NTSTATUS WINAPI ZwQueryInformationProcess(
  _In_      HANDLE           ProcessHandle,
  _In_      PROCESSINFOCLASS ProcessInformationClass,
  _Out_     PVOID            ProcessInformation,
  _In_      ULONG            ProcessInformationLength,
  _Out_opt_ PULONG           ReturnLength
);
```

取得特定进程的信息.
在这里只需要知道使ProcessInformationClass = ProcessDebugPort (7),
就可以从ProcessInformation缓冲区中取得ProcessInformationLength长度的信息,
返回FFFFFFFF的话表示正在被调试, 返回0反之. 对应上面步骤f的:

如果没有调试器能被附加于其上或者调试器也处理不了,系统就调用ExitProcess终结程序.
如果正在调试(返回FFFFFFF)的话-&gt;异常传递给调试器-&gt;调试器处理不了-&gt;程序退出.
按教程的说法和实际测试的得到: 如果返回0的话跳转到SetUnhandledExceptionFilter指定的函数,
利用异常实现了反调试.

可是执行SetUnhandledExceptionFilter指定的函数不是在步骤c吗,
UnhandledExceptionFilter可是步骤6才执行的?

### 绕过

* 手动修改ZwQueryInformationProcess返回值
* HideDebugger插件的UnhandledExceptionTricks选项可以绕过此反调试.
* HideOD插件可以单独绕过ZwQueryInformationProcess(记住勾选AutoRun)
&lt;/p&gt;&lt;/div&gt;
&lt;div class="section" id="x4-ntglobalflag-processheap-outputdebugstringa"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;0x4 NtGlobalFlag,ProcessHeap,OutputDebugStringA&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这几个都比较简单, 从略.&lt;/p&gt;
&lt;div class="section" id="ntglobalflag"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;NtGlobalFlag&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该标志在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PEB&lt;/span&gt;&lt;/code&gt;中,对于x86, 在0x68处
对于x64, 在 0xbc 处.&lt;/p&gt;
&lt;p&gt;定位到PEB:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;在EIP入口点定位到EBP的值;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;或者定位到FS:[0x18];&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NtGlobalFlag 默认总是0, 除非它被一个调试器所附加.
当调试器创建一个进程时, NtGlobalFlag会有如下的值:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FLG_HEAP_ENABLE_TAIL_CHECK&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FLG_HEAP_ENABLE_FREE_CHECK&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FLG_HEAP_VALIDATE_PARAMETERS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;因此, 如果&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;NtGlobalFlag&lt;/span&gt; &lt;span class="pre"&gt;==&lt;/span&gt; &lt;span class="pre"&gt;0x10&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;0x20&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;0x40&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt;&amp;#160; &lt;span class="pre"&gt;0x70&lt;/span&gt;&lt;/code&gt;时, 程序正在被调试.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="processheap"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;ProcessHeap&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在PEB的 0x10 偏移处的一个 DWORD, 不为0则表示正在被调试.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outputdebugstringa"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;OutputDebugStringA&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OutputDebugStringA&lt;/span&gt;&lt;/code&gt;是个函数, 该函数向调试器输出一个字符串,
它能用于反调试是因为OD的一个bug, 当用这个函数输出一长串的%s字串时, OD会崩溃.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x4-1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;0x4.1 栗子&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;无&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x4-2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;0x4.2 绕过&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;修改对应的值&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HideOD 插件的 HideNtDebugBit选项, 以及 OutDebugStringA 选项或
Hide Debugger插件的OutputDebugString exploit选项&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/threee-way-of-anti-debug.html" rel="alternate"/>
    <published>2015-05-19T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/first-attempt-of-python.html</id>
    <title>Python 初试</title>
    <updated>2015-06-15T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="python"&gt;

&lt;p&gt;因为现在经常在三个系统(Win, openSUSE, Arch)之间切换, 一些软件的配置文件的部署成了问题,
每次都从一台机复制到另一台实在麻烦, 而且不知道哪台电脑上使用的配置是最新改动的.&lt;/p&gt;
&lt;p&gt;所以后来就把配置文件托管到了GitCafe, 后来因为用不惯 GitCafe 的 web 界面,
还是在把配置文件放在 GitHub 上了:
&lt;a class="reference external" href="https://github.com/SilverRainZ/dotfiles"&gt;https://github.com/SilverRainZ/dotfiles&lt;/a&gt;
(不过还是觉得更新这些配置文件的 Commit 太影响我的 ContributionsCalendar 了)&lt;/p&gt;
&lt;p&gt;即使托管到 Github, 每次把文件拉下来都要复制到相应的位置上去, 依然麻烦,
所以就打算写个脚本来帮忙, 但是我并不会任何一门脚本
(Batch和Shell这些不跨平台的就算了…写起来又麻烦), 所以就现学现卖用 Python 试一试,
花了一个晚上, 写了个100来行的小脚本(有够慢的).
&lt;a class="reference external" href="https://github.com/SilverRainZ/dotfiles/blob/master/sync.py"&gt;https://github.com/SilverRainZ/dotfiles/blob/master/sync.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;脚本&lt;/h2&gt;
&lt;p&gt;这个脚本的功能很简单, 就是根据指定的参数, 把指定的配置从仓库中复制到用户目录(deploy),
或者把用户目录下的配置复制到仓库(collect).&lt;a href="#id2"&gt;&lt;span class="problematic" id="id3"&gt;:s:`这样都能写100多行!`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/first-attempt-of-python.rst&lt;/span&gt;, line 30)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/first-attempt-of-python.rst&lt;/span&gt;, line 30); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;现在只支持我常用的三个软件的配置: vim, pentadacytl, zsh.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;   &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;simple&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;deploy&lt;/span&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s profiles form repo to local&lt;/span&gt;
    &lt;span class="n"&gt;collect&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s profiles form local to repo&lt;/span&gt;
    &lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;profiles&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;reomote&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;
    &lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="n"&gt;profiles&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="n"&gt;reomote&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;
&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;vim&lt;/span&gt;
    &lt;span class="n"&gt;zsh&lt;/span&gt;
    &lt;span class="n"&gt;pen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pentadactyl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;zsh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pen&lt;/span&gt;
&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;缩进&lt;/h2&gt;
&lt;p&gt;Python 的一大特点就是用缩进来划分代码块, 这会让 if 的嵌套变得很不清晰,
偏偏又不提供 switch 语句或者 Pattern Matching, 所以代码中的各种 if 又省不了,
这个有点痛苦. 不过 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;if&lt;/span&gt; &lt;span class="pre"&gt;xx&lt;/span&gt; &lt;span class="pre"&gt;in&lt;/span&gt; &lt;span class="pre"&gt;[...]&lt;/span&gt;&lt;/code&gt; 这样的语法我倒是觉得挺好的,
避免了&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;if&lt;/span&gt; &lt;span class="pre"&gt;a==xx&lt;/span&gt; &lt;span class="pre"&gt;||&lt;/span&gt; &lt;span class="pre"&gt;a&lt;/span&gt; &lt;span class="pre"&gt;==&lt;/span&gt; &lt;span class="pre"&gt;xxx&lt;/span&gt; &lt;span class="pre"&gt;||&lt;/span&gt; &lt;span class="pre"&gt;...&lt;/span&gt;&lt;/code&gt; 这样的超长 if.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;函数式特性&lt;/h2&gt;
&lt;p&gt;再跑一下题, 我在这学期看了F叔的「Haskell趣学指南」, 自觉 Haskell 这门语言难以入门,
至今写过的代码也不过寥寥数行, 只能算是大概了解了他的语法, 却因此沾染上了一些「恶习」,
老想在其他语言里使用那些FP的语法特性, 或者是当用这些特定可以让代码更好的时候,
抱怨 xxx 怎么没有这个语法. 我自己都觉得有点可笑, 不过, Python 一定程度上满足了我这奇怪的要求.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;高阶函数&lt;/h2&gt;
&lt;p&gt;很高兴 Python 里面提供了部分函数式语言的特性, 我在这个小脚本里用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map&lt;/span&gt;&lt;/code&gt;用得很爽.
sync.py 这个脚本是一个带参数运行的小工具, 需要输出 help 信息, 本来我是这样写的:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sync -- a simple script used to sync profile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python sync.py [operation]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python sync.py [operation] [target]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;有了&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map&lt;/span&gt;&lt;/code&gt;, 可以把所有的 help 信息放在一个 list 里面, 再用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map&lt;/span&gt;&lt;/code&gt;对每个元素应用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;print&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;helpstr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sync -- a simple script used to sync profile&amp;#39;&lt;/span&gt;
          &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python sync.py [operation]&amp;#39;&lt;/span&gt;
          &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python sync.py [operation] [target]&amp;#39;&lt;/span&gt;
          &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;helpstr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注意这里不能直接&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map(print,&lt;/span&gt; &lt;span class="pre"&gt;helpstr)&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map&lt;/span&gt;&lt;/code&gt;返回一个&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;generator&lt;/span&gt;&lt;/code&gt;,
而&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;list()&lt;/span&gt;&lt;/code&gt;接受一个&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;generator&lt;/span&gt;&lt;/code&gt;得到一个列表, 这样&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;print&lt;/span&gt;&lt;/code&gt;才会得以执行.(大概是这样?)&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map&lt;/span&gt;&lt;/code&gt;不仅在这里有用到, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;deploy&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;collect&lt;/span&gt;&lt;/code&gt;是两个相反的操作, 无非是把两个地址交换,
地址被存在一个二元组的列表里, 所以可以用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map&lt;/span&gt;&lt;/code&gt;翻转:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;deploy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;被弃用的元组参数解包&lt;/h2&gt;
&lt;p&gt;本来上面那个翻转元组的 lambda 在 Python 2+ 可以这么写:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;类似模式匹配的写法感觉很不错, 可是不知道为什么在 3.0 中这个语法被移除了.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;部分应用&lt;/h2&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map&lt;/span&gt;&lt;/code&gt;只能对 list 映射只有一个参数的函数, 在 Haskell 中我们可以用部分应用
获得一个只需要一个参数的函数, 在 Python 中似乎不能直接做到, 但我们有折衷的办法:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;g_target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;用一个 lambda 来使得&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;deploy&lt;/span&gt;&lt;/code&gt;对外只有一个参数.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;库&lt;/h2&gt;
&lt;p&gt;Python 库大概是 Python 备受推崇的一个重要原因, 可惜我的脚本只是在做文件复制,
没有用到什么特别的库.&lt;/p&gt;
&lt;p&gt;不过拜 Python 良好的跨平台能力, 我不需要为处理 Windows 和 Linux 下不同的文件操作各写一份代码,
只需要对路径做些处理就行了.&lt;/p&gt;
&lt;p&gt;&lt;a href="#id10"&gt;&lt;span class="problematic" id="id11"&gt;:s:`感觉好像什么都没写啊(摔...`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/first-attempt-of-python.rst&lt;/span&gt;, line 136)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id10"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/first-attempt-of-python.rst&lt;/span&gt;, line 136); &lt;em&gt;&lt;a href="#id11"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/first-attempt-of-python.html" rel="alternate"/>
    <published>2015-06-15T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/install-vim-plugins.html</id>
    <title>Vim 插件折腾记录</title>
    <updated>2015-07-02T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="vim"&gt;

&lt;p&gt;今天考完计组, 有一个空闲的下午, 于是决定来配一配 vim, 装了几个插件, 记录如下:&lt;/p&gt;
&lt;p&gt;首先我把本来 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.vimrc&lt;/span&gt;&lt;/code&gt; 里所有对于 Windows 的特殊配置都删除了, 反正现在也不怎么用 Windows,
同时维护兼容两个平台的配置文件实在是麻烦.&lt;/p&gt;
&lt;div class="section" id="fcitx-vim"&gt;
&lt;h2&gt;fcitx.vim&lt;/h2&gt;
&lt;p&gt;这个是依云写的插件, 用来在普通模式关闭输入法, 插入模式自动恢复上次的输入法状态.
(当然你用的得是 fctix)&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/install-vim-plugins.rst&lt;/span&gt;, line 9); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “fcitx.vim”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;从这里可以下载: &lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=3764"&gt;fcitx.vim&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这个插件的安装很容易, 最简单的方式是直接把 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;so/fctix.vim&lt;/span&gt;&lt;/code&gt;
放到 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.vim/plugin&lt;/span&gt;&lt;/code&gt; 目录下就好, 最好在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.vimrc&lt;/span&gt;&lt;/code&gt; 里加上一句: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;set&lt;/span&gt; &lt;span class="pre"&gt;ttimeoutlen=100&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果想要启用 Python 支持的话, 要加入一个环境变量:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;FCITX_SOCKET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/fcitx-remote.sock
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;不过我试了试发现报错: socket connection error, 就不去用它了.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vundle"&gt;
&lt;h2&gt;Vundle&lt;/h2&gt;
&lt;p&gt;神器, 用来管理插件的插件, 可以从 GitHub, 其他 Git 服务器或者本地的 Git 目录获取并安装插件,
把 &lt;a class="reference external" href="https://github.com/gmarik/Vundle.vim"&gt;gmarik/Vundle.vim&lt;/a&gt; clone 到 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.vim&lt;/span&gt;&lt;/code&gt; 下,
在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.vimrc&lt;/span&gt;&lt;/code&gt; 里添加如下内容:&lt;/p&gt;
&lt;div class="highlight-vim notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;              &lt;span class="c"&gt;&amp;quot; be iMproved, required&lt;/span&gt;
&lt;span class="k"&gt;filetype&lt;/span&gt; off                  &lt;span class="c"&gt;&amp;quot; required&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; set the runtime path to include Vundle and initialize&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;rtp&lt;/span&gt;&lt;span class="p"&gt;+=~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;bundle/Vundle.&lt;span class="k"&gt;vim&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; vundle#begin&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; alternatively, pass a path where Vundle should install plugins&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;call vundle#begin(&amp;#39;~/some/path/here&amp;#39;)&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; let Vundle manage Vundle, required&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;gmarik/Vundle.vim&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; All of your Plugins must be added before the following line&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; vundle#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;            &lt;span class="c"&gt;&amp;quot; required&lt;/span&gt;
&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;    &lt;span class="c"&gt;&amp;quot; required&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; To ignore plugin indent changes, instead use:&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;filetype plugin on&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Brief help&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; :PluginList       - lists configured plugins&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; see :h vundle for more details or wiki for FAQ&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Put your non-Plugin stuff after this line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;然后重启 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:PluginInstall&lt;/span&gt;&lt;/code&gt;, 就安装好了, 如果想要添加新的插件, 在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Plugin&lt;/span&gt; &lt;span class="pre"&gt;'...'&lt;/span&gt;&lt;/code&gt;
那一句之后添加 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Plugin&lt;/span&gt; &lt;span class="pre"&gt;'插件地址'&lt;/span&gt;&lt;/code&gt; 再 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:PluginInstall&lt;/span&gt;&lt;/code&gt; 一下就好了.
对于在 GitHub 上的插件地址, 可以直接写 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;owner/repo-name&lt;/span&gt;&lt;/code&gt; 这样的形式.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="powerline"&gt;
&lt;h2&gt;PowerLine&lt;/h2&gt;
&lt;p&gt;漂亮的状态栏插件&lt;/p&gt;
&lt;p&gt;在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.vimrc&lt;/span&gt;&lt;/code&gt; 相应位置里加一句 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Plugin&lt;/span&gt; &lt;span class="pre"&gt;'Lokaltog/vim-powerline'&lt;/span&gt;&lt;/code&gt;,
再 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:PluginInstall&lt;/span&gt;&lt;/code&gt;, 加上如下配置:&lt;/p&gt;
&lt;div class="highlight-vim notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; powerline&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;    &lt;span class="c"&gt;&amp;quot; 不兼容 vi&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;t_Co&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;256&lt;/span&gt;        &lt;span class="c"&gt;&amp;quot; 终端颜色&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;laststatus&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="c"&gt;&amp;quot; 显示状态栏&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;utf8
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:Powerline_symbols &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;compatible&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 值为&amp;#39;fancy&amp;#39;的话,状态栏会有好看的箭头, 但是要打过补丁的字体, 太麻烦了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="nerdtree"&gt;
&lt;h2&gt;Nerdtree&lt;/h2&gt;
&lt;p&gt;文件浏览插件, 还是用 Vundle 安装.&lt;/p&gt;
&lt;div class="highlight-vim notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; A tree explorer plugin for vim.&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; nerdtree&lt;/span&gt;
map &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :NERDTreeToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="youcompleteme"&gt;
&lt;h2&gt;YouCompleteMe&lt;/h2&gt;
&lt;p&gt;据说是最好的 C/C++ 补全插件? 这个安装略波折.
首先用 Vundle 安装:&lt;/p&gt;
&lt;div class="highlight-vim notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; A code-completion engine for Vim&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;Valloric/YouCompleteMe&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;安装时提示 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;YouCompleteMe&lt;/span&gt; &lt;span class="pre"&gt;unavailable:&lt;/span&gt; &lt;span class="pre"&gt;requires&lt;/span&gt; &lt;span class="pre"&gt;Vim&lt;/span&gt; &lt;span class="pre"&gt;compiled&lt;/span&gt; &lt;span class="pre"&gt;with&lt;/span&gt; &lt;span class="pre"&gt;Python&lt;/span&gt; &lt;span class="pre"&gt;2.x&lt;/span&gt; &lt;span class="pre"&gt;support.&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即我这个版本的 vim 编译时没有 Python 2 的支持, 可以用 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vim&lt;/span&gt; &lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/code&gt; 查看是否开启,
没有开启的话会有 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-python&lt;/span&gt;&lt;/code&gt; 这一项.&lt;/p&gt;
&lt;p&gt;openSUSE 默认源里的 vim 是没有编译入 Python 2 支持的, 所以得手动编译.
(后来知道在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;editor&lt;/span&gt;&lt;/code&gt; 源里有vim)&lt;/p&gt;
&lt;p&gt;首先从 &lt;a class="reference external" href="ftp://ftp.vim.org/pub/vim/unix/vim-7.4.tar.bz2"&gt;vim-7.4.tar.bz2&lt;/a&gt;
下载 vim 7.4 的源码, 解压.&lt;/p&gt;
&lt;p&gt;删除原来的 vim&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ~  zypper rm gvim
$ ~  zypper rm vim
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;先安装各种依赖包:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ~  zypper in python-devel
$ ~  zypper in ruby-devel
$ ~  zypper in lua-devel
$ ~  zypper in ncurses-devel
$ ~  zypper in libx11-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;编译:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ~ ./configure --with-features&lt;span class="o"&gt;=&lt;/span&gt;huge &lt;span class="se"&gt;\&lt;/span&gt;
            --enable-rubyinterp  &lt;span class="se"&gt;\&lt;/span&gt;
            --enable-pythoninterp &lt;span class="se"&gt;\&lt;/span&gt;
            --with-python-config-dir&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib64/python2.7/config &lt;span class="se"&gt;\&lt;/span&gt;
            --enable-perlinterp &lt;span class="se"&gt;\&lt;/span&gt;
            --with-x &lt;span class="se"&gt;\&lt;/span&gt;
            --enable-gui&lt;span class="o"&gt;=&lt;/span&gt;gtk2 &lt;span class="se"&gt;\&lt;/span&gt;
            --enable-cscope &lt;span class="se"&gt;\&lt;/span&gt;
            --enable-luainterp &lt;span class="se"&gt;\&lt;/span&gt;
            --enable-perlinterp &lt;span class="se"&gt;\&lt;/span&gt;
            --enable-multibyte &lt;span class="se"&gt;\&lt;/span&gt;
            --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr &lt;span class="se"&gt;\&lt;/span&gt;
            --enable-fail-if-missing
$ ~ make
$ ~ sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;安装后就可以编译 YCM 了:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ~ zypper in llvm-clang cmake
$ ~ &lt;span class="nb"&gt;cd&lt;/span&gt; .vim/bundle/YouCompleteMe
$ ~ ./install.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;安装完成.&lt;/p&gt;
&lt;p&gt;截图一张:&lt;/p&gt;
&lt;img alt="_images/vim-plugin-screenshot.png" src="_images/vim-plugin-screenshot.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/install-vim-plugins.html" rel="alternate"/>
    <published>2015-07-02T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/configure-of-archlinux.html</id>
    <title>Arch Linux 折腾小记</title>
    <updated>2015-07-20T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="arch-linux"&gt;

&lt;p&gt;这几天一直在折腾 Arch Linux 上的桌面, 弄到今天终于差不多了.
先上张图:&lt;/p&gt;
&lt;img alt="" src="_images/archlinux-screenshot.png" /&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/configure-of-archlinux.rst&lt;/span&gt;, line 19)&lt;/p&gt;
&lt;p&gt;No directive entry for “contents” in module “docutils.parsers.rst.languages.zh_cn”.
Using English fallback for directive “contents”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#arch-linux" id="id12"&gt;Arch Linux 折腾小记&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#xmonad-wm" id="id13"&gt;以 XMonad 为 WM 的桌面&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id14"&gt;无线网络管理&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#im" id="id15"&gt;IM&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#qq" id="id16"&gt;QQ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id7" id="id17"&gt;其他&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#gtk" id="id18"&gt;GTK&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id10" id="id19"&gt;输入法:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id11" id="id20"&gt;配置文件&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="xmonad-wm"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;以 XMonad 为 WM 的桌面&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;没有用 DE, WM 用的是 XMonad.&lt;/p&gt;
&lt;p&gt;关于 XMonad 的默认快捷键, &lt;a class="reference external" href="http://xmonad.org/tour.html"&gt;XMonad Guide Tour&lt;/a&gt;
这篇官方的这篇文档很容易看懂.&lt;/p&gt;
&lt;p&gt;需要安装的包如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;xmonad, xmonad-contrib&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;xmobar&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dmenu&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#id2"&gt;&lt;span class="problematic" id="id3"&gt;:s:`trayer`&lt;/span&gt;&lt;/a&gt; trayer-srg&lt;sup&gt;AUR&lt;/sup&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/configure-of-archlinux.rst&lt;/span&gt;, line 35)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/configure-of-archlinux.rst&lt;/span&gt;, line 35); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/configure-of-archlinux.rst&lt;/span&gt;, line 35)&lt;/p&gt;
&lt;p&gt;No role entry for “sup” in module “docutils.parsers.rst.languages.zh_cn”.
Using English fallback for role “sup”.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;feh&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;scrot&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;compton&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;xmobar, 配置文件在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.xmobarrc&lt;/span&gt;&lt;/code&gt;, 是个基于文字的状态栏, 可以显示从 stdin 接收到的内容,
也可以自己获取系统信息, &lt;a href="#id4"&gt;&lt;span class="problematic" id="id5"&gt;:s:`我这里的中文显示还有问题, 部分中文乱码, 应该是字体的锅.`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/configure-of-archlinux.rst&lt;/span&gt;, line 40)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id4"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/configure-of-archlinux.rst&lt;/span&gt;, line 40); &lt;em&gt;&lt;a href="#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;2015-8-30: 使用 ArchLinux Wiki 中建议的字体, 效果良好.
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;font&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;xft:Bitstream&lt;/span&gt; &lt;span class="pre"&gt;Vera&lt;/span&gt; &lt;span class="pre"&gt;Sans&lt;/span&gt; &lt;span class="pre"&gt;Mono:size=9:bold:antialias=true&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;dmenu 是个启动器, 功能比较简单, 所以不需要什么特殊的配置, 在 XMonad 里按&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mod&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;q&lt;/span&gt;&lt;/code&gt;触发.&lt;/p&gt;
&lt;p&gt;trayer 是个系统托盘, 用来容纳各种图标, 启动选项如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;2015-8-30: trayer 不支持多个屏幕, 建议使用 AUR 里的 trayer-srg&lt;sup&gt;AUR&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trayer --edge top --align right --widthtype percent --width &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
       --SetDockType &lt;span class="nb"&gt;true&lt;/span&gt; --SetPartialStrut &lt;span class="nb"&gt;true&lt;/span&gt; --transparent &lt;span class="nb"&gt;true&lt;/span&gt; --alpha &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
       --tint 0x000000 --expand &lt;span class="nb"&gt;true&lt;/span&gt; --heighttype pixel --height &lt;span class="m"&gt;17&lt;/span&gt; --monitor primary
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;本来已经设置了 xmobar 占据屏幕的 90%, 而 trayer 占 10%,
不过这样仍然会在屏幕上留下间隙, 所以这里设置成占据屏幕的 11%.&lt;/p&gt;
&lt;p&gt;feh 用来设置桌面背景, 设置背景很有必要, 如果不设置的话,
关闭窗口的时候不会有明显的反馈, 浮动窗口也会留下难看的拖影.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;feh --bg-scale /home/la/Pictures/Wallpapers/blog-bg.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;scrot 截图的快捷键在 XMonad 的配置文件&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.xmonad/xmonad.hs&lt;/span&gt;&lt;/code&gt;里面绑定:&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;defaultConfig&lt;/span&gt;
&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;additionalKeys&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controlMask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xK_Print&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spawn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sleep 0.2; scrot -s -e &lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;mv $f ~/Pictures/Screenshots/&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xK_Print&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;spawn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;scrot -e &lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;mv $f ~/Pictures/Screenshots/&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/code&gt;参数可以让你自己选择截图的区域, 不过这个工具竟然没法指定图片的存放位置,
只能在截图后用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;'mv&lt;/span&gt; &lt;span class="pre"&gt;$f&lt;/span&gt; &lt;span class="pre"&gt;~/Pictures/Screenshots'&lt;/span&gt;&lt;/code&gt;把截图放到指定目录.&lt;/p&gt;
&lt;p&gt;上面这些配置大多写在启动脚本&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;startup.sh&lt;/span&gt;&lt;/code&gt;里, 每个命令后边都得加上一个&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;无线网络管理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了更方便地连接无线网络, 安装如下包:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;networkmanager&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;network-manager-applet&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gnome-keyring&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意如果你之前连接无线网络用的是&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;netctl&lt;/span&gt;&lt;/code&gt;的话, 记得把有关的服务给 disable 了,
因为 networkmanager 和他有冲突, 安装完后执行 NetworkManager 启动服务.&lt;/p&gt;
&lt;p&gt;network-manager-applet 是 networkmanager 的前端.&lt;/p&gt;
&lt;p&gt;似乎不安装 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gnome-keyring&lt;/span&gt;&lt;/code&gt;的话就无法连上加密的无线网络.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="im"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;IM&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="qq"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;QQ&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TM2013 可能是运行在 Wine 上表现最好的一个版本了, 我下载了
&lt;a class="reference external" href="http://www.zhihu.com/question/23770274/answer/45703773"&gt;邓攀打包的TM2013&lt;/a&gt;,
似乎没有预期中的 out of box, 字体不行, 密码输入也不行.
不过根据错误提示和 Arch Linux Wiki, 装了几个包就解决问题了.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  pacman -S lib32-ncurses lib32-mpg123
➜  winetrick riched20 ie6 mfc42 cjkfonts wenquanyi
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;其他&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;IRC 客户端用火狐的 ChatZilla&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Telegram 客户端用 Cutegram, 得装 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fcitx-qt5&lt;/span&gt;&lt;/code&gt; 才能正常输入,
另 TG 似乎已经被墙(手机上却仍然可以登录), Cutegram 无法登录, 挂个代理就行.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;qTox 也还凑合, 主要是可以听歌.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gtk"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;GTK&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;默认的 gtk 界面在 XMonad 下相当地丑, 可以安装&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;lxappearance&lt;/span&gt;&lt;/code&gt;来调整 GTK 的主题.&lt;/p&gt;
&lt;p&gt;对于 Qt 程序, dolphin 有很好看的外观, 但是同为 kde-applications 的
konsole 的界面却依然很丑…&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/configure-of-archlinux.rst&lt;/span&gt;, line 141)&lt;/p&gt;
&lt;p&gt;No directive entry for “topic” in module “docutils.parsers.rst.languages.zh_cn”.
Using English fallback for directive “topic”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="topic"&gt;
&lt;p class="topic-title"&gt;Update&lt;/p&gt;
&lt;p&gt;2015-7-24: 经过 IRC 里 &lt;a class="reference internal" href="about/friends.html#friend-farseerfc" title="farseerfc friend"&gt;&lt;code class="xref any any-friend docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;#64;farseerfc&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 前辈和 &lt;a class="reference internal" href="about/friends.html#friend-quininer" title="quininer friend"&gt;&lt;code class="xref any any-friend docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;#64;quininer&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 的 &lt;a href="#id8"&gt;&lt;span class="problematic" id="id9"&gt;:s:`调教`&lt;/span&gt;&lt;/a&gt; ,
发现原来 dolphin 还是 kde4 而 konsole 已经是 kde5 了.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/configure-of-archlinux.rst&lt;/span&gt;, line 143)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id8"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/configure-of-archlinux.rst&lt;/span&gt;, line 143); &lt;em&gt;&lt;a href="#id9"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;2015-8-30: 安装社区源&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gnome-breeze-git&lt;/span&gt;&lt;/code&gt;主题, 以及 plasma5 的&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;breeze&lt;/span&gt;&lt;/code&gt;主题,
可以有比较统一的外表. 设置 Qt5 应用程序的主题可以设置环境变量&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;QT_STYLE_OVERRIDE=breeze&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;输入法:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.xprofile&lt;/span&gt;&lt;/code&gt;中加入:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;fcitx
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;QT_IM_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;fcitx
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;XMODIFIERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@im=fcitx&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;并在启动脚本里启动 fcitx.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;配置文件&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面有提到的全部配置文件参见:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/SilverRainZ/dotfiles"&gt;SilverRainZ/dotfiles - Github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/configure-of-archlinux.html" rel="alternate"/>
    <published>2015-07-20T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/overthewire-bandit.html</id>
    <title>OverTheWire Bandit</title>
    <updated>2015-07-26T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="overthewire-bandit"&gt;

&lt;p&gt;题目地址: &lt;a class="reference external" href="http://overthewire.org/wargames/bandit/"&gt;OverTheWire: Bandit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;考的都是些 Linux 下的基本操作, 虽然说是基本操作, 不过那些命令都没用过,
所以做了这些题依然觉得受益匪浅. 其中还有有几道题很有意思…
&lt;a href="#id2"&gt;&lt;span class="problematic" id="id3"&gt;:s:`有意思的意思是我不会做`&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/overthewire-bandit.rst&lt;/span&gt;, line 14)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/overthewire-bandit.rst&lt;/span&gt;, line 14); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wechall"&gt;
&lt;h2&gt;WeChall 计分板&lt;/h2&gt;
&lt;p&gt;OverTheWire 使用 Wechall 的计分板来计分,
具体参见 &lt;a class="reference external" href="http://overthewire.org/about/wechall.html"&gt;WeChall Scoreborad&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为题目都在远程的 ssh 主机上, 所以你需要让远程主机知道你是谁.
在你的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.bashrc&lt;/span&gt;&lt;/code&gt; 里加上两个环境变量:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WECHALLUSER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你在 WeChall 的用户名&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WECHALLTOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;你在 WeChall 的 WarToken&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;WarToken 可以在 WeChall 网站的
&lt;a class="reference external" href="http://www.wechall.net/warboxes"&gt;Account -&amp;gt; WarBoxes -&amp;gt; Your current WarToken&lt;/a&gt;
获得.&lt;/p&gt;
&lt;p&gt;在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/.ssh/config&lt;/span&gt;&lt;/code&gt; 中添加:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt; &lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;labs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;overthewire&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;
&lt;span class="n"&gt;SendEnv&lt;/span&gt; &lt;span class="n"&gt;WECHALLTOKEN&lt;/span&gt;
&lt;span class="n"&gt;SendEnv&lt;/span&gt; &lt;span class="n"&gt;WECHALLUSER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在 ssh 连接的时候就会把你的帐号信息发送给远程主机.&lt;/p&gt;
&lt;p&gt;在登入一个新的关卡后, 执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wechall&lt;/span&gt;&lt;/code&gt; 便可获得该关卡的分数.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;题目&lt;/h2&gt;
&lt;div class="section" id="bandit17"&gt;
&lt;h3&gt;bandit17&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The password for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;要从 31000-32000 之间的端口中找出有开放的并且只是 SSL 连接的端口,
往该端口发送上一关的密码就会返回下一关的密码.&lt;/p&gt;
&lt;p&gt;找出所有有应答的端口:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nc -v -w &lt;span class="m"&gt;2&lt;/span&gt; localhost &lt;span class="m"&gt;31000&lt;/span&gt;-32000 &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/tmp.tmpxxx/log
cat /tmp.tmpxxx/log &lt;span class="p"&gt;|&lt;/span&gt; grep Succ
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/code&gt; 用来给出连接的详细信息, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-w&lt;/span&gt; &lt;span class="pre"&gt;2&lt;/span&gt;&lt;/code&gt; 指定 timeout,
不知道为什么 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/code&gt; 的信息是直接输出到 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;stderr&lt;/span&gt;&lt;/code&gt; 的.
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tmp/tmp.xxx&lt;/span&gt;&lt;/code&gt; 使用 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mktemp&lt;/span&gt; &lt;span class="pre"&gt;-d&lt;/span&gt;&lt;/code&gt; 产生的临时目录.&lt;/p&gt;
&lt;p&gt;最后有应答的只有五个端口, 挨个挨个试.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl s_client -connect localhost:31xxx -ssl3 -quiet
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;发现是 31790 端口, 返回一个 RSA 私钥, 所以:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl s_client -connect localhost:31790 -ssl3 -quiet &amp;gt; bandit17.private
chmod &lt;span class="m"&gt;0600&lt;/span&gt; bandit17.private
ssh -i bandit17.key bandit17@bandit.labs.overthewire.org
cat /etc/bandit_pass/bandit17
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bandit21"&gt;
&lt;h3&gt;bandit21&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct, it will transmit the password for the next level (bandit21).&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/overthewire-bandit.rst&lt;/span&gt;, line 97)&lt;/p&gt;
&lt;p&gt;No directive entry for “note” in module “docutils.parsers.rst.languages.zh_cn”.
Using English fallback for directive “note”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;注解&lt;/p&gt;
&lt;p&gt;To beat this level, you need to login twice: once to run the setuid command, and once to start a network daemon to which the setuid will connect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;注解&lt;/p&gt;
&lt;p&gt;Try connecting to your own network daemon to see if it works as you think&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bandit20&lt;/span&gt;&lt;/code&gt; 的家目录下提供了一个程序 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;suconnect&lt;/span&gt;&lt;/code&gt;, 会从你指定的端口读取 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bandit20&lt;/span&gt;&lt;/code&gt; 的密码,
如果正确的话返回本关卡的密码.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; GbKksEFF4yrVs6il55v6gwY5aVje5f0j &lt;span class="p"&gt;|&lt;/span&gt; nc -l -p &lt;span class="m"&gt;1234&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; ./suconnect &lt;span class="m"&gt;1234&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这里主要是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt; 的用法, 使两个命令同时执行:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bandit24"&gt;
&lt;h3&gt;bandit24&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what command is being executed.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;注解&lt;/p&gt;
&lt;p&gt;This level requires you to create your own first shell-script. This is a very big step and you should be proud of yourself when you beat this level!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;注解&lt;/p&gt;
&lt;p&gt;Keep in mind that your shell script is removed once executed, so you may want to keep a copy around…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;这题我觉得有点意思.&lt;/p&gt;
&lt;p&gt;cron 是一个定时执行工具, 任务可以通过命令 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;crontab&lt;/span&gt;&lt;/code&gt; 设定,
配置储存在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/cron.d&lt;/span&gt;&lt;/code&gt; 中, 每分钟 cron 会被触发一次,
到该目录检测是否有任务要执行: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cat&lt;/span&gt; &lt;span class="pre"&gt;/etc/cron.d/cronjob_bandit24&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;所以说 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/bin/cronjob_bandit24.sh&lt;/span&gt;&lt;/code&gt; 会每分钟执行一次, 看看这个脚本的内容是什么:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;myname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;whoami&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; /var/spool/&lt;span class="nv"&gt;$myname&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Executing and deleting all scripts in /var/spool/&lt;/span&gt;&lt;span class="nv"&gt;$myname&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; i in * .*&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; -a &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Handling &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        timeout -s &lt;span class="m"&gt;9&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        rm -f &lt;span class="s2"&gt;&amp;quot;./&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;每次都执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/spool/bandit24&lt;/span&gt;&lt;/code&gt; 下的所有可执行文件, 之后删除.
当然是以 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bandit24&lt;/span&gt;&lt;/code&gt; 的身份执行这些操作.&lt;/p&gt;
&lt;p&gt;所以我们可以构造一个脚本让他执行.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
cp /etc/bandit_pass/bandit24 /tmp/tmp.xxx/psw
chmod &lt;span class="m"&gt;666&lt;/span&gt; /tmp/tmp.xxx/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这个脚本把密码文件复制到临时目录并且更改他的权限(至少让所有人可读).&lt;/p&gt;
&lt;p&gt;中间出了很多愚蠢的错误, 比如写错目录,搞错 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sh&lt;/span&gt;&lt;/code&gt; 的路径什么的,
另外, 不能用重定向导出 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bandit24&lt;/span&gt;&lt;/code&gt; 的密码, 因为没有权限(为什么没有权限我就不清楚了).&lt;/p&gt;
&lt;p&gt;脚本写完后, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;chmod&lt;/span&gt; &lt;span class="pre"&gt;+x&lt;/span&gt;&lt;/code&gt;, 再把它复制到 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/var/spool/bandit24&lt;/span&gt;&lt;/code&gt; 目录下, 记得备份,
每隔一分钟该目录就会被清空.&lt;/p&gt;
&lt;p&gt;脚本执行后, 到 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/tmp/tmp.xxx&lt;/span&gt;&lt;/code&gt; 里就可以看到存有 key 的文件了:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bandit25"&gt;
&lt;h4&gt;bandit25&lt;/h4&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;A daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. There is no way to retrieve the pincode except by going through all of the 10000 combinaties, called brute-forcing.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;有一个守护进程在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;30002&lt;/span&gt;&lt;/code&gt; 端口监听, 把 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bandit24&lt;/span&gt;&lt;/code&gt; 的密码和一个四位数字组成的 pincode 传给它,
如果密码和 pincode 都正确的话会返回 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bandit25&lt;/span&gt;&lt;/code&gt; 的密码.&lt;/p&gt;
&lt;p&gt;所以自然是爆破了, 直接用 nc 链接该端口会提示:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;pincode&lt;/span&gt; &lt;span class="n"&gt;checker&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;bandit25&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;enter&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;bandit24&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="n"&gt;pincode&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;single&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;separated&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;所以按照格式来, 生成 10000 个 密码 + pincode 的序列传给该端口.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;..9999&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tmp/pin&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
cat /tmp/pin &lt;span class="p"&gt;|&lt;/span&gt; nc localhost &lt;span class="m"&gt;30002&lt;/span&gt; &amp;gt; /tmp/log
cat /tmp/log &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;Corr&amp;quot;&lt;/span&gt; -n1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;其实答案就是最后一个端口:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;5670-Wrong! Please enter the correct pincode. Try again.
5671:Correct!
5672-The password of user bandit25 is uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;所以:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bandit26"&gt;
&lt;h4&gt;bandit26&lt;/h4&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Logging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not /bin/bash, but something else. Find out what it is, how it works and how to break out of it.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;这是 26 个 level 里面最有意思的一道题的, 可惜我没能做出来…
参考的答案是这个:
&lt;a class="reference external" href="http://codebluedev.blogspot.com/2015/07/overthewire-bandit-level-26.html"&gt;overthewire-bandit-level-26&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题干里说 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bandit26&lt;/span&gt;&lt;/code&gt; 的 shell 并不是普通的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/bin/bash&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bandit25&lt;/span&gt;&lt;/code&gt; 的家目录下给出了 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bandit26&lt;/span&gt;&lt;/code&gt; 的私钥,
登录上去只是打印出了 bandit26 的 ASCII Art 就退出了.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; _                     _ _ _   ___   __
| |                   | (_) | |__ / /
| |__   __ _ _ __   __| |_| |_   ) / /_
| &amp;#39;_ / _` | &amp;#39;_ / _` | | __| / / &amp;#39;_
| |_) | (_| | | | | (_| | | |_ / /| (_) |
|_.__/ \__,_|_| |_|\__,_|_|\__|____\___/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cat&lt;/span&gt; &lt;span class="pre"&gt;/etc/passwd&lt;/span&gt; &lt;span class="pre"&gt;|&lt;/span&gt; &lt;span class="pre"&gt;grep&lt;/span&gt; &lt;span class="pre"&gt;bandit26&lt;/span&gt;&lt;/code&gt; 得到:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;bandit26&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;\ &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11026&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11026&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bandit&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;\ &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;bandit26&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;\ &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;showtext&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(我到这里就卡住了)&lt;/p&gt;
&lt;p&gt;发现 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;showtext&lt;/span&gt;&lt;/code&gt; 是一个 shell 脚本, 内容如下&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

more ~/text.txt
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;即 ssh 连上去后执行默认 shell, 用 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;more&lt;/span&gt;&lt;/code&gt; 打印出了 ~/text.txt 之后就退出了, 如图:&lt;/p&gt;
&lt;img alt="_images/overthewire-bandit26-1.png" src="_images/overthewire-bandit26-1.png" /&gt;
&lt;p&gt;一连上就退出, 那我们怎么让它执行我们想要的命令呢? 直接用 ssh 的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-t&lt;/span&gt;&lt;/code&gt; + 命令 是不行的,
这个命令不会被解释, 因为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bash&lt;/span&gt;&lt;/code&gt; 没有执行.&lt;/p&gt;
&lt;p&gt;正确答案是通过 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;more&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;more&lt;/span&gt;&lt;/code&gt; 在要输出的内容行数多于终端行数的时候会停下来, 等待你翻页,
所以我们把当前的终端调小, 差不多四行, 再次 shh 上去, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;more&lt;/span&gt;&lt;/code&gt; 就停下来了. (好脑洞)&lt;/p&gt;
&lt;img alt="_images/overthewire-bandit26-2.png" src="_images/overthewire-bandit26-2.png" /&gt;
&lt;p&gt;在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;more&lt;/span&gt;&lt;/code&gt; 里面按 v, 系统会调用默认的编辑器来编辑这个文件, 默认是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vi&lt;/span&gt;&lt;/code&gt;,
有了 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;vi&lt;/span&gt;&lt;/code&gt;, 就相当于有了一个终端.&lt;/p&gt;
&lt;p&gt;在命令模式执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:r&lt;/span&gt; &lt;span class="pre"&gt;/etc/bandit_pass/bandit26&lt;/span&gt;&lt;/code&gt;, 密码的内容就会被读入.&lt;/p&gt;
&lt;img alt="_images/overthewire-bandit26-3.png" src="_images/overthewire-bandit26-3.png" /&gt;
&lt;p&gt;要打开 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sh&lt;/span&gt;&lt;/code&gt; 的话, 可以:&lt;/p&gt;
&lt;div class="highlight-vim notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;shell&lt;/span&gt; &lt;span class="k"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/bin/&lt;/span&gt;&lt;span class="k"&gt;sh&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这样就可以执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wechall&lt;/span&gt;&lt;/code&gt; 拿分了:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/overthewire-bandit.html" rel="alternate"/>
    <published>2015-07-26T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/minix-v1-file-system.html</id>
    <title>Minix v1 文件系统的实现</title>
    <updated>2015-08-07T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="minix-v1"&gt;

&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Index&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/minix-v1-file-system.rst&lt;/span&gt;, line 15)&lt;/p&gt;
&lt;p&gt;Bullet list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#minix-v1" id="id10"&gt;Minix v1 文件系统的实现&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#minix-fs" id="id11"&gt;Minix FS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#xv-6" id="id12"&gt;xv 6&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id13"&gt;建立磁盘&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#minix" id="id14"&gt;Minix 文件系统结构&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#i" id="id15"&gt;i 节点&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#boot-secotr" id="id16"&gt;引导扇区(boot secotr):&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#super-block" id="id17"&gt;超级块(super block)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#inode-zone-bitmap" id="id18"&gt;位图(inode &amp;amp; zone bitmap)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#i-inode" id="id19"&gt;i 节点块(inode)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#data" id="id20"&gt;数据块(data)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id21"&gt;系统层次&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#os67-fs-ide-c" id="id22"&gt;磁盘驱动层 OS67/fs/ide.c&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#os67-fs-bcache-c" id="id23"&gt;块缓冲层 OS67/fs/bcache.c&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#braed" id="id24"&gt;braed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#bget" id="id25"&gt;bget&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#i-os67-fs-inode-c-os67-fs-bitmap-c" id="id26"&gt;i 节点层 OS67/fs/inode.c OS67/fs/bitmap.c&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id27"&gt;申请和分配:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id28"&gt;i 节点操作:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#os67-fs-dir-c-os-fs-p2i-c" id="id29"&gt;目录层 OS67/fs/dir.c OS/fs/p2i.c&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id30"&gt;文件和系统调用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id9" id="id31"&gt;参考&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="minix-fs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Minix FS&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Minix file system 是 Andrew S. Tanenbaum 在 198x 年发明的文件系统,
并随着 Minix 1.0 版一起于 1987 年释出, Linus 编写 Linux 0.11时,
使用的也是 Minix FS, Linux 至今依然提供了对 Minix FS 的支持.
Minix FS 结构简单, 易于理解, 并且资料相当丰富.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="xv-6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;xv 6&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;其实最开始并没有用 Minix FS 的想法, 在实现 Minix FS 之前,
我先看了 xv6 中的文件系统部分, 在抄了一遍它的代码之后,
才发现原来 xv6 实现的不是现有的任何一个文件系统, 虽然在原理上和 Minix 没有太大差别
(甚至某些方面比 Minix 更好, 比如 xv6 的 FS 有日志),
但是因为这不是一个被广泛使用的文件系统, 使得你在构建一个磁盘的时候得自己写代码…
(xv6/mkfs.c), 而且你没法很方便地验证你代码的正确性, 太麻烦, 弃之.&lt;/p&gt;
&lt;p&gt;Minix 则不同了, 作为曾经流行过的文件系统, 在 Linux 上至今都有方便的 mkfs.minix
和 fsck.minix 工具, 前者可以建立一个 Minix 文件系统, 后者检查该文件系统的正确性.
正因如此, 我在 xv6 的代码的基础上修改了代码, 在
&lt;a class="reference external" href="https://github.com/SilverRainZ/OS67"&gt;OS67&lt;/a&gt; 上实现了一个精简版的 Minix FS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;建立磁盘&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bximage&lt;/span&gt;&lt;/code&gt;建立一个硬盘镜像文件, 再用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mkfs.minix&lt;/span&gt;&lt;/code&gt;建立文件系统,
如果需要复制文件进去的话, 用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mount&lt;/span&gt;&lt;/code&gt;挂载.&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bximage bin/rootfs.img -hd&lt;span class="o"&gt;=&lt;/span&gt;10M -imgmode&lt;span class="o"&gt;=&lt;/span&gt;flat -mode&lt;span class="o"&gt;=&lt;/span&gt;create -q
mkfs.minix bin/rootfs.img -1 -n14
sudo mount -o loop -t minix bin/rootfs.img /mnt/fs
sudo cp -r usr/* /mnt/fs/
sleep &lt;span class="m"&gt;1&lt;/span&gt;
sudo umount /mnt/fs
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这段脚本建立了一个大小为 10 M 的 Minix 文件系统镜像, 并且将 usr 目录下的文件复制进去.
当你需要检查文件系统的正确性, 执行&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fsck.minix&lt;/span&gt; &lt;span class="pre"&gt;-fsl&lt;/span&gt; &lt;span class="pre"&gt;./bin/rootfs.img&lt;/span&gt;&lt;/code&gt;,
检查无误的话, fsck 会输出该磁盘的超级块信息及里面包含的所有文件.
若出错, fsck 会给出详尽的错误信息, 比如下面这段:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  OS67 git:&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; ✗  fsck.minix -fsl ./bin/rootfs.img
Forcing filesystem check on ./bin/rootfs.img.
&lt;span class="m"&gt;3360&lt;/span&gt; inodes
&lt;span class="m"&gt;10080&lt;/span&gt; blocks
&lt;span class="nv"&gt;Firstdatazone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;110&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;110&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;Zonesize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt;
&lt;span class="nv"&gt;Maxsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;268966912&lt;/span&gt;
Filesystem &lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;namelen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;

/bin:
/bin/README
/README
Inode &lt;span class="m"&gt;6&lt;/span&gt; marked unused, but used &lt;span class="k"&gt;for&lt;/span&gt; file &lt;span class="s1"&gt;&amp;#39;/TESTME&amp;#39;&lt;/span&gt;
/TESTME
Block &lt;span class="m"&gt;115&lt;/span&gt; in file &lt;span class="s1"&gt;&amp;#39;/TESTME&amp;#39;&lt;/span&gt; is marked not in use.
Inode &lt;span class="m"&gt;5&lt;/span&gt; not used, marked used in the bitmap.
Inode &lt;span class="m"&gt;6&lt;/span&gt; used, marked unused in the bitmap.
Zone &lt;span class="m"&gt;114&lt;/span&gt;: marked in use, no file uses it.
Zone &lt;span class="m"&gt;115&lt;/span&gt;: not in use, &lt;span class="nv"&gt;counted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="minix"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Minix 文件系统结构&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Minix 文件系统的结构如下:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Minix&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="n"&gt;structure&lt;/span&gt;
&lt;span class="n"&gt;zone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;           &lt;span class="mi"&gt;1&lt;/span&gt;              &lt;span class="mi"&gt;2&lt;/span&gt;             &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imap_blk&lt;/span&gt;        &lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;+----------------------------------------------------------------------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;bootsector&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;superblock&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;inode&lt;/span&gt; &lt;span class="n"&gt;bitmap&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;zone&lt;/span&gt; &lt;span class="n"&gt;bitmap&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;inodes&lt;/span&gt; &lt;span class="n"&gt;zone&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;zone&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+----------------------------------------------------------------------------------------+&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;zone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;注意: Minix 文件系统的最小分配单位是 zone, 可以把它叫做虚拟块,
一个虚拟块的大小是 1024 byte, 而磁盘的物理扇区大小常常是 512 byte.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="section" id="i"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;i 节点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;i 节点是 Minix FS 中最重要的结构体, 其定义如下:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// OS67/inc/minix.h&lt;/span&gt;
&lt;span class="cm"&gt;/* in-disk minix inode */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;d_inode&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 文件类型和 RWX 访问控制位&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 文件属主的用户 ID            (unused)&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 文件大小, 以 byte 计数&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;mtime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 自从 1970.1.1 以来的秒数     (unused)&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 文件属主 所属的组            (unused)&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;nlinks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 该节点被多少个目录所链接&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * zone[0] - zone[6] 分别指向 7 个直接块&lt;/span&gt;
&lt;span class="cm"&gt;     * zone[7] 指向间接块&lt;/span&gt;
&lt;span class="cm"&gt;     * zone[8] 指向双重间接块                       (unused)&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;zone&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// (标记有 unused 是 OS67 没有用到的元素)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;i 节点被储存在磁盘的 i 节点块(inodes zone)中, 并按排列顺序被编号,
其使用状况存储在磁盘的 i 节点位图块(inodes bitmap)中.&lt;/p&gt;
&lt;p&gt;一个 i 节点对应磁盘里的一个文件, 储存着文件的元信息.
值得注意的是 i 节点并未储存该文件的文件名.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zone&lt;/span&gt;&lt;/code&gt;中储存了虚拟块的号码, 这些号码指向磁盘的数据块(data zone),
这些块中直接或间接储存了文件的数据.&lt;/p&gt;
&lt;p&gt;目录被实现为一种特殊的文件, 目录的数据由一个或多个&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dir_entry&lt;/span&gt;&lt;/code&gt;结构组成.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// OS67/inc/minix.h&lt;/span&gt;
&lt;span class="cm"&gt;/* minix directroy entry */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;dir_entry&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;ino&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NAME_LEN&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;第一个元素代表该目录下的文件的 i 节点号, 第二个元素则是文件名.
文件的文件名储存在引用它的目录文件中, 这使得一个文件可以有多个名字.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;在 Linux 下创建某个文件的硬连接, 其实就是为目标目录增加对指定文件对应的 i 节点的引用,
注意 i 节点号只在一个磁盘中唯一, 所以硬链接无法跨磁盘.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nlinks&lt;/span&gt;&lt;/code&gt;元素指示了有多少个目录引用了这个文件, 当删除一个文件时,
对应的 i 节点的引用数就会减一, 当引用数为 0 时, 该节点就可以从磁盘上被释放了.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zone[0]&lt;/span&gt; &lt;span class="pre"&gt;-&lt;/span&gt; &lt;span class="pre"&gt;zone[6]&lt;/span&gt;&lt;/code&gt;指向的虚拟块直接储存了文件的数据.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zone[7]&lt;/span&gt;&lt;/code&gt;指向的虚拟块储存的是更多的虚拟块号码, 就是一个二级表.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;zone[8]&lt;/span&gt;&lt;/code&gt; 指向一个双重间接块.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用图说话比较清晰:&lt;/p&gt;
&lt;img alt="Inode structure" src="_images/inode-struct.gif" /&gt;
&lt;p&gt;ref: &lt;a class="reference external" href="http://jan.newmarch.name/OS/l6_1.html"&gt;http://jan.newmarch.name/OS/l6_1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因此, Minix FS 支持的最大文件大小为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(7&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;1024/2&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;1024/2*1024/2)&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;1024&lt;/span&gt; &lt;span class="pre"&gt;byte&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;256&lt;/span&gt; &lt;span class="pre"&gt;MB&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;OS67 并没有使用双重间接块, 因此支持的最大文件大小仅为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(7&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;1024/2)&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;1024&lt;/span&gt; &lt;span class="pre"&gt;byte&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;519&lt;/span&gt; &lt;span class="pre"&gt;KB&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="boot-secotr"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;引导扇区(boot secotr):&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;磁盘的第一个虚拟块作是引导扇区, 这个通常和文件系统没有关系.&lt;/p&gt;
&lt;p&gt;OS67 的 bootsector 实现在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OS67/boot/bootsect.asm&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="super-block"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;超级块(super block)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;超级块(superblock), 用来存放整个文件系统的元信息, 比如磁盘大小, i节点数目,
虚拟块数目, Magic nubmer 等.  Minix FS 的超级块结构如下:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// OS67/inc/minix.h&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;super_block&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;ninodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// number of inodes&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;nzones&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// number of zones&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;imap_blk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// i 节点位图 占用块的数目&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;zmap_blk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// 数据块位图 占用的块的数目&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;fst_data_zone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 第一个 数据块 的块号&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;log_zone_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 一个虚拟块的大小 = 1024 &amp;lt;&amp;lt; log_zone_size&lt;/span&gt;

    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;max_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// 能存放的最大文件大小(以 byte 计数)&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="c1"&gt;// magic number&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="inode-zone-bitmap"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;位图(inode &amp;amp; zone bitmap)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有关位图的实现在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OS67/fs/bitmap.c&lt;/span&gt;&lt;/code&gt;中.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OS67/inc/minix.h&lt;/span&gt;&lt;/code&gt;实现了两个宏来定位这些位图块.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* bit per block */&lt;/span&gt;
&lt;span class="cp"&gt;#define BPB (BSIZE*8)&lt;/span&gt;
&lt;span class="cm"&gt;/* bitmap contain inode i*/&lt;/span&gt;
&lt;span class="cp"&gt;#define IMAP_BLK(sb, i) (2 + (i - 1)/BPB)&lt;/span&gt;
&lt;span class="cm"&gt;/* bitmap contain block z */&lt;/span&gt;
&lt;span class="cp"&gt;#define ZMAP_BLK(sb, b) (2 + sb.imap_blk + (b)/BPB)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;inode bitmap: i 节点位图, 这些块每个位都对应一个 i 节点,
i 节点位图占据 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;superblock.imap_blk&lt;/span&gt;&lt;/code&gt;个块.
(注意 i 节点从 1 开始计数), 宏&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;IMP_BLK&lt;/span&gt;&lt;/code&gt;用来根据 i 节点号定位到对应的 bit 所在的块;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;zone bitmap: 数据块位图, 从编号为&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;superblock.fst_data_zone&lt;/span&gt;&lt;/code&gt;开始的块的使用情况
和这个位图上的位一一对应.
(块号依然从 0 开始计数)宏&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ZMAP_BLOCK&lt;/span&gt;&lt;/code&gt;根据块号 定位到对应的 bit 所在的块;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;虽然现在 bitmap.c 的代码工作正常, 不过我对他们的对应关系还是存有疑问…
暂时懒得去想了, 此处存疑. // TODO&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="i-inode"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;i 节点块(inode)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这些块用来储存 i 节点, 用宏&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;IBLK&lt;/span&gt;&lt;/code&gt;根据 i 节点号, 定位到块号, 同样注意 i 节点从 1 开始计数.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define IBLK(sb, i) (2 + ((sb).imap_blk) + ((sb).zmap_blk) + ((i) - 1)/IPB)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="data"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;数据块(data)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这些块被用来储存数据, 从&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;superblock.fst_data_zone&lt;/span&gt;&lt;/code&gt;开始.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;系统层次&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;整个文件系统的实现被分为五个层次, 代码基本上继承自 xv6, 在摸清楚代码的意思之后,
把 xv6 文件系统代码改成 Minix FS 是很简单的事情, 甚至有些文件不需要改动…&lt;/p&gt;
&lt;div class="section" id="os67-fs-ide-c"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;磁盘驱动层 OS67/fs/ide.c&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这一层通过 ins outs 指令, 负责从磁盘读取扇区到高速缓冲区 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;buf&lt;/span&gt;&lt;/code&gt;,
并且限制在一个块只能被一个进程访问(通过 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;B_BUSY&lt;/span&gt;&lt;/code&gt; 锁住).&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;这里的 高速缓冲/块缓冲 只是把磁盘的数据读取到内存中暂存, 并且避免无意义的读取.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;注意: 这里一次读取的是一个虚拟块(1024 byte), 而不是一个物理意义上的扇区(常见大小是 512 byee),
因此得把上层传来的虚拟块号, 转化为物理扇区号, 并且一次读取两个扇区.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;phy_blkn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;blkno&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BSIZE&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;PHY_BSIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="cm"&gt;/* number of sectors, read 2 sector for once  */&lt;/span&gt;
&lt;span class="n"&gt;outb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDE_PORT_SECT_COUNT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BSIZE&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;PHY_BSIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="os67-fs-bcache-c"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;块缓冲层 OS67/fs/bcache.c&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;维护了一个高速缓冲的链表(数组),  为上层提供了&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bread&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bwrite&lt;/span&gt;&lt;/code&gt;函数,
而&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bget&lt;/span&gt;&lt;/code&gt;则用来分配缓冲区.&lt;/p&gt;
&lt;div class="section" id="braed"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id24"&gt;braed&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;当请求一个块的数据的时候(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bread&lt;/span&gt;&lt;/code&gt;), 如果一个块已经被缓存, 并且这个块的内容是有效的(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;B_VAILD&lt;/span&gt;&lt;/code&gt;),
块缓存层可以直接返回当前缓冲区的内容, 而不用重新读取扇区.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;bread bwrite 封装了磁盘读写的操作,
你不会知道你这次读取的内容是从磁盘中读取的还是从块缓冲直接取出的,
但是数据一定是正确的.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="bget"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id25"&gt;bget&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;当根据虚拟块的块号(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;buf-&amp;gt;blkno&lt;/span&gt;&lt;/code&gt;)请求一个缓冲区的时候(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bget&lt;/span&gt;&lt;/code&gt;),
程序会沿着链表从头到尾寻找这个缓冲区是否被缓存,是的话直接返回, 如果没有被缓存,
会从链表从尾到头搜索第一个可用的空缓冲区, 每次释放缓冲区的时候(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;brelse&lt;/span&gt;&lt;/code&gt;),
都会把该缓冲区放在链表头, 保证每次从头查找到的是使用时间离现在最近的缓冲区,
而被分配的空缓冲是最久没使用的.&lt;/p&gt;
&lt;p&gt;以上的两个层次都和叫做块缓冲区的结构: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;buf&lt;/span&gt;&lt;/code&gt;密切相关, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;buf&lt;/span&gt;&lt;/code&gt;的结构如下:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// OS67/inc/buf.h&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="c1"&gt;// B_BUSY B_VALID B_DIRTY&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c1"&gt;// only one disk, dev = 0&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;blkno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// zone number&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// LRU Cache List 双向&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;qnext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 磁盘操作请求队列, 单向&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BSIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="i-os67-fs-inode-c-os67-fs-bitmap-c"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;i 节点层 OS67/fs/inode.c OS67/fs/bitmap.c&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这一层开始和文件系统密切相关, i 节点层为使用中的磁盘中的 i 节点(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;d_inode&lt;/span&gt;&lt;/code&gt;)
提供了内存中的拷贝(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;inode&lt;/span&gt;&lt;/code&gt;), 可以类比块缓冲和虚拟块的关系.&lt;/p&gt;
&lt;p&gt;磁盘中的 i 节点结构上面已经讲过了, 内存中的 i 节点&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;inode&lt;/span&gt;&lt;/code&gt;结构如下:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// OS67/inc/minix.h&lt;/span&gt;
&lt;span class="cm"&gt;/* in-memorty inode */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;inode&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// i 节点所在的磁盘, OS67 只支持单个磁盘, 所以始终为 0&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;ino&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// i 节点号码&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 内存引用计数&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// flag 就是 flag&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;atime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (unused)&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (unused)&lt;/span&gt;

&lt;span class="c1"&gt;// struct d_inode {&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// (unused)&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;mtime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (unused)&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// (unused)&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;nlinks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;zone&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;//}&lt;/span&gt;
&lt;span class="c1"&gt;// 可以看到后面部分其实是完整的一个`d_inode`.&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这一层提供了对 inode 的各种操作&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id27"&gt;申请和分配:&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_ialloc&lt;/span&gt;&lt;/code&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_ifree&lt;/span&gt;&lt;/code&gt; 在磁盘上分配和释放新的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;d_inode&lt;/span&gt;&lt;/code&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;balloc&lt;/span&gt;&lt;/code&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bfree&lt;/span&gt;&lt;/code&gt; 在磁盘上分配和释放新的数据块, 供 i 节点使用.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的函数均在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OS67/fs/bitmap.c&lt;/span&gt;&lt;/code&gt;中实现.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ialloc&lt;/span&gt;&lt;/code&gt;则是对&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_ialloc&lt;/span&gt;&lt;/code&gt;的封装, 分配一个新的&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;d_inode&lt;/span&gt;&lt;/code&gt;后,
把它和内存中的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;inode&lt;/span&gt;&lt;/code&gt;联系起来.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id28"&gt;i 节点操作:&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;iget&lt;/span&gt;&lt;/code&gt; 从 i 节点缓冲中获得指定 i 节点号码的缓冲区, 类似&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bget&lt;/span&gt;&lt;/code&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ilock&lt;/span&gt;&lt;/code&gt; 将 i 节点锁住(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;I_BUSY&lt;/span&gt;&lt;/code&gt;), 并从磁盘中将 i 节点内容读出,
而&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;iunlock&lt;/span&gt;&lt;/code&gt;解锁 i 节点;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;idup&lt;/span&gt;&lt;/code&gt;增加该 i 节点的引用计数(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ip-&amp;gt;ref&lt;/span&gt;&lt;/code&gt;), &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;iput&lt;/span&gt;&lt;/code&gt;则将引用计数减 1,
当引用计数为 0 时, 该缓冲区被释放;
如果该节点在磁盘上的引用(&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ip-&amp;gt;nlinks&lt;/span&gt;&lt;/code&gt;)也为 0,
调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;itrunc&lt;/span&gt;&lt;/code&gt;将该节点占有的数据块和元信息释放,
再调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_ifree&lt;/span&gt;&lt;/code&gt;清空 inode 位图上的位;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bmap&lt;/span&gt;&lt;/code&gt;读取指定 i 节点的第 n 个块, 间接块和非间接块的区别就由该函数处理;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;iread&lt;/span&gt;&lt;/code&gt; 和 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;iwrite&lt;/span&gt;&lt;/code&gt;则在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bmap&lt;/span&gt;&lt;/code&gt;的基础上实现了对 i 节点的读取和写入.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="os67-fs-dir-c-os-fs-p2i-c"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id29"&gt;目录层 OS67/fs/dir.c OS/fs/p2i.c&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这一层开始有文件名和路径的出现, 为上层提供了一个将路径名转换为 对应 i 节点的函数.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dir_lookup&lt;/span&gt;&lt;/code&gt; 在一个类型为目录的 i 节点中寻找指定名字的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dir_entry&lt;/span&gt;&lt;/code&gt;
(判断 i 节点是否为目录用宏&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;IS_DIR&lt;/span&gt;&lt;/code&gt;);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dir_link&lt;/span&gt;&lt;/code&gt; 为一个目录文件增加一个&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dir_entry&lt;/span&gt;&lt;/code&gt;, 链接到指定的一个 i 节点;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;p2i&lt;/span&gt;&lt;/code&gt; (path to inode) 解析路径名, 返回指定的未上锁的 i 节点.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id30"&gt;文件和系统调用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这一层是最上一层, 文件是对 i 节点的简单封装, 提供了&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fread&lt;/span&gt;&lt;/code&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fwrite&lt;/span&gt;&lt;/code&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fclose&lt;/span&gt;&lt;/code&gt;等函数.
此处涉及到进程的文件表, 因此这一层暂时没有&lt;a href="#id7"&gt;&lt;span class="problematic" id="id8"&gt;:s:`抄`&lt;/span&gt;&lt;/a&gt;写.&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/minix-v1-file-system.rst&lt;/span&gt;, line 400)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id7"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/minix-v1-file-system.rst&lt;/span&gt;, line 400); &lt;em&gt;&lt;a href="#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;不过在前面几层的基础上, 实现这一层应该没什么问题.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id31"&gt;参考&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://book.douban.com/subject/1231236/"&gt;《Linux 内核完全注释》&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/Fleurer/fleurix"&gt;fleurix&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://koala.cs.pub.ro/redmine/attachments/download/105/minix.pdf"&gt;Minix File System - Dr.John C.S.Lui&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://pdos.csail.mit.edu/6.828/2011/xv6.html"&gt;MIT 6.828 xv6&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/ranxian/xv6-chinese"&gt;xv6 中文文档&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/minix-v1-file-system.html" rel="alternate"/>
    <published>2015-08-07T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/flag.html</id>
    <title>立 Flag</title>
    <updated>2015-09-09T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="flag"&gt;

&lt;p&gt;现在不开始的话, 以后也不会开始了.&lt;/p&gt;
&lt;img alt="http://imglf2.nosdn.127.net/img/bEd0djMvNWs3R0x3OVJSSHNCYnZvczBnVWtBVGdpNTZ3YUpFbnRuWEdCOHd2Y1JObEdiTW5RPT0.jpg" src="http://imglf2.nosdn.127.net/img/bEd0djMvNWs3R0x3OVJSSHNCYnZvczBnVWtBVGdpNTZ3YUpFbnRuWEdCOHd2Y1JObEdiTW5RPT0.jpg" /&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/flag.html" rel="alternate"/>
    <published>2015-09-09T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/process-scheduler-1.html</id>
    <title>用户态进程的简单实现及调度(一)</title>
    <updated>2015-09-14T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="id1"&gt;

&lt;p&gt;update: 在写这篇的时候, 我发觉我很难在这短短一篇博文里把进程的实现将清楚,
并且可能存在一些理解的偏差, 因此本篇仅供参考, 更加准确的表述,
还请参考 &lt;a class="reference external" href="https://th0ar.gitbooks.io/xv6-chinese/content/content/chapter5.html"&gt;第五章 调度 | xv6 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="contents topic" id="id2"&gt;
&lt;p class="topic-title"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id1" id="id16"&gt;用户态进程的简单实现及调度(一)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id17"&gt;特权级转换&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#gdt" id="id18"&gt;GDT&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#idt" id="id19"&gt;IDT&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#tss" id="id20"&gt;TSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id4" id="id21"&gt;两个上下文&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id22"&gt;中断上下文&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id23"&gt;进程上下文&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id7" id="id24"&gt;虚拟内存映射&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id8" id="id25"&gt;第一个进程&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id9" id="id26"&gt;构造&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id12" id="id27"&gt;运行&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id13" id="id28"&gt;调度&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#e-n-d" id="id29"&gt;E.N.D.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;自从上次完成了 &lt;a class="reference internal" href="blog/minix-v1-file-system.html"&gt;&lt;span class="doc"&gt;Minix v1 文件系统的实现&lt;/span&gt;&lt;/a&gt; 之后,
就开始看 xv6 中进程相关的代码, 并把它抄进 OS67 中, 到今天为止, 总算是完成地差不多了.&lt;/p&gt;
&lt;p&gt;进程的实现可能是 xv6 中耦合度最高的一部分, 在完成大部分的代码
(GDT,TSS 的设置, 上下文保存和切换, 虚拟内存映射, 系统调用)之前,
你很难让你的内核跑起来.&lt;/p&gt;
&lt;p&gt;xv6 已经尽量使用容易理解的方式来书写这些代码了, 不过有些地方仍然比较晦涩(对我来说).
希望再这篇文章里能稍微梳理一下.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;注意: OS67 并不打算支持多核 CPU, 这极大地降低了实现进程的难度,
不需要考虑由于多核导致的进程间的竞争和同步, 因此 xv6 中关于锁的代码都可以忽略.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;特权级转换&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;几个关于特权级的概念:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;intel 8086 的特权级分为 0 1 2 3 四级, 这里只使用 0 和 3&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DPL: Descriptor Privilege 描述符特权级, 储存在 GDT 或 IDT 描述符中&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CPL: Current Privilege 当前特权级, 储存在 cs 寄存器的低二位&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RPL: Request Privilege 请求特权级, 请求访问的段的描述符的特权级&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="gdt"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;GDT&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这里使用的用户态的特权级为 3, 因此用户态的程序, 其所在的数据段代码段的 DPL,
段寄存器低 2 位的 RPL 都得是 3, 因此设置的 全局段描述符表(GDT) 如下:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// OS67/kern/gdt.c&lt;/span&gt;
&lt;span class="n"&gt;gdt_install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/* kernel code segment type: code addr: 0 limit: 4G gran: 4KB sz: 32bit */&lt;/span&gt;
&lt;span class="n"&gt;gdt_install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SEL_KCODE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xfffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AC_RW&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;AC_EX&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;AC_DPL_KERN&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;AC_PR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GDT_GR&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;GDT_SZ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/* kernel data segment type: data addr: 0 limit: 4G gran: 4KB sz: bit 32bit */&lt;/span&gt;
&lt;span class="n"&gt;gdt_install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SEL_KDATA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xfffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AC_RW&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;AC_DPL_KERN&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;AC_PR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GDT_GR&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;GDT_SZ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/* user code segment type: code addr: 0 limit: 4G gran: 4KB sz: 32bit */&lt;/span&gt;
&lt;span class="n"&gt;gdt_install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SEL_UCODE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xfffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AC_RW&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;AC_EX&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;AC_DPL_USER&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;AC_PR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GDT_GR&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;GDT_SZ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/* user data segment type: data addr: 0 limit: 4G gran: 4KB sz: 32bit */&lt;/span&gt;
&lt;span class="n"&gt;gdt_install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SEL_UDATA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xfffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AC_RW&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;AC_DPL_USER&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;AC_PR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GDT_GR&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;GDT_SZ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;第一二个描述符定义了内核的代码段和数据段, 第三四个描述符定义了用户的代码段和数据段.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;注意: 代码段必须是非一致性代码段, 因为一致性代码段对特权级的处理方式不同.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;当 GDT 初始化后, 第一二个描述符被使用, 内核跑在特权级为 0 的段上.
那如何让代码从特权级为 0 的段(内核态)转移到特权级为 3 的段(用户态)呢? 用中断.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="idt"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;IDT&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了让用户空间的程序顺利进入内核态, 需要对 中断描述符表(IDT) 做一些设置.&lt;/p&gt;
&lt;p&gt;(以下内容摘自 xv6 中文文档, 有小改动)&lt;/p&gt;
&lt;p&gt;我们假设一个用户态程序执行&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;int&lt;/span&gt; &lt;span class="pre"&gt;n&lt;/span&gt;&lt;/code&gt;指令触发中断, 则 CPU 会取得中断号 n, 进行如下步骤:
(由 PIC 或者异常触发的中断不一定如此)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;从 中断描述符表(IDT) 获得第 n 个描述符&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查描述符的特权级 DPL 是否 &lt;strong&gt;数值上大于等于&lt;/strong&gt; 当前的特权级 CPL
(即当前段的级别至少要高于要执行的中断的特权级), 是则继续,
否则触发一个通用保护中断(General Protection Fault, int 13)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;通过设置 DPL, 可以限制用户态能用 int 指令触发的中断号, 系统调用的实现即是如此&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;如果目标段描述符的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;RPL&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pre"&gt;CPL&lt;/span&gt;&lt;/code&gt;, 则在 CPU 内部保存&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esp&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ss&lt;/span&gt;&lt;/code&gt;的值.
这个时候意味这特权级转换要发生了.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从一个任务状态段(TSS)加载&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ssX&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;espX&lt;/span&gt;&lt;/code&gt;, X 是 RPL 的值, 所以对于系统调用,
取出的会是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ss0&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esp0&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ss&lt;/span&gt;&lt;/code&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esp&lt;/span&gt;&lt;/code&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eflags&lt;/span&gt;&lt;/code&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cs&lt;/span&gt;&lt;/code&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eip&lt;/span&gt;&lt;/code&gt;压栈&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;清除&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eflags&lt;/span&gt;&lt;/code&gt;中的某些位&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cs&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ip&lt;/span&gt;&lt;/code&gt;为 IDT[n] 中指定的值. (执行中断服务例程)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于普通的中断, 其中断返回地址是发生中断时的执行的那条指令的地址
(需要将 IDT 的类型设置为 中断门(Interrupt gate))
因为这种中断通常和当前进程没有什么关系.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;idt_install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;fault0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEL_KCODE&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GATE_INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IDT_PR&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;IDT_DPL_KERN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;对于系统调用, 我们需要主动执行 int 指令, 并让其返回到下一条指令处.
因此要将处理系统调用的 IDT 设置为 陷阱门(Trap gate), 并且 DPL 为&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;IDT_DPL_USER&lt;/span&gt;&lt;/code&gt;(3).
如下:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;idt_install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ISR_SYSCALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;_syscall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEL_KCODE&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GATE_TRAP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IDT_PR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;IDT_DPL_USER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tss"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;TSS&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在特权级转换的时候, 需要从任务状态段取出&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ss0&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esp0&lt;/span&gt;&lt;/code&gt;, 因此在转换之前需要设置 TSS.&lt;/p&gt;
&lt;p&gt;CPU 会从寄存器&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tr&lt;/span&gt;&lt;/code&gt;获得 TSS 的选择子, 然后从 GDT 表里面找出对应的描述符,
由描述符就可以获得 TSS 的基址了.&lt;/p&gt;
&lt;p&gt;TSS 的选择子放在 GDT 里, 但是其&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;AC_RE&lt;/span&gt;&lt;/code&gt;(ACCESS_REVERSE)位为 0 来表示
它是一个 TSS 描述符而不是 GDT 描述符.&lt;/p&gt;
&lt;p&gt;因此 TSS 的初始化是这样的:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;tss_init&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;gdt_install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SEL_TSS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tss&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;AC_PR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;AC_AC&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;AC_EX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GDT_GR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/* for tss, access_reverse bit is 1 */&lt;/span&gt;
    &lt;span class="n"&gt;gdt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;AC_RE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在从进程的内核态回到用户态的时候, 要设置一次 TSS, 以下函数在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;uvm_switch&lt;/span&gt;&lt;/code&gt;里面被调用:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;tss_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;ss0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;esp0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tss&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;tss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ss0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ss0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;tss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;esp0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;esp0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;tss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iopb_off&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tss&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;两个上下文&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;中断上下文&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;从上面关于中断过程的解释可以看到, 从用户态执行中断转入内核态是可能的,
重点在与设置一个 DPL = 3 的 IDT 和一个 TSS 段.&lt;/p&gt;
&lt;p&gt;那如何从内核态返回用户态呢? iret 指令会按 int 压栈的顺序逆序将寄存器们出栈,
程序就会从内核态又返回到用户态了.&lt;/p&gt;
&lt;p&gt;有意思的地方就是, 要从内核态到用户态, 我们可以构造一个栈, 然后执行 iret 指令,
iret 就会将我们特地安排的值覆盖到寄存器上, 这个工作由&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc_alloc&lt;/span&gt;&lt;/code&gt;完成,
每个新建的进程都通过这种方式”假装回到”用户空间.&lt;/p&gt;
&lt;p&gt;为了方便地构造栈, 我们需要定义出中断时保存的上下文, int 指令保存的信息还不够,
我们需要自己保存更多的寄存器:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;int_frame&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* segment registers */&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 16 bits&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 16 bits&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 16 bits&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 16 bits&lt;/span&gt;

    &lt;span class="cm"&gt;/* registers save by pusha */&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;edi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;esi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;esp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;ecx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;int_no&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* save by `int` instruction */&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;err_code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;eip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 16 bits&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;eflags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;user_esp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 16 bits&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;只要完整地保存了以上信息并正确还原, 就能确保从中断返回时, 程序依然正常运行.
注意的是我们不必显式地建立以上的一个结构体(构建第一个进程的时候除外), 在中断发生时,
这个结构体会在进程的内核栈上被建立.中断返回时, 这些信息又会从栈里被弹出.&lt;/p&gt;
&lt;p&gt;中断上下文的&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;err_code&lt;/span&gt;&lt;/code&gt;到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ss&lt;/span&gt;&lt;/code&gt;部分由 int 指令压入, 之后跳转到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OS67/kern/loader.asm&lt;/span&gt;&lt;/code&gt;
中的由汇编编写的中断服务例程(ISR)入口. 有的中断不产生&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;err_code&lt;/span&gt;&lt;/code&gt;,
就由该中断入口压入一个假的&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;err_code&lt;/span&gt;&lt;/code&gt;. 这些入口代码有两个宏生成,
分别是&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;m_fault&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;m_irq&lt;/span&gt;&lt;/code&gt;, 负责处理异常中断和硬件中断.
另外还有&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_syscall&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_isr_unknown&lt;/span&gt;&lt;/code&gt;处理系统调用和未定义的中断.&lt;/p&gt;
&lt;p&gt;每个入口都会压入自己的中断号, 然后统一跳转到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_isr_stub&lt;/span&gt;&lt;/code&gt;, 压入上下文的剩余部分,
再调到由 C 编写的&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;isr_stub&lt;/span&gt;&lt;/code&gt;, 由此再根据入口压入中断号调用真正的 ISR.
关于这些 ISR 的详情…太长了表示扯不下去了… :(&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;进程上下文&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;中断上下文已经让程序能够程序成功进入内核并从内核中返回,
接下来通过切换进程上下文来实现进程的切换.&lt;/p&gt;
&lt;p&gt;进程上下文看起来比中断上下文简单许多, 不过更富技巧性.&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;edi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;esi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;eip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这个上下文同样是建立在进程的内核栈上的,但是内核原来的栈也保存了一个.&lt;/p&gt;
&lt;p&gt;我们用下面这个函数来切换进程上下文:&lt;/p&gt;
&lt;div class="highlight-objdump-nasm notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;; context_switch(struct context **old, context *new)&lt;/span&gt;
&lt;span class="x"&gt;; 当你调用这个函数时, 会依次 压入 new, old 和 eip&lt;/span&gt;
&lt;span class="x"&gt;[global context_switch]&lt;/span&gt;
&lt;span class="x"&gt;context_switch:&lt;/span&gt;
&lt;span class="x"&gt;    mov eax, [esp + 4]  ; 把 old 放到 eax&lt;/span&gt;
&lt;span class="x"&gt;    mov edx, [esp + 8]  ; 把 new 放到 edx&lt;/span&gt;

&lt;span class="x"&gt;    ; 这里已经隐式地保存了 eip&lt;/span&gt;
&lt;span class="x"&gt;    push ebp&lt;/span&gt;
&lt;span class="x"&gt;    push ebx&lt;/span&gt;
&lt;span class="x"&gt;    push esi&lt;/span&gt;
&lt;span class="x"&gt;    push edi&lt;/span&gt;
&lt;span class="x"&gt;; 此时的栈结构就是一个 `strcut context`&lt;/span&gt;

&lt;span class="x"&gt;    mov [eax], esp      ; 把 esp 保存到 old 指向的地址&lt;/span&gt;
&lt;span class="x"&gt;    mov esp, edx        ; 切换到 new 指向的地址作为栈&lt;/span&gt;

&lt;span class="x"&gt;    pop edi&lt;/span&gt;
&lt;span class="x"&gt;    pop esi&lt;/span&gt;
&lt;span class="x"&gt;    pop ebx&lt;/span&gt;
&lt;span class="x"&gt;    pop ebp&lt;/span&gt;
&lt;span class="x"&gt;    ; 还剩下一个 eip 未弹出, 刚好由 ret 弹出, 这样就切换到了 new 里面的 eip&lt;/span&gt;
&lt;span class="x"&gt;    ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这里的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eip&lt;/span&gt;&lt;/code&gt; 和 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esp&lt;/span&gt;&lt;/code&gt; 的保存都非常巧妙, eip 在执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;context_switch&lt;/span&gt;&lt;/code&gt; 时被压入,
又在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ret&lt;/span&gt;&lt;/code&gt; 的时候被弹出. 而 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;esp&lt;/span&gt;&lt;/code&gt; 则直接作为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;context&lt;/span&gt;&lt;/code&gt; 的地址被保存.&lt;/p&gt;
&lt;p&gt;可以看到这个函数可以切换当前的执行流到另一个执行流, 进程的切换就是这样实现的,
当然要切换的不止这个, 页表也要切换, 代表当前执行进程的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc&lt;/span&gt;&lt;/code&gt; 变量也要更新.
页表的切换由 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;uvm_switch&lt;/span&gt;&lt;/code&gt; 执行, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc&lt;/span&gt;&lt;/code&gt; 的更新则在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;scheduler&lt;/span&gt;&lt;/code&gt; 执行.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;虚拟内存映射&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;由于之前的思路问题, 因此 OS67 的内存管理方式不得不和 xv6 不太一样.&lt;/p&gt;
&lt;p&gt;OS67 的内存分配实现在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OS67/mm/pmm.c&lt;/span&gt;&lt;/code&gt;, 使用一个简单的栈来存放未分配的内存页,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;malloc&lt;/span&gt;&lt;/code&gt; 就是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pop&lt;/span&gt;&lt;/code&gt; 而 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mfree&lt;/span&gt;&lt;/code&gt; 就是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;push&lt;/span&gt;&lt;/code&gt;. 这么做简单明了,
虽然申请多个页的时候效率不高, 不过我们不考虑这种需要大量内存的情况.&lt;/p&gt;
&lt;p&gt;对于虚拟内存映射, 策略是这样的: 内核以及未分配的内存的虚拟地址和物理地址一一对应,
用户地址映射到 0xc0000000 上. 内核在初始化页表的时候, 建立一个映射所有物理内存的页表,
之后建立的进程页表中的内核部分就复用内核页表的页表项, 避免内存浪费,
同时在特权级转换时也不必切换页表, 亦能很方便地从内核空间访问到用户空间的内存.&lt;/p&gt;
&lt;p&gt;将用户地址映射到 0xc0000000 的好处是不需要在建立正式页表前建立临时页表来把内核映射到高处,
另外 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;malloc&lt;/span&gt;&lt;/code&gt; 出来的是物理地址, 可以直接对其读写而不必做转换.
缺点则是程序必须经过重定位(链接时使用参数 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-Ttext&lt;/span&gt; &lt;span class="pre"&gt;0xc0000000&lt;/span&gt;&lt;/code&gt;)才能运行在高地址,
也许有更多的缺点还没发现.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;第一个进程&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;构造&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;结构体 proc 用来储存一个进程的信息, 内核中有一个数组&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;struct&lt;/span&gt; &lt;span class="pre"&gt;ptable[NPROC]&lt;/span&gt;&lt;/code&gt;来管理所有的进程.
结构体&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc&lt;/span&gt;&lt;/code&gt;定义如下:&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;killed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NAME_LEN&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// context&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;int_frame&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// 中断上下文&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 进程上下文&lt;/span&gt;

    &lt;span class="n"&gt;pde_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pgdir&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;               &lt;span class="c1"&gt;// 进程页表&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;kern_stack&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c1"&gt;// 内核栈&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;chan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ofile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NOFILE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;inode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这里主要关注的是两个上下文, 进程页表以及内核栈.&lt;/p&gt;
&lt;p&gt;这里涉及的代码都在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OS37/proc/proc.c&lt;/span&gt;&lt;/code&gt;中.&lt;/p&gt;
&lt;p&gt;第一个进程需要手动创建, 由&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc_init&lt;/span&gt;&lt;/code&gt;完成.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc_inint&lt;/span&gt;&lt;/code&gt;首先调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc_alloc&lt;/span&gt;&lt;/code&gt;从&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ptable&lt;/span&gt;&lt;/code&gt;获得一个空的进程结构体槽位,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc_alloc&lt;/span&gt;&lt;/code&gt;做了一些必要的初始化操作.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc_alloc&lt;/span&gt;&lt;/code&gt;为新进程申请了内核栈, 并对他进行了一定的构造:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;为中断上下文&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fm&lt;/span&gt;&lt;/code&gt;留出空间, 并把&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc-&amp;gt;fm&lt;/span&gt;&lt;/code&gt;指向该空间.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fm&lt;/span&gt;&lt;/code&gt;之后放置了指向中断返回函数&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_isr_stub_ret&lt;/span&gt;&lt;/code&gt;的指针&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为进程上下文&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;context&lt;/span&gt;&lt;/code&gt;留出空间, 并把&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc-&amp;gt;content&lt;/span&gt;&lt;/code&gt;改空间,
把&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc-&amp;gt;context-eip&lt;/span&gt;&lt;/code&gt;指向了函数&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fork_ret&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 xv6 中&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fork_ret&lt;/span&gt;&lt;/code&gt;被用来处理锁, 这 OS67 中, 这个函数碰巧被用来解决一个
&lt;a href="#id10"&gt;&lt;span class="problematic" id="id11"&gt;**&lt;/span&gt;&lt;/a&gt;&lt;a class="reference external" href="https://github.com/SilverRainZ/OS67/commit/fc0e84caa1c3ae95998342f2b03125e2226d0dd6"&gt;奇怪的 bug&lt;/a&gt;** .
因此, 正常 alloc 出来的新进程都会返回到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fork_ret&lt;/span&gt;&lt;/code&gt;. 从&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fork_ret&lt;/span&gt;&lt;/code&gt;返回后,
又会跳转到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_isr_stub_ret&lt;/span&gt;&lt;/code&gt;准备从中断返回. 接下来就会逐步把&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fm&lt;/span&gt;&lt;/code&gt;弹出,
尽管此时的&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fm&lt;/span&gt;&lt;/code&gt;还没有初始化.&lt;/p&gt;
&lt;div class="system-message" id="id10"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/process-scheduler-1.rst&lt;/span&gt;, line 336); &lt;em&gt;&lt;a href="#id11"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline strong start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;之后&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc_init&lt;/span&gt;&lt;/code&gt;为第一个进程申请了一个页目录&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc-&amp;gt;pgdir&lt;/span&gt;&lt;/code&gt;,
调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;kvm_init&lt;/span&gt;&lt;/code&gt;建立到内核的一对一的地址映射. 为之前的内核栈也建立地址映射.&lt;/p&gt;
&lt;p&gt;再接着, 通过声明在用户程序&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;OS67/proc/init.asm&lt;/span&gt;&lt;/code&gt;中的全局变量&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__init_start&lt;/span&gt;&lt;/code&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;__init_end&lt;/span&gt;&lt;/code&gt;
的地址获得编译进内核里的用户程序的位置, 调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;uvm_init_fst&lt;/span&gt;&lt;/code&gt;把程序复制到一个新的页中,
并把该页映射到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;USER_BASE&lt;/span&gt;&lt;/code&gt;(0xc0000000).&lt;/p&gt;
&lt;p&gt;然后开始手动构建一个&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fm&lt;/span&gt;&lt;/code&gt;, 为各个段寄存器设置正确的段选择子,
为 eflags 寄存器加上 IF 标志(允许中断), 设置用户栈, 最后把&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eip&lt;/span&gt;&lt;/code&gt;设定为&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;USER_BASE&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;最后把进程的状态&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc-&amp;gt;state&lt;/span&gt;&lt;/code&gt;设置为可运行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;P_RUNABLE&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;以上是比较关键的步骤, 现在可以准备运行第一个进程了.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;运行&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;执行了&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc_init&lt;/span&gt;&lt;/code&gt;之后, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;scheduler&lt;/span&gt;&lt;/code&gt;紧接其后,
它在&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ptable&lt;/span&gt;&lt;/code&gt;中寻找第一个&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;state&lt;/span&gt;&lt;/code&gt;为&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;P_RUNABLE&lt;/span&gt;&lt;/code&gt;的进程,
调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;uvm_switch&lt;/span&gt;&lt;/code&gt;切换到该进程的页表并设置好 TSS.&lt;/p&gt;
&lt;p&gt;接着更新&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc&lt;/span&gt;&lt;/code&gt;变量, 把&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc-&amp;gt;state&lt;/span&gt;&lt;/code&gt;设置为&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;P_RUNNING&lt;/span&gt;&lt;/code&gt;.
最后调用&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;context_switch&lt;/span&gt;&lt;/code&gt;切换到进程.  不出意外的话,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;context_switch&lt;/span&gt;&lt;/code&gt;会弹出&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc-&amp;gt;context&lt;/span&gt;&lt;/code&gt;中设定好的寄存器,
新进程返回到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fork_ret&lt;/span&gt;&lt;/code&gt;之后返回到&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_isr_stub_ret&lt;/span&gt;&lt;/code&gt;中, 又把&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;proc-&amp;gt;fm&lt;/span&gt;&lt;/code&gt;弹出.
于是第一个进程就成功运行在 0xc0000000 的用户空间上了.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id28"&gt;调度&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这里使用非常简单的轮转法, 每次触发时钟中断都会执行&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sched&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sched&lt;/span&gt;&lt;/code&gt;把当前进程状态由&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;P_RUNNING&lt;/span&gt;&lt;/code&gt;变更为&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;P_RUNABLE&lt;/span&gt;&lt;/code&gt;. 接着执行&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;context_switch&lt;/span&gt;&lt;/code&gt;.
这样 CPU 执行流就回到了刚才&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;scheduler&lt;/span&gt;&lt;/code&gt;中的循环,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;scheduler&lt;/span&gt;&lt;/code&gt;继续寻找一个&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;P_RUNABLE&lt;/span&gt;&lt;/code&gt;的进程并切换到它.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="e-n-d"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;E.N.D.&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;至此, 用户级进程已经成功实现并且被调度. 但是没有有效的接口来启动更多的进程.
我们需要实现一些系统调用比如&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fork&lt;/span&gt;&lt;/code&gt;和&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec&lt;/span&gt;&lt;/code&gt;来做这些事情.
:( 但是我已经写不下去了… 如果可以话下次再写吧.&lt;/p&gt;
&lt;p&gt;&lt;a href="#id14"&gt;&lt;span class="problematic" id="id15"&gt;:s:`不一定有下次`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/process-scheduler-1.rst&lt;/span&gt;, line 384)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id14"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/process-scheduler-1.rst&lt;/span&gt;, line 384); &lt;em&gt;&lt;a href="#id15"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/process-scheduler-1.html" rel="alternate"/>
    <published>2015-09-14T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/2015-huashangctf-re300.html</id>
    <title>2015 华山杯 CTF Reverse 300</title>
    <updated>2015-11-02T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="ctf-reverse-300"&gt;

&lt;p&gt;程序在此： &lt;a class="reference external" href="http://jianguoyun.com/p/Dbz27p8QtNrvBRiq2w4"&gt;toetrix-crackme.exe&lt;/a&gt;， VC++ 6.0 编写，无壳， CLI 程序。&lt;/p&gt;
&lt;p&gt;这题本来我是一点都不会的，幸得尖刀某大牛指点思路，之后回头看反编译的代码
总算是摸清楚了程序的流程。因为这种复杂度的题目之前没有做出来过，特此记录。&lt;/p&gt;
&lt;p&gt;程序很像一个推箱子游戏，在一个 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;9*9&lt;/span&gt;&lt;/code&gt; 的二维地图中有三种元素： 0，1，&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;10&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;x&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;2&lt;/span&gt;&lt;/code&gt;
分别代表空气，障碍和箱子，你需要做的就是将所有的箱子推出地图。&lt;/p&gt;
&lt;p&gt;程序储存的地图如下：&lt;/p&gt;
&lt;div class="highlight-c-objdump notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00407030&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00407030&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;             &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00407030&lt;/span&gt;                 &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00407030&lt;/span&gt;                 &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;Ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00407030&lt;/span&gt;                 &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;Ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00407030&lt;/span&gt;                 &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00407030&lt;/span&gt;                 &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00407030&lt;/span&gt;                 &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;Eh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00407030&lt;/span&gt;                 &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00407030&lt;/span&gt;                 &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;转化成十进制：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以看到每个箱子都是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;X2&lt;/span&gt;&lt;/code&gt; 形式的数字。&lt;/p&gt;
&lt;p&gt;用 IDA 分析整理得到 main 函数代码如下：&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kr"&gt;__cdecl&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;envp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// esi@1&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;direct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// bl@2&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// eax@2&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// eax@13&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// [sp+8h] [bp-30h]@2&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// [sp+Ch] [bp-2Ch]@2&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// [sp+10h] [bp-28h]@1&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;v10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// [sp+36h] [bp-2h]@1&lt;/span&gt;

    &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aInputYourSn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;v10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;direct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;find_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// 遍历数组 返回的 x y 是箱子坐标&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;direct&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                                &lt;span class="c1"&gt;// &amp;#39;1&amp;#39; 左&lt;/span&gt;
                    &lt;span class="n"&gt;go_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                                &lt;span class="c1"&gt;// &amp;#39;2&amp;#39; 右&lt;/span&gt;
                    &lt;span class="n"&gt;go_right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                                &lt;span class="c1"&gt;// &amp;#39;3&amp;#39; 上&lt;/span&gt;
                    &lt;span class="n"&gt;go_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;direct&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;LABEL_12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;go_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                      &lt;span class="c1"&gt;// &amp;#39;4&amp;#39; 下&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;LABEL_12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;check_no_start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aBDBuzeBuDGoodJ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                        &lt;span class="c1"&gt;// ∑(っ °Д °;)っ  good job!&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aIsbuzebuIsjrII&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                        &lt;span class="c1"&gt;// (╯°Д°)╯︵ ┻━┻  try again!&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;程序接受的输入以两个十进制位位为一组，
第一位 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;start&lt;/span&gt;&lt;/code&gt; 来指定一个箱子： 地图中值为（&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;10&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;start&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;2&lt;/span&gt;&lt;/code&gt;）的元素
（在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;find_start&lt;/span&gt;&lt;/code&gt; 函数中处理，返回 x，y 为箱子的坐标）；
第二位 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;direct&lt;/span&gt;&lt;/code&gt; 用来指定推箱子的方向，&lt;strong&gt;字符&lt;/strong&gt; 1 2 3 4 分别代表方向左右上下
（由 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;go_xx&lt;/span&gt;&lt;/code&gt; 函数处理）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;比如序列 2321 就是把值为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;2*10&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;2&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;22&lt;/span&gt;&lt;/code&gt; 的箱子往上 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;3&lt;/span&gt;&lt;/code&gt; 移动， 再把该箱子往左 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1&lt;/span&gt;&lt;/code&gt; 移动。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;看一下 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;find_start&lt;/span&gt;&lt;/code&gt; 函数：&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="kr"&gt;__cdecl&lt;/span&gt; &lt;span class="nf"&gt;find_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;e_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;e_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// ecx@3&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// eax@5&lt;/span&gt;

    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_DWORD&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;e_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_DWORD&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;e_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_DWORD&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;e_x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="cm"&gt;/* *(&amp;amp;map + 9 * (*e_y) + *e_x)  -&amp;gt;  map[y][x] */&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_DWORD&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;e_y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_DWORD&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;e_y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_DWORD&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;e_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_DWORD&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;e_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_DWORD&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;e_y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_DWORD&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;e_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;函数遍历整个二维数组 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map&lt;/span&gt;&lt;/code&gt;，如果在 map 中发现等于 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;10&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;start&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;2&lt;/span&gt;&lt;/code&gt; 的数字就 return
此时 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;e_x&lt;/span&gt;&lt;/code&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;e_y&lt;/span&gt;&lt;/code&gt; 中便是该点坐标。&lt;/p&gt;
&lt;p&gt;接下来看 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;go_left&lt;/span&gt;&lt;/code&gt; 函数：&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;__cdecl&lt;/span&gt; &lt;span class="nf"&gt;go_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// eax@1&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c1"&gt;// 遇到非 0 点&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                 &lt;span class="c1"&gt;// 边缘检测&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;xchg_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;            &lt;span class="c1"&gt;// 交换本次起点和终点的值，如果到达边缘，交换的就是同一个点。&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;该函数接受箱子的坐标，然后往坐标的左边走（&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;x&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;0&lt;/span&gt;&lt;/code&gt;），
如果遇到一个非 0 点，即跳出循环。&lt;/p&gt;
&lt;p&gt;如果 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;i&lt;/span&gt; &lt;span class="pre"&gt;==&lt;/span&gt; &lt;span class="pre"&gt;-1&lt;/span&gt;&lt;/code&gt; 说明从该箱子左边到边界都是 0，箱子可以移出地图了，
于是把该箱子坐标处的值标记为 1（变成障碍了，便于接下来交换）。&lt;/p&gt;
&lt;p&gt;接下来函数把箱子的坐标 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(x,&lt;/span&gt; &lt;span class="pre"&gt;y)&lt;/span&gt;&lt;/code&gt; 和 移动终点的坐标 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(i+1,&lt;/span&gt; &lt;span class="pre"&gt;y)&lt;/span&gt;&lt;/code&gt; 传给函数 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;xchg_point&lt;/span&gt;&lt;/code&gt;，
函数 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;xchg_point&lt;/span&gt;&lt;/code&gt; 比较简单，仅仅是交换两个点的值。&lt;/p&gt;
&lt;p&gt;这样就完成了一次左移，&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;go_right&lt;/span&gt;&lt;/code&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;go_up&lt;/span&gt;&lt;/code&gt; 等函数同理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果终点是边界的话，箱子的值会被置为 1，
交换后的结果就是：箱子处变为 0，终点变为 1。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;处理完一次移动之后 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;step&lt;/span&gt;&lt;/code&gt; 自增 2，进行下一次移动，直到整个序列结束。
就执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;check_no_start&lt;/span&gt;&lt;/code&gt; 做最后的检查：&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="nf"&gt;check_no_start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// esi@1&lt;/span&gt;
    &lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// ecx@2&lt;/span&gt;

    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_BYTE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;// 有一个箱子&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;end_of_map&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;检查整个 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map&lt;/span&gt;&lt;/code&gt; 中是否有形如 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;X2&lt;/span&gt;&lt;/code&gt; 的数字，即是否还有箱子存在，
如果没有的话，返回 1，这就是我们期望的结果。&lt;/p&gt;
&lt;p&gt;根据以上流程我们就可以手动算出一个能移除所有箱子的序列，&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;注意每个箱子移动可以不是连续的，可以先移动一个箱子到一个地方，再去移动另一个。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;移动箱子的顺序的和路径如下：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;
&lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;515351&lt;/span&gt;
&lt;span class="mi"&gt;82&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8183&lt;/span&gt;
&lt;span class="mi"&gt;72&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7372&lt;/span&gt;
&lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4441&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;141114&lt;/span&gt;
&lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3431&lt;/span&gt;
&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;
&lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4244&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;因此得到 key： &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;625153518183737244411411143431234244&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;附上分析时使用的 &lt;a class="reference external" href="http://jianguoyun.com/p/DaHaiScQtNrvBRjo2w4"&gt;idb 数据库&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/2015-huashangctf-re300.html" rel="alternate"/>
    <published>2015-11-02T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/gen-graph-from-c-code.html</id>
    <title>从 C 源码生成 函数/模块 调用图</title>
    <updated>2015-12-25T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="c"&gt;

&lt;p&gt;前天是操作系统课程设计的截止日期，这意味这 &lt;a class="reference external" href="https://github.com/SilverRainZ/OS67"&gt;OS67 这个坑&lt;/a&gt;
已经告一段落了，接下来的事情是写报告，不过鉴于 OS 的老师这一学期都没出现过，
报告应该可以随便水过去，据说连答辩都可以省掉了……&lt;/p&gt;
&lt;p&gt;前面说的都是废话，报告里要求画出函数调用图，于是就打算直接用软件生成好了。&lt;/p&gt;
&lt;p&gt;用到的软件有 graphviz，egypt&lt;sup&gt;AUR&lt;/sup&gt;，cinclude2dot&lt;sup&gt;AUR&lt;/sup&gt;，
&lt;a class="reference internal" href="about/friends.html#friend-farseerfc" title="farseerfc friend"&gt;&lt;code class="xref any any-friend docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;#64;farseerfc&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 推荐了 &lt;a class="reference external" href="http://makepp.sourceforge.net/"&gt;makepp&lt;/a&gt;，
然而 AUR 里面没有就作罢了。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;生成函数调用图&lt;/h2&gt;
&lt;p&gt;安装 egypt 直接 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yaourt&lt;/span&gt; &lt;span class="pre"&gt;-S&lt;/span&gt; &lt;span class="pre"&gt;egypt&lt;/span&gt;&lt;/code&gt; 即可，
之后在 makefile 里面的 CFLAG 里面增加一句 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-fdump-rtl-expand&lt;/span&gt;&lt;/code&gt;，
再 make 一次，gcc 会在 bulid 目录下生成 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*.expand&lt;/span&gt;&lt;/code&gt; 文件，
这是 egypt 生成 call graph 所需要的信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;我这里生成的文件的后缀都是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*.192r.expand&lt;/span&gt;&lt;/code&gt;，并不知道是什么意思……&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;之后执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;egypt&lt;/span&gt; &lt;span class="pre"&gt;*.expand&lt;/span&gt; &lt;span class="pre"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;main.dot&lt;/span&gt;&lt;/code&gt;
就能生成代表整个项目里所有的 C 函数的调用关系的 dot 文件了。&lt;/p&gt;
&lt;p&gt;dot 文件大概长这样，每一行代表连接两个顶点的边
用 Graphviz 的 dot 命令可以从 dot 文件生成 png。&lt;/p&gt;
&lt;div class="highlight-text notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;digraph callgraph {
&amp;quot;move_cur&amp;quot; -&amp;gt; &amp;quot;outb&amp;quot; [style=solid];
&amp;quot;cls&amp;quot; -&amp;gt; &amp;quot;move_cur&amp;quot; [style=solid];
&amp;quot;iunlock&amp;quot; -&amp;gt; &amp;quot;panic&amp;quot; [style=solid];
&amp;quot;puts&amp;quot; -&amp;gt; &amp;quot;putchar&amp;quot; [style=solid];
&amp;quot;puts&amp;quot; -&amp;gt; &amp;quot;_puts&amp;quot; [style=solid];
&amp;quot;sys_sleep&amp;quot; -&amp;gt; &amp;quot;argint&amp;quot; [style=solid];
&amp;quot;sys_sleep&amp;quot; -&amp;gt; &amp;quot;sleep&amp;quot; [style=solid];
&amp;quot;sys_unlink&amp;quot; -&amp;gt; &amp;quot;iupdate&amp;quot; [style=solid];
    ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dot&lt;/span&gt; &lt;span class="pre"&gt;main.dot&lt;/span&gt; &lt;span class="pre"&gt;-Tpng&lt;/span&gt; &lt;span class="pre"&gt;-o&lt;/span&gt; &lt;span class="pre"&gt;main.png&lt;/span&gt;&lt;/code&gt;，于是从整个 OS67 生成了这么一张可怕的图片：&lt;/p&gt;
&lt;img alt="" src="_images/os67-func-call-graph.png" /&gt;
&lt;p&gt;这么大的图片用在报告里显然是不行的，不过函数间的调用逻辑也就那样了，
没法做什么简化，所以对于整个项目我只生成了后面的模块调用图。&lt;/p&gt;
&lt;p&gt;既然整个项目的图太大了，那就生成模块内部的调用图好了，OS67 的项目结构长这样，
模块和文件夹基本上是一一对应的：&lt;/p&gt;
&lt;div class="highlight-console notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tree -d
&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;├── bin&lt;/span&gt;
&lt;span class="go"&gt;│   └── rootfs&lt;/span&gt;
&lt;span class="go"&gt;├── boot    # bootloader&lt;/span&gt;
&lt;span class="go"&gt;├── dev     # 设备文件&lt;/span&gt;
&lt;span class="go"&gt;├── drv     # 驱动程序&lt;/span&gt;
&lt;span class="go"&gt;├── fs      # 文件系统&lt;/span&gt;
&lt;span class="go"&gt;├── inc     # 头文件&lt;/span&gt;
&lt;span class="go"&gt;├── kern    # 保护模式相关代码&lt;/span&gt;
&lt;span class="go"&gt;├── libs    # 库文件&lt;/span&gt;
&lt;span class="go"&gt;├── lst&lt;/span&gt;
&lt;span class="go"&gt;├── mm      # 内存管理&lt;/span&gt;
&lt;span class="go"&gt;├── notes&lt;/span&gt;
&lt;span class="go"&gt;├── proc    # 进程管理&lt;/span&gt;
&lt;span class="go"&gt;├── script  # 各种配置文件和链接脚本&lt;/span&gt;
&lt;span class="go"&gt;└── usr     # 用户例程&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;需要生成调用图的模块有 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dev&lt;/span&gt; &lt;span class="pre"&gt;drv&lt;/span&gt; &lt;span class="pre"&gt;fs&lt;/span&gt; &lt;span class="pre"&gt;kern&lt;/span&gt; &lt;span class="pre"&gt;libs&lt;/span&gt; &lt;span class="pre"&gt;mm&lt;/span&gt; &lt;span class="pre"&gt;proc&lt;/span&gt;&lt;/code&gt;，来写个小脚本自动生成好了：&lt;/p&gt;
&lt;div class="highlight-sh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/sh&lt;/span&gt;
&lt;span class="nv"&gt;mods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dev drv fs kern libs mm proc&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; arg in &lt;span class="nv"&gt;$mods&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ls -1 &lt;span class="nv"&gt;$arg&lt;/span&gt;/ &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;\.c&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/\.c/.c.192r.expand/g&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; bin
    egypt &lt;span class="nv"&gt;$files&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;.dot
    dot &lt;span class="nv"&gt;$arg&lt;/span&gt;.dot -Tpng -o ../&lt;span class="nv"&gt;$arg&lt;/span&gt;.png
    &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;生成出来的图片除了 fs 模块比较大之外其他都还行，下面是 kern 模块的 call graph
（用 kolourpaint 做了点调整）：&lt;/p&gt;
&lt;img alt="" src="_images/os67-kern-func-call-graph.png" /&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;注意：这里没有处理 boot 模块和 usr 模块，因为 boot 里面都是汇编程序，
而 usr 里面的用户程序都有 main 函数会导致冲突而画出奇怪的图，所以就没有包含了。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="#id2"&gt;&lt;span class="problematic" id="id3"&gt;:s:`另外 graphviz 还支持把 dot 文件转成 dia 格式，所以如果对各个顶点的位置不满意的话，我们可以用 Dia 来调整。`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/gen-graph-from-c-code.rst&lt;/span&gt;, line 115)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/gen-graph-from-c-code.rst&lt;/span&gt;, line 115); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;刚说完就被打脸了，graphviz 的 dia 输出支持在 2.26.0 的时候被移除了。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;生成模块调用图&lt;/h2&gt;
&lt;p&gt;接下来来生成模块间的调用图吧，
我在网上找到一个根据 #include 生成文件间调用关系的 dot 的 prel 脚本：
&lt;a class="reference external" href="https://www.flourish.org/cinclude2dot/"&gt;flourish.org/cinclude2dot/&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;AUR 里面没有所以顺手给打了一个包：
&lt;code class="code docutils literal notranslate"&gt;&lt;span class="pre"&gt;cinclude2dot\&lt;/span&gt; &lt;span class="pre"&gt;:sup:`AUR&lt;/span&gt;&lt;/code&gt; &amp;lt;&lt;a class="reference external" href="https://aur.archlinux.org/packages/cinclude2dot/"&gt;https://aur.archlinux.org/packages/cinclude2dot/&lt;/a&gt;&amp;gt;`_，
所以现在也可以直接用 yaourt 装 cinclude2dot 了。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cinclude2dot&lt;/span&gt; &lt;span class="pre"&gt;--include&lt;/span&gt; &lt;span class="pre"&gt;inc&lt;/span&gt; &lt;span class="pre"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;main.dot&lt;/span&gt;&lt;/code&gt; 会在当前目录递归地找 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*.c&lt;/span&gt;&lt;/code&gt; 文件，
然后在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;inc&lt;/span&gt;&lt;/code&gt; 目录找对应的头文件，生成 c 文件到头文件包含关系的 dot 文件。
如果启用 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--merge&lt;/span&gt; &lt;span class="pre"&gt;module&lt;/span&gt;&lt;/code&gt; 的话，会把 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;xxx.c&lt;/span&gt;&lt;/code&gt; 和 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;xxx.h&lt;/span&gt;&lt;/code&gt; 合并为一个模块 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;xxx&lt;/span&gt;&lt;/code&gt;，
然而这样生成的图片还是太大了点。&lt;/p&gt;
&lt;img alt="" src="_images/os67-mod-include-graph.png" /&gt;
&lt;p&gt;cinclude2dot 还提供了一个 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--merge&lt;/span&gt; &lt;span class="pre"&gt;directory&lt;/span&gt;&lt;/code&gt; 选项，把相同目录的文件合并为一个模块，
这正是我想要的功能，然而这样生成的图过分简单，
所有的目录都指向了存放头文件的目录 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;inc&lt;/span&gt;&lt;/code&gt;。试了一下 directory 和 module 选项也不能一起用，
果然还是得自己在 dot 文件上改一改。&lt;/p&gt;
&lt;p&gt;执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cinclude2dot&lt;/span&gt; &lt;span class="pre"&gt;--include&lt;/span&gt; &lt;span class="pre"&gt;inc&lt;/span&gt; &lt;span class="pre"&gt;--merge&lt;/span&gt; &lt;span class="pre"&gt;module&lt;/span&gt; &lt;span class="pre"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;$dotfile&lt;/span&gt;&lt;/code&gt;，得到各个「文件」间的调用关系。&lt;/p&gt;
&lt;div class="highlight-text notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;digraph &amp;quot;source tree&amp;quot; {
    &amp;quot;ls&amp;quot; -&amp;gt; &amp;quot;usys&amp;quot;
    &amp;quot;tty&amp;quot; -&amp;gt; &amp;quot;printk&amp;quot;
    &amp;quot;ide&amp;quot; -&amp;gt; &amp;quot;isr&amp;quot;
    &amp;quot;dev&amp;quot; -&amp;gt; &amp;quot;tty&amp;quot;
    &amp;quot;isr&amp;quot; -&amp;gt; &amp;quot;vmm&amp;quot;
    &amp;quot;cinit&amp;quot; -&amp;gt; &amp;quot;uio&amp;quot;
    &amp;quot;p2i&amp;quot; -&amp;gt; &amp;quot;type&amp;quot;
    &amp;quot;proc&amp;quot; -&amp;gt; &amp;quot;isr&amp;quot;
    &amp;quot;fstest&amp;quot; -&amp;gt; &amp;quot;string&amp;quot;
    &amp;quot;timer&amp;quot; -&amp;gt; &amp;quot;isr&amp;quot;
    ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如果 dev/tty.c 包含了 inc/printk.h，说明它调用了 libs/printk.c 里的函数，
那就有关系 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;tty&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;printk&amp;quot;&lt;/span&gt;&lt;/code&gt;，
那可以考虑把文件名替换为该文件所在的目录名，那关系就变成了 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;libs&amp;quot;&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这样替换要注意的是：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;不能将头文件目录当成一个模块，如 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;tty&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;printk&amp;quot;&lt;/span&gt;&lt;/code&gt; 的关系的右边本来就是一个头文件，
在这里它应当属于 libs 模块而不属于 inc，
如果强行加入 inc 的话结果就和上面用 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--merge&lt;/span&gt; &lt;span class="pre"&gt;directory&lt;/span&gt;&lt;/code&gt; 的效果差不多了：
每个顶点会都指向 inc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;排除 inc 后，要注意的是有些只包含宏定义的头文件并没有对应的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*.c&lt;/span&gt;&lt;/code&gt; 文件，
比如上面的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;p2i&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;/code&gt; 存在 inc/type.h ，但是并没有 type.c 这么一个文件，
那么这一行应当删除掉&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将文件名替换成目录名后会出现重复的项目，&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;ide&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;printk&amp;quot;&lt;/span&gt;&lt;/code&gt; 和 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;vga&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;printk&amp;quot;&lt;/span&gt;&lt;/code&gt;
替换后的结果都是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;quot;drv&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;libs&amp;quot;&lt;/span&gt;&lt;/code&gt;，需要去重&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把这些事情交给脚本吧，从每个要统计的模块（目录）里面取得文件列表，
把文件名替换为目录名，去除单独的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*.h&lt;/span&gt;&lt;/code&gt; 文件对应的行，去除重复行。&lt;/p&gt;
&lt;div class="highlight-sh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;mods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kern drv proc mm usr dev fs libs&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;dotfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;main.dot

cinclude2dot --include inc --merge module &amp;gt; &lt;span class="nv"&gt;$dotfile&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; arg in &lt;span class="nv"&gt;$mods&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ls -1 &lt;span class="nv"&gt;$arg&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -f &lt;span class="m"&gt;1&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; f in &lt;span class="nv"&gt;$files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        sed -i &lt;span class="s2"&gt;&amp;quot;s/\&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="s2"&gt;\&amp;quot;/\&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="s2"&gt;\&amp;quot;/g&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$dotfile&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nv"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ls -1 inc &lt;span class="p"&gt;|&lt;/span&gt; cut -f &lt;span class="m"&gt;1&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; f in &lt;span class="nv"&gt;$files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; sed -i &lt;span class="s2"&gt;&amp;quot;/&lt;/span&gt;&lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="s2"&gt;/d&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$dotfile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
awk &lt;span class="s1"&gt;&amp;#39; !x[$0]++&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$dotfile&lt;/span&gt; &amp;gt; tmpfile
mv tmpfile &lt;span class="nv"&gt;$dotfile&lt;/span&gt;
dot &lt;span class="nv"&gt;$dotfile&lt;/span&gt; -Tpng -o &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dotfile&lt;/span&gt;&lt;span class="p"&gt;%.*&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.png
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;最后我们得到了一张还算不错的， OS67 的模块调用关系图：&lt;/p&gt;
&lt;img alt="" src="_images/os67-mod-include-graph-good.png" /&gt;
&lt;p&gt;好困睡觉。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/gen-graph-from-c-code.html" rel="alternate"/>
    <published>2015-12-25T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/overthewire-leviathan.html</id>
    <title>OverTheWire Leviathan</title>
    <updated>2016-01-01T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="overthewire-leviathan"&gt;

&lt;p&gt;地址: &lt;a class="reference external" href="http://overthewire.org/wargames/leviathan/"&gt;OverTheWire: Leviathan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;说实话题目不难，可是从开始做题到做完的时间跨度却有一个多月，人家 rr 却做了一会儿就搞定了，我都在干嘛呢？&lt;/p&gt;
&lt;p&gt;完整的笔记在 &lt;a class="reference external" href="https://github.com/SilverRainZ/no-silver-bullet/blob/master/ctf/wargame-leviathan/wargame-leviathan.md"&gt;这里&lt;/a&gt;，
其中有点意思的是 leviathan3，所以特地摘抄出来：&lt;/p&gt;
&lt;p&gt;登入机器后发现家目录有个带 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;suid&lt;/span&gt;&lt;/code&gt; 权限的可执行文件 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;printfile&lt;/span&gt;&lt;/code&gt;，属主是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;leviathan3&lt;/span&gt;&lt;/code&gt;，用户组是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;leviathan2&lt;/span&gt;&lt;/code&gt;，带 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;suid&lt;/span&gt;&lt;/code&gt; 的程序执行时可以获得和 owner/grouper 相同的权限（euid/egid）。&lt;/p&gt;
&lt;div class="highlight-text notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;leviathan2@melinda:~$ ll printfile
-r-sr-x--- 1 leviathan3 leviathan2 7498 Nov 14  2014 printfile*
leviathan2@melinda:~$ ./printfile
*** File Printer ***
Usage: ./printfile filename
leviathan2@melinda:~$ ./printfile /etc/leviathan_pass/leviathan3
You cant have that file...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;从字面意思上看，这个程序接受一个文件路径然后把文件的内容显示出来，但是要求它打印 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/leviathan_pass/leviathan3&lt;/span&gt;&lt;/code&gt; 却提示 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;You&lt;/span&gt; &lt;span class="pre"&gt;cant&lt;/span&gt; &lt;span class="pre"&gt;have&lt;/span&gt; &lt;span class="pre"&gt;that&lt;/span&gt; &lt;span class="pre"&gt;file...&lt;/span&gt;&lt;/code&gt;，上 gdb 分析看看。&lt;/p&gt;
&lt;p&gt;以下是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;diaasm&lt;/span&gt; &lt;span class="pre"&gt;main&lt;/span&gt;&lt;/code&gt; 的结果，假设执行了 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;r&lt;/span&gt; &lt;span class="pre"&gt;filename&lt;/span&gt;&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight-objdump notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;0x0804852d &amp;lt;+0&amp;gt;:     push   %ebp&lt;/span&gt;
&lt;span class="x"&gt;0x0804852e &amp;lt;+1&amp;gt;:     mov    %esp,%ebp&lt;/span&gt;
&lt;span class="x"&gt;0x08048530 &amp;lt;+3&amp;gt;:     and    $0xfffffff0,%esp&lt;/span&gt;
&lt;span class="x"&gt;0x08048533 &amp;lt;+6&amp;gt;:     sub    $0x230,%esp&lt;/span&gt;
&lt;span class="x"&gt;0x08048539 &amp;lt;+12&amp;gt;:    mov    0xc(%ebp),%eax           ; argv 参数地址&lt;/span&gt;
&lt;span class="x"&gt;0x0804853c &amp;lt;+15&amp;gt;:    mov    %eax,0x1c(%esp)          ; argv 保存到 [esp + 0x1c]&lt;/span&gt;
&lt;span class="x"&gt;0x08048540 &amp;lt;+19&amp;gt;:    mov    %gs:0x14,%eax            ; Thread-Local Storage, 不知道是什么&lt;/span&gt;
&lt;span class="x"&gt;0x08048546 &amp;lt;+25&amp;gt;:    mov    %eax,0x22c(%esp)&lt;/span&gt;
&lt;span class="x"&gt;0x0804854d &amp;lt;+32&amp;gt;:    xor    %eax,%eax&lt;/span&gt;
&lt;span class="x"&gt;0x0804854f &amp;lt;+34&amp;gt;:    cmpl   $0x1,0x8(%ebp)           ; argc 和 1 比较，此处 argc 应该为 2&lt;/span&gt;
&lt;span class="x"&gt;0x08048553 &amp;lt;+38&amp;gt;:    jg     0x804857e &amp;lt;main+81&amp;gt;      ; / argc &amp;gt; 1 则跳&lt;/span&gt;
&lt;span class="x"&gt;0x08048555 &amp;lt;+40&amp;gt;:    movl   $0x8048690,(%esp)&lt;/span&gt;
&lt;span class="x"&gt;0x0804855c &amp;lt;+47&amp;gt;:    call   0x80483d0 &amp;lt;puts@plt&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;0x08048561 &amp;lt;+52&amp;gt;:    mov    0x1c(%esp),%eax&lt;/span&gt;
&lt;span class="x"&gt;0x08048565 &amp;lt;+56&amp;gt;:    mov    (%eax),%eax&lt;/span&gt;
&lt;span class="x"&gt;0x08048567 &amp;lt;+58&amp;gt;:    mov    %eax,0x4(%esp)&lt;/span&gt;
&lt;span class="x"&gt;0x0804856b &amp;lt;+62&amp;gt;:    movl   $0x80486a5,(%esp)&lt;/span&gt;
&lt;span class="x"&gt;0x08048572 &amp;lt;+69&amp;gt;:    call   0x80483b0 &amp;lt;printf@plt&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;0x08048577 &amp;lt;+74&amp;gt;:    mov    $0xffffffff,%eax&lt;/span&gt;
&lt;span class="x"&gt;0x0804857c &amp;lt;+79&amp;gt;:    jmp    0x80485e8 &amp;lt;main+187&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;; -&amp;gt; 来自 0x08048553 &amp;lt;+38&amp;gt; 的跳转，以上代码不必分析了&lt;/span&gt;
&lt;span class="x"&gt;0x0804857e &amp;lt;+81&amp;gt;:    mov    0x1c(%esp),%eax          ; 取出储存的 argv&lt;/span&gt;
&lt;span class="x"&gt;0x08048582 &amp;lt;+85&amp;gt;:    add    $0x4,%eax                ; 移动到 argv 的第一个参数（从 0 计数）&lt;/span&gt;
&lt;span class="x"&gt;0x08048585 &amp;lt;+88&amp;gt;:    mov    (%eax),%eax              ; 取出 argv[1] 的值，指向字符串 ‘filename’&lt;/span&gt;
&lt;span class="x"&gt;0x08048587 &amp;lt;+90&amp;gt;:    movl   $0x4,0x4(%esp)           ; 参数二：int amode&lt;/span&gt;
&lt;span class="x"&gt;0x0804858f &amp;lt;+98&amp;gt;:    mov    %eax,(%esp)              ; | argv[1] 作参数一： char *path&lt;/span&gt;
&lt;span class="x"&gt;0x08048592 &amp;lt;+101&amp;gt;:   call   0x8048420 &amp;lt;access@plt&amp;gt;   ; / access(argv[1], 4)，成功返回 0&lt;/span&gt;
&lt;span class="x"&gt;0x08048597 &amp;lt;+106&amp;gt;:   test   %eax,%eax&lt;/span&gt;
&lt;span class="x"&gt;0x08048599 &amp;lt;+108&amp;gt;:   je     0x80485ae &amp;lt;main+129&amp;gt;     ; 跳&lt;/span&gt;
&lt;span class="x"&gt;0x0804859b &amp;lt;+110&amp;gt;:   movl   $0x80486b9,(%esp)&lt;/span&gt;
&lt;span class="x"&gt;0x080485a2 &amp;lt;+117&amp;gt;:   call   0x80483d0 &amp;lt;puts@plt&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;0x080485a7 &amp;lt;+122&amp;gt;:   mov    $0x1,%eax&lt;/span&gt;
&lt;span class="x"&gt;0x080485ac &amp;lt;+127&amp;gt;:   jmp    0x80485e8 &amp;lt;main+187&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;; -&amp;gt; 来自 0x08048599 &amp;lt;+108&amp;gt; 的跳转&lt;/span&gt;
&lt;span class="x"&gt;0x080485ae &amp;lt;+129&amp;gt;:   mov    0x1c(%esp),%eax          ; \&lt;/span&gt;
&lt;span class="x"&gt;0x080485b2 &amp;lt;+133&amp;gt;:   add    $0x4,%eax                ; | 取得 argv[1]&lt;/span&gt;
&lt;span class="x"&gt;0x080485b5 &amp;lt;+136&amp;gt;:   mov    (%eax),%eax              ; /&lt;/span&gt;
&lt;span class="x"&gt;0x080485b7 &amp;lt;+138&amp;gt;:   mov    %eax,0xc(%esp)           ; ...: argv[1]&lt;/span&gt;
&lt;span class="x"&gt;0x080485bb &amp;lt;+142&amp;gt;:   movl   $0x80486d4,0x8(%esp)     ; | char *format: string &amp;quot;/bin/cat %s&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;0x080485c3 &amp;lt;+150&amp;gt;:   movl   $0x1ff,0x4(%esp)         ; | size_t size: 511&lt;/span&gt;
&lt;span class="x"&gt;0x080485cb &amp;lt;+158&amp;gt;:   lea    0x2c(%esp),%eax          ; |&lt;/span&gt;
&lt;span class="x"&gt;0x080485cf &amp;lt;+162&amp;gt;:   mov    %eax,(%esp)              ; | char *str&lt;/span&gt;
&lt;span class="x"&gt;0x080485d2 &amp;lt;+165&amp;gt;:   call   0x8048410 &amp;lt;snprintf@plt&amp;gt; ; / snprintf(str, 511, &amp;quot;/bin/cat %s&amp;quot;, argv[1]);&lt;/span&gt;
&lt;span class="x"&gt;0x080485d7 &amp;lt;+170&amp;gt;:   lea    0x2c(%esp),%eax&lt;/span&gt;
&lt;span class="x"&gt;0x080485db &amp;lt;+174&amp;gt;:   mov    %eax,(%esp)              ; \&lt;/span&gt;
&lt;span class="x"&gt;0x080485de &amp;lt;+177&amp;gt;:   call   0x80483e0 &amp;lt;system@plt&amp;gt;   ; / system(&amp;quot;/bin/cat filename&amp;quot;);&lt;/span&gt;
&lt;span class="x"&gt;0x080485e3 &amp;lt;+182&amp;gt;:   mov    $0x0,%eax&lt;/span&gt;
&lt;span class="x"&gt;0x080485e8 &amp;lt;+187&amp;gt;:   mov    0x22c(%esp),%edx&lt;/span&gt;
&lt;span class="x"&gt;0x080485ef &amp;lt;+194&amp;gt;:   xor    %gs:0x14,%edx&lt;/span&gt;
&lt;span class="x"&gt;0x080485f6 &amp;lt;+201&amp;gt;:   je     0x80485fd &amp;lt;main+208&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;0x080485f8 &amp;lt;+203&amp;gt;:   call   0x80483c0 &amp;lt;__stack_chk_fail@plt&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;0x080485fd &amp;lt;+208&amp;gt;:   leave&lt;/span&gt;
&lt;span class="x"&gt;0x080485fe &amp;lt;+209&amp;gt;:   ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以看到程序接受一个文件路径，先检查对该文件的访问权限，然后执行 shell 命令 “/bin/cat filename”。&lt;/p&gt;
&lt;p&gt;问题出在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;access&lt;/span&gt;&lt;/code&gt; 函数， man 是这样说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The access() function shall check the file named by the pathname pointed to by the path argument for accessibility according to the bit pattern contained in amode, &lt;strong&gt;using the real user ID in place of the effective user ID and the real group ID in place of the effective group ID.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;而 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;suid&lt;/span&gt;&lt;/code&gt; 权限改变的只是进程的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;euid&lt;/span&gt;&lt;/code&gt;，因此当你执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;./printfile&lt;/span&gt; &lt;span class="pre"&gt;/etc/leviathan_pass/leviathan3&lt;/span&gt;&lt;/code&gt; 的时候，access 函数总是失败的。&lt;/p&gt;
&lt;p&gt;但是用 gdb 改变程序的流程也是&lt;a class="reference external" href="http://unix.stackexchange.com/questions/15911/can-gdb-debug-suid-root-programs"&gt;**不可行**&lt;/a&gt;的，非 root 的 gdb 调试带 suid 权限的程序时，程序不会获得本来应该有的权限（否则 gdb 就可以任意地改变程序的行为了），即使绕过了 access 函数，你依然会得到一个 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Permission&lt;/span&gt; &lt;span class="pre"&gt;denied&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;到这里我就没辙了，只能看别人的 writeup 了：&lt;a class="reference external" href="https://rundata.wordpress.com/2013/03/27/overthewire-leviathan-wargame-solution-2/"&gt;OverTheWire Leviathan Wargame Solution 2&lt;/a&gt;，看完发现脑洞确实不够大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;access() 接受的是个字符串参数，而 cat 的参数却是由 shell 处理的，执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;./printfile&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;flag&lt;/span&gt; &lt;span class="pre"&gt;here&amp;quot;&lt;/span&gt;&lt;/code&gt;，对于 access 函数来说是执行了 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;access(&amp;quot;flag&lt;/span&gt; &lt;span class="pre"&gt;here&amp;quot;,&lt;/span&gt; &lt;span class="pre"&gt;4)&lt;/span&gt;&lt;/code&gt;, 检查对 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flag&lt;/span&gt; &lt;span class="pre"&gt;here&lt;/span&gt;&lt;/code&gt; 这个文件的访问权限，而对 cat 来说是这样的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;system(&amp;quot;cat&lt;/span&gt; &lt;span class="pre"&gt;flag&lt;/span&gt; &lt;span class="pre"&gt;here&amp;quot;)&lt;/span&gt;&lt;/code&gt;，因此可以利用这个区别来绕过 access 函数。&lt;/p&gt;
&lt;div class="highlight-shell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;leviathan2@melinda:/tmp$ mkdir slove
leviathan2@melinda:/tmp$ &lt;span class="nb"&gt;cd&lt;/span&gt; slove
leviathan2@melinda:/tmp/slove$ touch &lt;span class="s1"&gt;&amp;#39;flag here&amp;#39;&lt;/span&gt;    &lt;span class="c1"&gt;# 带空格的文件名&lt;/span&gt;
leviathan2@melinda:/tmp/slove$ ln -s /etc/leviathan_pass/leviathan3 flag
leviathan2@melinda:/tmp/slove$ ls
flag  flag here
leviathan2@melinda:/tmp/slove$ ~/printfile &lt;span class="s1"&gt;&amp;#39;flag here&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# access 检测的是刚刚建立的新文件， cat 显示的则是 flag 和 here&lt;/span&gt;
Ahdiemoo1j
/bin/cat: here: No such file or directory
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;另外发现了一个新工具 ltrace，能够跟踪库函数的调用，就不用像刚才那样分析整个程序了（后面的题目大多数是过一遍 ltrace 就行了）：&lt;/p&gt;
&lt;div class="highlight-shell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;leviathan2@melinda:~$ ltrace ~/printfile /etc/leviathan_pass/leviathan2
__libc_start_main&lt;span class="o"&gt;(&lt;/span&gt;0x804852d, &lt;span class="m"&gt;2&lt;/span&gt;, 0xffffd6f4, 0x8048600 &amp;lt;unfinished ...&amp;gt;
access&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/leviathan_pass/leviathan2&amp;quot;&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;                                       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
snprintf&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/cat /etc/leviathan_pass/lev&amp;quot;&lt;/span&gt;..., &lt;span class="m"&gt;511&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/bin/cat %s&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/etc/leviathan_pass/leviathan2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;39&lt;/span&gt;
system&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/cat /etc/leviathan_pass/lev&amp;quot;&lt;/span&gt;...ougahZi8Ta
 &amp;lt;no &lt;span class="k"&gt;return&lt;/span&gt; ...&amp;gt;
--- SIGCHLD &lt;span class="o"&gt;(&lt;/span&gt;Child exited&lt;span class="o"&gt;)&lt;/span&gt; ---
&amp;lt;... system resumed&amp;gt; &lt;span class="o"&gt;)&lt;/span&gt;                                                            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
+++ exited &lt;span class="o"&gt;(&lt;/span&gt;status &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; +++
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;元旦快乐，希望新的一年不要那么痛苦了。&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/overthewire-leviathan.html" rel="alternate"/>
    <published>2016-01-01T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/get-teeworlds-server-information.html</id>
    <title>获取 teeworlds 服务器信息</title>
    <updated>2016-02-12T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="teeworlds"&gt;

&lt;p&gt;前阵子凤凰卷给 ArchliunxCN 社区开了个 teeworlds 游戏服务器
（什么是 &lt;a class="reference external" href="https://zh.wikipedia.org/wiki/Teeworlds"&gt;teeworlds&lt;/a&gt;？），
然而大家总是凑不到一块玩，于是就琢磨能不能做个查询游戏信息的 IRC bot，
有人进服务器是给个提示，bot 不难做，倒是对如何获取游戏信息没什么思路。&lt;/p&gt;
&lt;p&gt;一开始智商下线地想要在每个客户端套一个脚本，然后由脚本向 bot 报告自己的信息……
于是搞出来这么个东西：&lt;a class="reference external" href="https://github.com/SilverRainZ/teebot-nogood"&gt;teebot-nogood&lt;/a&gt;，
但是在每个人的客户端上都运行这个脚本一点都不现实，
最后我在 teeworlds 的论坛找到了&lt;a class="reference external" href="https://www.teeworlds.com/forum/viewtopic.php?id=7737"&gt;这个帖子&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;帖子里给出了几个 PHP 脚本，可以用来扫描 teeworlds 的 master 服务器信息和单个游戏服务器信息，
分别适用与 0.5 和 0.6 版本的服务端。我不懂 PHP，还好代码很简单，对于单个游戏服务信息的获取，
只要向服务器发送字节串 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x69\x65\x33\x05&lt;/span&gt;&lt;/code&gt;，
服务器就会返回返回包含游戏的数据，我对照着&lt;a class="reference external" href="http://pastebin.com/W0qjxzvr"&gt;其中的一个脚本&lt;/a&gt;
写了个 Python 版本：&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;121.199.73.170&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8303&lt;/span&gt;
&lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x67\x69\x65\x33\x05&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvfrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NULL&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[teeserver]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;recv data:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;map_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;cur_player_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;max_player_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cur_player_num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="n"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;clan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;region&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;region_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;stat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spectator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;player&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;])],&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;从上面的代码就可以看出数据的形式了，没有什么好说的地方，仅仅是想用中文记录下来，
或许以后有人会需要吧。&lt;/p&gt;
&lt;p&gt;上面的代码被我整合进了 &lt;a class="reference external" href="https://github.com/SilverRainZ/teebot"&gt;SilverRainZ/teebot&lt;/a&gt; 里，
如果你在 #archlinux-cn 频道的话，输入 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.tee&lt;/span&gt;&lt;/code&gt; 就能知道现在社区的游戏服务器里有几个人啦。&lt;/p&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/get-teeworlds-server-information.html" rel="alternate"/>
    <published>2016-02-12T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/thinkpad-l450.html</id>
    <title>入手 ThinkPad L450</title>
    <updated>2016-03-11T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="thinkpad-l450"&gt;

&lt;img alt="" src="_images/thinkpad-l450.jpg" /&gt;
&lt;p&gt;元宵的时候，我从师兄手里买下了这台机子，全新，i5 4300U，8G内存，256G SSD，14寸 1366x768 屏幕。
只有 SSD 而没有 HDD 这点颇合我意，毕竟我没有囤积资源的癖好，256G 足矣，而且还能省下一笔 HDD 的钱。
机子在 ebay 上是 ￥3200，到手花了 ￥3700，以国内的价格来算还是值得的。&lt;/p&gt;
&lt;p&gt;之前用的电脑是 Lenove G455，这台 10 年生产的机器陪伴着我姐走过了四年大学，
又在我的高强度使用下度过了大三上学期，现在它终于可以要退役了。这台电脑除了硬盘有点噪音之外，其实一切都运行良好。
单纯做编程的话其实够用，痛点主要是：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;无法用 FlashPlayer 流畅地播放 720P 的视频（当然这和 FlashPlayer 糟糕的性能也有很大关系）；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;跑不起最近的 firefox 和 YCM：Gtk3 版的 FF 的 bugs 还是很多，
虽然平时的 UI 响应似乎比 Gtk2 的时候好了一点，但是打开某些网页的时候还是会完全卡住，
而 YCM 则有时会吃掉我 1G-1.5G 的内存，然而我的内存才 3G，实在是不堪重负。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在一切都没问题了，这样的配置在我这个不太关心硬件的人看来，暂时是够用了。&lt;/p&gt;
&lt;p&gt;ThinkPad 的外观比我想象中还要漂亮一些，塑料外壳摸起来很舒服，
机身还算薄（不插上那个凸起的电池的话），键盘手感也不错。
另外崔土豪说屏幕可以 180 度展开，试了一下果然可以！
说到屏幕…… 1366x768 其实还是低了，仔细看很容易看出像素点来。&lt;/p&gt;
&lt;p&gt;机器预装 Windows 7，尽管我已经不用 Windows 好几个月了，但毕竟是个正版系统，
用了这么多年盗版了，还是洗白一下吧。&lt;/p&gt;
&lt;p&gt;至此，我使用的全部软件，全都是自由软件 &amp;amp; 正版软件啦！&lt;/p&gt;
&lt;p&gt;Win7 可以升级到 10，升级的过程略坎坷，不知道是怪微软的更新服务器好还是怪国内糟糕的网络环境好。
Check Update 一直不动，从官网下载了在线升级器，下完了整个镜像之后死掉了。
最后还是手动从官网下了镜像才装上的。&lt;/p&gt;
&lt;p&gt;装完 Windows 后自然就装 Arch Linux 了，还好磁盘格式是 MBR（一直对 GPT 有莫名的恐惧），
但是机器预装系统的时候已经把四个主分区都占用了 :( ，于是只好把最后的一个不知道是什么的 OS/2 格式的分区删掉，
腾出主分区给 Arch。&lt;/p&gt;
&lt;p&gt;在 &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Beginners'_guide"&gt;Arch Wiki 的光芒照耀下&lt;/a&gt;，
安装过程一切正常。&lt;/p&gt;
&lt;p&gt;装好后尝试了一下 KDE，果然已经不适应了，&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pacman&lt;/span&gt; &lt;span class="pre"&gt;-Rsc&lt;/span&gt;&lt;/code&gt; 之，然后回到 XMoand。&lt;/p&gt;
&lt;p&gt;趁着重新配置的时候更新了一下配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用 aur/ttf-iosevka 代替 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Tsentsiu&lt;/span&gt; &lt;span class="pre"&gt;Mono&lt;/span&gt; &lt;span class="pre"&gt;HG&lt;/span&gt;&lt;/code&gt; 作为编辑器和终端的字体&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 xbindskey 管理快捷键，而不是用 xmoand 的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;additionalKeys&lt;/span&gt;&lt;/code&gt;
（听小药壶说可以用 scheme 来写 .xbindskeyrc）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 terminator 代替 konsole&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 dzen2 + &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:s:`condy`&lt;/span&gt;&lt;/a&gt; conky 代替 xmobar&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/thinkpad-l450.rst&lt;/span&gt;, line 64)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/thinkpad-l450.rst&lt;/span&gt;, line 64); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;需要启动两个 dzen2，一个接受 xmoand 的输出，一个接受 conky 的输出，
需要注意的是 dzen2 &lt;strong&gt;不支持&lt;/strong&gt; 按屏幕的百分比显示，
我在网上找到了&lt;a class="reference external" href="https://github.com/ervandew/dotfiles/blob/master/bin/dzen2"&gt;这个脚本&lt;/a&gt;，
可以从 xrandr 获取屏幕宽度，按指定的比例算出宽度来，我针对我的需要做了一点修改：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/sh&lt;/span&gt;
&lt;span class="c1"&gt;# Author: ervandew&lt;/span&gt;
&lt;span class="c1"&gt;# Source: https://github.com/ervandew/dotfiles/blob/master/bin/dzen2&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Wrapper around dzen2 that allows width and x to be defined as a screen&lt;/span&gt;
&lt;span class="c1"&gt;# percentage.  The percentage width is define via the new &amp;#39;-wp&amp;#39; arg and&lt;/span&gt;
&lt;span class="c1"&gt;# percentage x as -xp, both of which must be supplied before any other dzen&lt;/span&gt;
&lt;span class="c1"&gt;# arguments.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#   $ dzen2 -wp 30 -xp 60 ...&lt;/span&gt;
&lt;span class="c1"&gt;##&lt;/span&gt;

&lt;span class="nv"&gt;external&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^\(VGA\|DVI\|DP\|HDMI\)-\?[0-9]\+&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;internal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^\(eDP\|LVDS\)-\?[0-9]\+&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;connected \(primary \)\?\([0-9]\+\)x.*&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# get internal monitor&amp;#39;s width only&lt;/span&gt;
&lt;span class="c1"&gt;# 仅获取笔记本屏幕的宽度&lt;/span&gt;
&lt;span class="nv"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;xrandr &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; /dev/null &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$internal&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$pattern&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;&amp;quot;s/&lt;/span&gt;&lt;span class="nv"&gt;$internal&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$pattern&lt;/span&gt;&lt;span class="s2"&gt;/\3/&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# width=$(xrandr 2&amp;gt; /dev/null | grep &amp;quot;$external $pattern&amp;quot; | sed &amp;quot;s/$external $pattern/\3/&amp;quot;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-wp&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="s2"&gt; -w `expr &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;expr &lt;span class="nv"&gt;$width&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; / 100`&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-xp&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nv"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="s2"&gt; -x `expr &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;expr &lt;span class="nv"&gt;$width&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; / 100`&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="nb"&gt;shift&lt;/span&gt;
    &lt;span class="nb"&gt;shift&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nv"&gt;FG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#aaaaaa&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;BG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#1a1a1a&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;FONT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-*-terminus-*-r-normal-*-*-110-*-*-*-*-iso8859-*&amp;#39;&lt;/span&gt;

cat - &lt;span class="p"&gt;|&lt;/span&gt; dzen2 &lt;span class="nv"&gt;$arg&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -bg &lt;span class="nv"&gt;$BG&lt;/span&gt; -fg &lt;span class="nv"&gt;$FG&lt;/span&gt; -fn &lt;span class="nv"&gt;$FONT&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;button2=;&amp;#39;&lt;/span&gt; -xs &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;xmonad.hs 那边要这样写：&lt;/p&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;myLogHook&lt;/span&gt; &lt;span class="n"&gt;xmproc&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dynamicLogWithPP&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;defaultPP&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;ppCurrent&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dzenColor&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#87ceff&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#1a1a1a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;pad&lt;/span&gt;
                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppVisible&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dzenColor&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#aaaaaa&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#1a1a1a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;pad&lt;/span&gt;
                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppHidden&lt;/span&gt;  &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dzenColor&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#aaaaaa&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#1a1a1a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;pad&lt;/span&gt;
                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppUrgent&lt;/span&gt;  &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dzenColor&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#ff0000&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#1a1a1a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;pad&lt;/span&gt;
                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppWsSep&lt;/span&gt;   &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppSep&lt;/span&gt;     &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;  |  &amp;quot;&lt;/span&gt;
                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppLayout&lt;/span&gt;  &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dzenColor&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#87ceff&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#1a1a1a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
                                      &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                                        &lt;span class="s"&gt;&amp;quot;Tall&amp;quot;&lt;/span&gt;            &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^i(&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;myBitmapsDir&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/tall.xbm)&amp;quot;&lt;/span&gt;
                                        &lt;span class="s"&gt;&amp;quot;Mirror Tall&amp;quot;&lt;/span&gt;     &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^i(&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;myBitmapsDir&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/mtall.xbm)&amp;quot;&lt;/span&gt;
                                        &lt;span class="s"&gt;&amp;quot;Full&amp;quot;&lt;/span&gt;            &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^i(&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;myBitmapsDir&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/full.xbm)&amp;quot;&lt;/span&gt;
                                        &lt;span class="s"&gt;&amp;quot;Simple Float&amp;quot;&lt;/span&gt;    &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~&amp;quot;&lt;/span&gt;
                                        &lt;span class="kr"&gt;_&lt;/span&gt;                 &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
                                      &lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppTitle&lt;/span&gt;   &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dzenColor&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#1a1a1a&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dzenEscape&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;shorten&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
                    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppOutput&lt;/span&gt;  &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hPutStrLn&lt;/span&gt; &lt;span class="n"&gt;xmproc&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;-- NB: dzen2 DOSEN&amp;#39;T support the option `-wp` and `-wx` (p =&amp;gt; percentage),&lt;/span&gt;
&lt;span class="c1"&gt;-- I use a shell wrapper from https://github.com/ervandew/dotfiles/blob/master/bin/dzen2&lt;/span&gt;
&lt;span class="c1"&gt;-- {bg,fg}color and font are also set by this wrapper&lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="nf"&gt;myBitmapsDir&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/la/.xmonad/dzen2&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;myDzen2Wrapper&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/la/.xmonad/start_dzen2.sh&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;myXmonadBar&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myDzen2Wrapper&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; -wp 70 -h 18 -x 0 -y 0 -ta l&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;myStatusBar&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;conky | &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;myDzen2Wrapper&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; -xp 70 -wp 20 -h 18 -y 0 -ta r&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;xmproc&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;spawnPipe&lt;/span&gt; &lt;span class="n"&gt;myXmonadBar&lt;/span&gt;
    &lt;span class="n"&gt;spawn&lt;/span&gt; &lt;span class="n"&gt;myStatusBar&lt;/span&gt;
    &lt;span class="n"&gt;xmonad&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;defaultConfig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;--  ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;启用了 xmonad 的 smartBorder，这样在不需要边框的时候就不会有讨厌的边框了&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-haskell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;XMonad.Layout.NoBorders&lt;/span&gt;

&lt;span class="nf"&gt;myLayoutHook&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;avoidStruts&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;layoutHook&lt;/span&gt; &lt;span class="n"&gt;defaultConfig&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;xmonad&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;defaultConfig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;--  ...&lt;/span&gt;
    &lt;span class="n"&gt;layoutHook&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smartBorders&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;myLayoutHook&lt;/span&gt;
&lt;span class="c1"&gt;--  ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;受上面那个 dzen2 wrapper 启发，在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.xinitrc&lt;/span&gt;&lt;/code&gt; 里面增加了判断外接屏幕是否存在的脚本：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Dual screens auto dectection&lt;/span&gt;
&lt;span class="nv"&gt;internal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^\(\(eDP\|LVDS\)-\?[0-9]\+\)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;external&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^\(\(VGA\|DVI\|DP\|HDMI\)-\?[0-9]\+\)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;connected \(primary \)\?\([0-9]\+\)x.*&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;inter_scr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;xrandr &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; /dev/null &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$internal&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$pattern&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;&amp;quot;s/&lt;/span&gt;&lt;span class="nv"&gt;$internal&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$pattern&lt;/span&gt;&lt;span class="s2"&gt;/\1/&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;exter_scr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;xrandr &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; /dev/null &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$external&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$pattern&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;&amp;quot;s/&lt;/span&gt;&lt;span class="nv"&gt;$external&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$pattern&lt;/span&gt;&lt;span class="s2"&gt;/\1/&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 笔记本屏幕为主显示器&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$exter_scr&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    xrandr --output &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;exter_scr&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; --auto --output &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;inter_scr&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; --primary --auto --right-of &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;exter_scr&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;使用 pacman 来管理 vim 插件（反正肥猫打包了一切&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;all plugins are managed by pacman&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;community/vim-nerdtree&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;community/powerline-vim&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;community/vim-doxygentoolkit&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;archlinuxcn/vim-fcitx&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;archlinuxcn/vim-youcompleteme-git&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后再贴一张图：&lt;/p&gt;
&lt;img alt="" src="_images/thinkpad-l450-screenshot.png" /&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/thinkpad-l450.html" rel="alternate"/>
    <published>2016-03-11T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/gsoc-2016.html</id>
    <title>GSoC 2016</title>
    <updated>2016-04-23T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="gsoc-2016"&gt;

&lt;p&gt;;-) 难以置信。&lt;/p&gt;
&lt;img alt="" src="_images/gsoc-2016-mail.png" /&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/gsoc-2016.html" rel="alternate"/>
    <published>2016-04-23T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/practical-makefile-for-packaging.html</id>
    <title>编写便于打包的 Makefile</title>
    <updated>2016-06-25T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="makefile"&gt;

&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Note: 这篇文章假设你已经知道基本的 Makefile 编写规则&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#makefile" id="id14"&gt;编写便于打包的 Makefile&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id15"&gt;前言&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id16"&gt;安装图标&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#prefix" id="id17"&gt;PREFIX&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#destdir" id="id18"&gt;DESTDIR&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#configure" id="id19"&gt;Configure&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#archlinux-pkgbuild" id="id20"&gt;编写 Archlinux 的打包脚本 PKGBUILD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id13" id="id21"&gt;参考&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;前言&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;安装基于 make 构建的程序基本上就是两个步骤：&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt;&lt;/code&gt; 然后 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt;，
前者把程序按依赖关系编译，后者把文档、数据、编译出来的二进制安装到系统中。
网络上关于 GNU Make 的教程不少，但似乎都止于「如何用 Makefile 自动编译程序」（&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt;&lt;/code&gt;），
而关于用 Makefile 编写安装脚本（&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt;）的文章却寥寥无几。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;2016-08-10: 经 盖子 提醒，make 本来就不适合做这种事情，于是才有了 autotools
这「更好」的构建工具。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;最近在写 &lt;a class="reference external" href="https://github.com/SilverRainZ/srain"&gt;Srain&lt;/a&gt; 的时候，
算是摸索出了对于 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; 的比较正确的写法：&lt;/p&gt;
&lt;p&gt;首先，对于项目生成产物只是单个可执行文件的情况下，直接在 install 目标里写
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;install&lt;/span&gt; &lt;span class="pre"&gt;-Dm755&lt;/span&gt; &lt;span class="pre"&gt;xxx&lt;/span&gt; &lt;span class="pre"&gt;/usr/bin/xxx&lt;/span&gt;&lt;/code&gt; 就好了。
但是并非所有项目都只包含单个可执行文件，程序可能还包含了 man 文档，icons，
图片，配置文件等，这些都要被安装到文件系统相应的位置上。&lt;/p&gt;
&lt;p&gt;我们先假设项目的结构如下，代码写了什么不重要~&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── build
├── data
│   ├── pixmaps
│   │   └── srain-avatar.png
│   └── icons
│       └── 16x16
│           └── srain-icon.png
├── Makefile
└── srain.c
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;build 是存放编译中间文件和编译出来的二进制文件的地方，srain.c 是主程序代码，
srain-avatar.png 是程序要用到的图片。srain-icon.png 是程序图标。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;安装图标&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于图标，Icon Theme Specification&lt;a class="footnote-reference brackets" href="#fn-icon-theme-spec" id="id4"&gt;1&lt;/a&gt;
规定了图标在文件系统上的位置，程序只需要根据图标的名称（即文件名去掉扩展名）
和大小就可以获得图标文件的路径
（当然要借助各种库函数，比如 gtk 的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gtk_image_new_from_icon_name&lt;/span&gt;&lt;/code&gt;），
因此我们只要将图标文件复制到对应的位置上即可。&lt;/p&gt;
&lt;p&gt;根据上面的 spec，程序寻找图标时应该依次检查 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$HOME/.icons&lt;/span&gt;&lt;/code&gt;、&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$XDG_DATA_DIRS/icons&lt;/span&gt;&lt;/code&gt; 和 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/share/pixmaps&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;参照 XDG Base Directory Specification&lt;a class="footnote-reference brackets" href="#fn-xdg-base-dir-spec" id="id5"&gt;2&lt;/a&gt; 看，
当 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$XDG_DATA_DIRS&lt;/span&gt;&lt;/code&gt; 为空时，&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$XDG_DATA_DIRS&lt;/span&gt;&lt;/code&gt; 会默认为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/local/share/:/usr/share/&lt;/span&gt;&lt;/code&gt;
（感谢 csslayer 指出）。&lt;/p&gt;
&lt;p&gt;因此把图标安装在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/share/pixmaps&lt;/span&gt;&lt;/code&gt;、&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/local/share/icons&lt;/span&gt;&lt;/code&gt; 和 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/share/icons&lt;/span&gt;&lt;/code&gt;
下都是可行的，Arch Linux 偏向于安装在最后一个目录。
于是安装 &lt;em&gt;大小为 16x16 的图标&lt;/em&gt; 的脚本可以这么写：&lt;/p&gt;
&lt;div class="highlight-shell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; data/icons/16x16&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; png in *.png&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        install -Dm644 &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;png&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;DESTDIR&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/usr/share/icons/hicolor/16x16/apps/&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这里先不管 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$(DESTDIR)&lt;/span&gt;&lt;/code&gt; 是什么东西，把它当作空变量即可：&lt;/p&gt;
&lt;div class="highlight-shell notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;install -Dm644 &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;png&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;/usr/share/icons/hicolor/16x16/apps/&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="prefix"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;PREFIX&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;除了图标之外，其他的数据文件应该如何组织？
至少我们应该做到的是：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;保证程序一定能找到数据文件&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一定程度上允许用户自定义安装的位置&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GNU make 提供了 prefix 等变量确定各种文件安装的位置&lt;a class="footnote-reference brackets" href="#fn-prefix" id="id6"&gt;3&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;prefix&lt;/span&gt;&lt;/code&gt; 是下述变量的前缀，默认的 prefix 值应该是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/local&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;exec_prefix&lt;/span&gt;&lt;/code&gt; 是下述变量的前缀，通常和 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;prefix&lt;/span&gt;&lt;/code&gt; 相等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bindir&lt;/span&gt;&lt;/code&gt; 安装可执行文件的位置，其值应为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$(exec_prefix)/bin&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/practical-makefile-for-packaging.rst&lt;/span&gt;, line 108)&lt;/p&gt;
&lt;p&gt;Unexpected possible title overline or transition.
Treating it as ordinary text because it’s so short.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;datarootdir&lt;/span&gt;&lt;/code&gt; 用来安装只读的，架构无关的数据文件，其值应为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$(prefix)/share&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sysconfdir&lt;/span&gt;&lt;/code&gt; 用来安装只读的配置文件，其值应为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$(predix)/etc&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/practical-makefile-for-packaging.rst&lt;/span&gt;, line 112)&lt;/p&gt;
&lt;p&gt;Unexpected possible title overline or transition.
Treating it as ordinary text because it’s so short.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面列出了各种用途的变量，但事实上我们不需要把数据文件分成那么细的粒度。
对于简单的项目，只有 prefix 是必要的，其他路径都可以 hardcode。&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; 可以这么写（为了命名统一，prefix 用大写）：&lt;/p&gt;
&lt;div class="highlight-Makefile notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /usr/local

&lt;span class="nf"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    install -Dm755 &lt;span class="s2"&gt;&amp;quot;build/srain&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/bin/srain&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; data/pixmaps&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; png in *.png&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
            install -Dm644 &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;png&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/share/srain/pixmaps/&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;放置各种文件的规范有了，但程序应该如何找到他的数据文件呢？
用 gcc 的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-D&lt;/span&gt;&lt;/code&gt; 参数声明一个宏，在编译的时候告诉程序的 prefix：&lt;/p&gt;
&lt;div class="highlight-Makefile notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gcc
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; -O2 -Wall
&lt;span class="nv"&gt;DEFS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; -DPACKAGE_DATA_DIR&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;TARGET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; build/srain

&lt;span class="nf"&gt;$(TARGET)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;srain&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;DEFS&lt;span class="k"&gt;)&lt;/span&gt; $^ -o &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在程序中你就可以根据这个宏在获得你的数据文件：&lt;/p&gt;
&lt;div class="highlight-c notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef PACKAGE_DATA_DIR&lt;/span&gt;
&lt;span class="cp"&gt;#define PACKAGE_DATA_DIR &amp;quot;/usr/local&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="n"&gt;gchar&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;get_pixmap_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;gchar&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;gchar&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g_build_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PACKAGE_DATA_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;share&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;srain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pixmaps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g_file_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G_FILE_TEST_EXISTS&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;g_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注意上面的代码使用了 glib 函数库，当指定 prefix 为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr&lt;/span&gt;&lt;/code&gt;，
程序便会从 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/share/srain/pixmaps&lt;/span&gt;&lt;/code&gt; 里寻找图片。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;自行编译安装的程序通常被安装在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr/local&lt;/span&gt;&lt;/code&gt;, 这也是 GNU 推荐的 prefix，
Arch Linux 的包的 prefix 通常是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/usr&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;如上一番设定后，程序经过编译和安装后便可以运行指定的任意目录上了，
你也可以指定为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;$(PWD)/build&lt;/span&gt;&lt;/code&gt; 方便调试。&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;PREFIX=/usr;&lt;/span&gt; &lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;PREFIX=/usr&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; 后，产生的文件如下：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pixmaps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;avatar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;icons&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hicolor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="n"&gt;x16&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;PREFIX=/home/la/tmp;&lt;/span&gt; &lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;PREFIX=/home/la/tmp&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; 则是：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;la&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;la&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pixmaps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;avatar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;icons&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hicolor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="n"&gt;x16&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="destdir"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;DESTDIR&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; 直接将各种文件安装在了目的文件系统上，如果 Makefile 写错的话，
可能对系统造成破坏，直接安装也不利于打包，正确的做法是，由 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt;
得到程序所有文件的列表和路径，再由包管理器把这些文件和路径存为软件包，
安装的时候根据路径把文件放到应该放的位置（这大概就是 Staged Install？）。
（这里感谢青蛙老师 &lt;a href="#id7"&gt;&lt;span class="problematic" id="id8"&gt;:people:`hexchain &amp;lt;https://hexchain.org&amp;gt;`&lt;/span&gt;&lt;/a&gt; 的指导）&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/practical-makefile-for-packaging.rst&lt;/span&gt;, line 198)&lt;/p&gt;
&lt;p&gt;No role entry for “people” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “people” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id7"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/practical-makefile-for-packaging.rst&lt;/span&gt;, line 198); &lt;em&gt;&lt;a href="#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “people”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;变量 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;DESTDIR&lt;/span&gt;&lt;/code&gt;&lt;a class="footnote-reference brackets" href="#fn-destdir" id="id9"&gt;4&lt;/a&gt; 就是用来实现 Staged Install 的，把之前的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; 改成这样：&lt;/p&gt;
&lt;div class="highlight-Makefile notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /usr/local
&lt;span class="nf"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    install -Dm755 &lt;span class="s2"&gt;&amp;quot;build/srain&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;DESTDIR&lt;span class="k"&gt;)$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/bin/srain&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; data/pixmaps&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; png in *.png&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
            install -Dm644 &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;png&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;DESTDIR&lt;span class="k"&gt;)$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/share/srain/pixmaps/&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注意 DESTDIR 变量只应该作用在 install 阶段，&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;PREFIX=/usr;&lt;/span&gt; &lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;PREFIX=/usr&lt;/span&gt; &lt;span class="pre"&gt;DESTDIR=/tmp/&lt;/span&gt;&lt;/code&gt;
会把所有文件都安装在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/tmp&lt;/span&gt;&lt;/code&gt; 下， 所有的影响都被限制在该目录内。这次生成的文件应该是：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pixmaps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;avatar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;icons&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hicolor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="n"&gt;x16&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;srain&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;之后再由包管理器把这些文件打成包，安装到系统中。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Configure&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的 Makefile 有处不优雅的地方是，&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt;&lt;/code&gt; 和 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt;&lt;/code&gt; 的时候必须指定相同的 PREFIX，
不然安装后的程序肯定是运行不了的，而 make 本身并不能解决这个问题，因为 make 是「无状态」的。&lt;/p&gt;
&lt;p&gt;这里&lt;a class="footnote-reference brackets" href="#fn-practical-makefiles" id="id10"&gt;5&lt;/a&gt;提供了一个脚本来让解决这个问题，将 Makefile 改名为 Makefile.in，
运行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;./configure&lt;/span&gt; &lt;span class="pre"&gt;--prefix=xxx&lt;/span&gt;&lt;/code&gt; 来获得一个拥有指定 prefix 的 Makefile，
这样就可以不用每次敲 make 都输入 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PREFIX=xxx&lt;/span&gt;&lt;/code&gt; 了。&lt;/p&gt;
&lt;p&gt;&lt;a href="#id11"&gt;&lt;span class="problematic" id="id12"&gt;:s:`于是大家都去用 autotools 了`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/practical-makefile-for-packaging.rst&lt;/span&gt;, line 238)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id11"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/practical-makefile-for-packaging.rst&lt;/span&gt;, line 238); &lt;em&gt;&lt;a href="#id12"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="highlight-sh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local

&lt;span class="k"&gt;for&lt;/span&gt; arg in &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; in
    --prefix&lt;span class="o"&gt;=&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/--prefix=//&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt;

    --help&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;usage: ./configure [options]&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;options:&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;  --prefix=&amp;lt;path&amp;gt;: installation prefix&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;all invalid options are silently ignored&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;generating makefile ...&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PREFIX = &lt;/span&gt;&lt;span class="nv"&gt;$prefix&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt;Makefile
cat Makefile.in &amp;gt;&amp;gt;Makefile
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;configuration complete, type make to build.&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如上，执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;./configure&lt;/span&gt; &lt;span class="pre"&gt;--prefix=/usr&lt;/span&gt;&lt;/code&gt; 就会把 Makefile.in 复制为 Makefile，并在
Makefile 最前面加上一句 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PREFIX&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;/usr&lt;/span&gt;&lt;/code&gt;（实际操作顺序是反过来的你们懂就好）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="archlinux-pkgbuild"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;编写 Archlinux 的打包脚本 PKGBUILD&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这样的一个项目打包起来是很愉快的 :)&lt;/p&gt;
&lt;div class="highlight-sh notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;pkgname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;srain

...
build&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    mkdir build &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
    ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr
    make
&lt;span class="o"&gt;}&lt;/span&gt;

package&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    make &lt;span class="nv"&gt;DESTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$pkgdir&lt;/span&gt; install
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;完整的脚本请见：&lt;a class="reference external" href="https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=srain"&gt;srain.git - AUR Package Repositories&lt;/a&gt;，
可能稍有出入。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;参考&lt;/a&gt;&lt;/h2&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="fn-icon-theme-spec"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id4"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html"&gt;Icon Theme Specification&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fn-xdg-base-dir-spec"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id5"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#Environment%20variables"&gt;XDG Base Directory Specification#Environment variables&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fn-prefix"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id6"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/prep/standards/html_node/Directory-Variables.html"&gt;GNU Coding Standards#Variables for Installation Directories&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fn-destdir"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id9"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/prep/standards/standards.html#DESTDIR"&gt;GNU Coding Standards#DESTDIR: Support for Staged Installs&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="fn-practical-makefiles"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="#id10"&gt;5&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="http://nuclear.mutantstargoat.com/articles/make"&gt;Practical Makefiles, by example&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/practical-makefile-for-packaging.html" rel="alternate"/>
    <published>2016-06-25T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/gsoc-2016-sum-up.html</id>
    <title>GSoC 2016 小记 - 误打误撞三个月</title>
    <updated>2016-09-29T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="gsoc-2016"&gt;

&lt;p&gt;这是一篇拖了一个月的流水帐……&lt;/p&gt;
&lt;p&gt;谷歌编程之夏（Google Summer of Code/GSoC）是 Google 举办的年度编程活动，
征集学生为开源社区编写代码，时间持续三个月，成功完成项目的学生可以得到 Google
$5500 的报酬，同时开源社区也能得到 $500 的赞助。&lt;/p&gt;
&lt;img alt="GSoC 2013 Project" src="_images/gsoc-2016-proj.png" /&gt;
&lt;p&gt;我有幸参加了 2016 年的 Google Summoer of Code，为 GNU/Hurd 项目工作并完成预期目标，
在此记录。&lt;/p&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#gsoc-2016" id="id16"&gt;GSoC 2016 小记 - 误打误撞三个月&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#proposal" id="id17"&gt;从写 Proposal 到放弃&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#welcome-to-gsoc-2016" id="id18"&gt;Welcome to GSoC 2016!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#community-bonding" id="id19"&gt;焦虑的 Community Bonding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id11" id="id20"&gt;编程之夏&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id12" id="id21"&gt;夏日的怠惰尾声&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id13" id="id22"&gt;总结&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id14" id="id23"&gt;相关链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="proposal"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;从写 Proposal 到放弃&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;三月初的时候在 #archlinux-cn 听 &lt;a class="reference internal" href="about/friends.html#friend-quininer" title="quininer friend"&gt;&lt;code class="xref any any-friend docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;#64;quininer&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 说今年 Tox
社区要参加 GSoC 并开始招人的事情， &lt;a href="#id2"&gt;&lt;span class="problematic" id="id3"&gt;:s:`当然也提及了 Tox 去年闹出的一桩事：`&lt;/span&gt;&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/irungentoo/toxcore/issues/1379"&gt;Current situation of Tox #1379&lt;/a&gt;
这时候我才知道 GSoC 的存在。简单在网上搜索了一下，正好大三下学期也基本没课了，
便萌生了要试试的想法。&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/gsoc-2016-sum-up.rst&lt;/span&gt;, line 29)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id2"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/gsoc-2016-sum-up.rst&lt;/span&gt;, line 29); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;参与的学生需要在 &lt;a class="reference external" href="http://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt; 上注册，
并寻找你心仪的 organization，并在网站上针对 organization 的某个项目提交提案（Proposal），
这些组织一般都是著名的开源社区，比如 GNU、Linux Fundation、GNOME、KDE、Wine、Apache 等等。
Proposal 用来告诉社区你为什么认为自己能胜任这个项目，将如何做这个项目，以及你的时间安排等，
有些社区会提供一些 proposal 模板，告知你一些必须回答的问题。 一个学生可以提交至多五份提案。&lt;/p&gt;
&lt;p&gt;于是开始挑 organization，因为我比较熟悉的语言就只有 C，写过 toy kernel 和 GTK 程序，
因此最后敲定了两个组织： GNU 和 GNOME，前者有 Hurd 内核项目，后者用 GTK 框架写程序，
大概能算是我比较擅长的部分吧。&lt;/p&gt;
&lt;p&gt;接着开始在网上找资料写 proposal，上了一下 #hurd 频道打了一下招呼，然后就没有然后了……
看到其他人写的 proposal 和网上的描述，开始觉得 GSoC 以我的能力是参加不了的，
于是一字未写，在心里默默跟自己说放弃好了。&lt;/p&gt;
&lt;p&gt;到了 3 月 23 号，那天早上不知道为什么突然来了劲儿，决定只报一个项目：
GNU/Hurd 的 &lt;a class="reference external" href="https://www.gnu.org/software/hurd/community/gsoc/project_ideas/xattr.html"&gt;Implement xattr Support&lt;/a&gt;。
在当天早上把 proposal 写好并马上提交了最终版…… 然后给学生证拍了张照片作为入学证明上传。&lt;/p&gt;
&lt;p&gt;3 月 29 号，被邮件告知「Your GSoC 2016 Proof of Enrollment form was rejected because:
not english/missing translation.」，仅仅拍学生证不够，还需要加上写英文说明，
当时我的想法是，反正 proposal 也过不了，于是没搭理邮件。&lt;/p&gt;
&lt;p&gt;4 月 7 号，在我没有采取任何行动的情况下，Google 又发邮件说 Proof of Enrollment
已经通过验证了…… :-| 大概是找了华人员工来审核的吧，当时心理暗想 Google
的工作人员真的好负责啊……&lt;/p&gt;
&lt;p&gt;再往后，每天跟着舍友去图书馆，写还当时未成型的 &lt;a class="reference external" href="https://github.com/SilverRainZ/srain"&gt;Srain&lt;/a&gt;，
其间有 GNU 的成员在我的 proposal 上留言评论……我也没去回复，
渐渐把这件事忘记了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="welcome-to-gsoc-2016"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;Welcome to GSoC 2016!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;4 月 23 号，刚起床看到有封邮件，&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;GSoC 2016: Congratulations, your proposal with GNU Project has been accepted!&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;觉得有点激动又难以置信，还特意发了篇&lt;a class="reference internal" href="blog/gsoc-2016.html"&gt;&lt;span class="doc"&gt;博客&lt;/span&gt;&lt;/a&gt;得瑟了一下。&lt;/p&gt;
&lt;p&gt;接下来就根据邮件的要求：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;看&lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/help/accepted-students"&gt;学生须知&lt;/a&gt;，&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上传税务表（Tax form），国外的学生只需要下载
&lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/help/images/foreign-certification.pdf"&gt;Foreign Certification Form&lt;/a&gt;
打印出来签名扫描上传便好&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注册 Payoneer 帐号设置收款账户 :-D&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完善个人信息&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做完以上事情后，GSoC 就可以正式开始了，从 4 月 23 号到 5 月 22 号是 Community
Bonding Period，用来和社区成员交流，配置开发环境，熟悉工作流程等。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="community-bonding"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;焦虑的 Community Bonding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hurd 当前的开发者基本在欧洲，我的两位 mentor：
&lt;a href="#id5"&gt;&lt;span class="problematic" id="id6"&gt;:people:`Richard Braun &amp;lt;https://www.sceen.net/~rbraun/resume.pdf&amp;gt;`&lt;/span&gt;&lt;/a&gt; 和
:people:&lt;a href="#id7"&gt;&lt;span class="problematic" id="id8"&gt;`&lt;/span&gt;&lt;/a&gt;Justus Winter &amp;lt;&lt;a class="reference external" href="https://github.com/teythoon"&gt;https://github.com/teythoon&lt;/a&gt;&amp;gt; 也是，
由于时区相差太大，一般在下午五点以后跟他们用 IRC 联系。&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/gsoc-2016-sum-up.rst&lt;/span&gt;, line 93)&lt;/p&gt;
&lt;p&gt;No role entry for “people” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “people” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id5"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/gsoc-2016-sum-up.rst&lt;/span&gt;, line 93); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “people”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id7"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/gsoc-2016-sum-up.rst&lt;/span&gt;, line 93); &lt;em&gt;&lt;a href="#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inline interpreted text or phrase reference start-string without end-string.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在同 mentor 们联系之后，我开始看 Hurd 的&lt;a class="reference external" href="https://www.gnu.org/software/hurd/index.html"&gt;文档&lt;/a&gt;，
作为一个除了开发者之外几乎没人用的系统 :-( ……除了 Wiki 之外没有任何参考的资料，
甚至项目中的文档也是严重过期的。&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/gsoc-2016-sum-up.rst&lt;/span&gt;, line 3); &lt;em&gt;&lt;a href="#id10"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “implement xattr support”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我的项目是 &lt;a class="reference external" href="https://www.gnu.org/software/hurd/community/gsoc/project_ideas/xattr.html"&gt;Implement xattr Support&lt;/a&gt;：
在 Hurd 的 ext2 文件系统上（是的，Hurd 依然在用 1993 年发明的的文件系统 :-(）
上实现文件扩展属性（Extended file attributes/xattr），xattr 是一种文件系统的特性，
能为磁盘上的文件添加键值对（Key/Value pair），文件之于 xattr，类似进程之于环境变量。
并使用 xattr 来储存 Hurd 所需的元信息。&lt;/p&gt;
&lt;p&gt;Hurd 并不是一个内核，而只是一套微内核守护进程，真正的内核是 GNU Mach，
大部分的功能都使用 translator 实现在用户态。&lt;/p&gt;
&lt;p&gt;Translator 是一类程序，相当于一个 Server，translator 需要与一个文件绑定，
用户通过访问这个文件来实现对 Server 的请求，如下：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ touch hello
$ cat hello
$ settrans hello /hurd/hello
$ cat hello
&amp;quot;Hello World!&amp;quot;
$ settrans -g hello
$ cat hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Translator 分为 passive translator 和 active translator，passive translator
只是一个命令行，储存在磁盘中，当该文件首次被访问时执行，在我实现 xattr 之前，
passive translator 一直是简单地储存在一个临时申请的块中（这就是 Hurd 需要 xattr
的原因：用更通用的方式来储存 passive translator）。&lt;/p&gt;
&lt;p&gt;ext2 文件系统的 translator 叫做 ext2fs，位于 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/hurd&lt;/span&gt;&lt;/code&gt; 目录下，我的全部工作，就是
为 ext2fs 的代码添加 xattr 支持，因此，虽说是内核项目，但是全过程都在用户态下进行。&lt;/p&gt;
&lt;p&gt;这些东西也都是后来才慢慢知道的，一开始我只是埋头看文档，Hurd is not Linux，
很多概念都和 Linux 差别极大……我本来的英文就很差，效率也不行，越看越乱，
每天都坐在电脑前配合着 Google 翻译看文档，一天八九个小时下来，
集中精神看的时间可能不到十分之一，Braun 每天都会询问我进度，我又支支吾吾说不出来。&lt;/p&gt;
&lt;p&gt;有时候会遇到些看不懂的句子，问 mentor 们的时候又因为英文问题而交流不畅，那时候真恨不得
自己变成个外国人。&lt;/p&gt;
&lt;p&gt;那时候我开始觉得到我可能胜任不了这份工作，GSoC 每年大概有近 10% 的学生无法完成任务（Fail），
我会是那 10 % 么？&lt;/p&gt;
&lt;p&gt;这样焦虑的日子持续了一两个星期，终于有一天在讨论 Hurd 中 port 的概念时，Braun 说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;“i think next years, we’ll make sure students understand this before they get accepted,
as part of the communit bonding period”&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;这个时候再不行动，被 fail 就是可预见的未来了，我已经没有心情和自制力去继续看文档了，
还是直接写代码吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;不过，看文档的这段时间虽然很痛苦，但是也不是没收获，我从中了解到了一些 micro kernel
的概念，并且也不再像以前那样害怕英文文档了。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;编程之夏&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;大概从 5 月 18 号开始，我从无脑看文档转为写代码， 写代码比看文档愉快多了 ——
这大概也是我编程能力止步不前的原因吧，瞎写代码不看书。
mentor 们显然对我之前看文档表现出来的低下的效率和理解力很不满意，但依然对我的问题有问必答。&lt;/p&gt;
&lt;p&gt;其实 Hurd 在  06 年的时候就有人提交过 xattr 的 patch：&lt;a class="reference external" href="https://savannah.gnu.org/patch/?5126"&gt;GNU Savannah patch #5126&lt;/a&gt;，
当然那个 patch 很不完善（于是就这样搁置了 10 年吗 orz），到现在更是完全跑不起来了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;所以其实项目的最小目标就是：把这个 patch 修好 —— 当然这是后话了，那时候我不知道项目原来这么简单……&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;于是我开始修 patch，参照 ext2fs 的其他代码，把旧函数用新函数替代，
把能看懂的地方看懂，加上注释，看不懂的地方标注出来，在接口代码上打洞，
方便从外部测试这些代码。&lt;/p&gt;
&lt;p&gt;修完之后便参考 &lt;a class="reference external" href="http://www.nongnu.org/ext2-doc/ext2.html#CONTRIB-EXTENDED-ATTRIBUTES"&gt;The Second Extended File System&lt;/a&gt;
和 &lt;a class="reference external" href="http://lxr.free-electrons.com/source/fs/ext2/xattr.c"&gt;Linux Kernel&lt;/a&gt; 的代码，
修正原来代码中的 Bug，补全缺失的 xattr 函数。&lt;/p&gt;
&lt;p&gt;写代码比起看文档有实实在在的产出，也就有东西向 mentor 们汇报了，相比他们对我的评价也有所上升，
从 5 月 18 号到 7 月 4 号，我完成了大部分的功能并进行了调试，实现并导出了如下四个函数：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="n"&gt;列出节点的所有&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;error_t&lt;/span&gt; &lt;span class="n"&gt;ext2_list_xattr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="n"&gt;获取节点指定&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;的值&lt;/span&gt; &lt;span class="o"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;error_t&lt;/span&gt; &lt;span class="n"&gt;ext2_get_xattr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="n"&gt;设置节点指定&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;的值&lt;/span&gt; &lt;span class="o"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;error_t&lt;/span&gt; &lt;span class="n"&gt;ext2_set_xattr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="n"&gt;删除储存&lt;/span&gt; &lt;span class="n"&gt;xattr&lt;/span&gt; &lt;span class="n"&gt;信息的块&lt;/span&gt; &lt;span class="o"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;error_t&lt;/span&gt; &lt;span class="n"&gt;ext2_free_xattr_block&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;5 月 18 号到 6 月 28 号，这段时间每天都保持着 6-7 * 6 个小时的工作时长，
用这么长时间是为了弥补我的低下的工作效率…… 6 月 28 日后，由于脑残学院的规定，
我不得不离开宿舍到一个恶心的培训公司实训，并在那个公司度过了大量不愉快的时间，
详情不表。我从来没有这么讨厌过自己的学校，待我毕业后一定要上知乎狠狠撕一下这个愚蠢的实训制度。#FLAG&lt;/p&gt;
&lt;p&gt;这段时间的代码都提交在
&lt;a class="reference external" href="https://github.com/SilverRainZ/hurd/tree/gsoc-2016-xattr"&gt;SilverRainZ/hurd at gsoc-2016-xattr&lt;/a&gt; 上。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;夏日的怠惰尾声&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;就如同上面所说的，只要修好这个 patch 并补全 xattr 的功能，项目就算完成了，
「GSoC 原来这么水啊……」，我开始产生了这种想法，一旦完成了最小目标，我就开始松懈，
在接下来的时间我更多地把精力放在了 Srain 的开发上。&lt;/p&gt;
&lt;p&gt;对于 GSoC 那边，仅仅是整理了代码和 commit 并再次测试，两位 mentor 对我后期的怠惰倒是没什么意见，
虽然我本来可以做更多的…… 预期的目标是在实现 xattr 之后实现 libdiskfs
（文件系统 translator 库，类似 vfs）以及 libc 接口，并把 xattr 的一系列工具 port 过来：
这些最后都因为我的懒惰而没有动手。&lt;/p&gt;
&lt;p&gt;这段时间我也不再天天挂在 IRC 上，而是每隔两三天上一次，mentor 们也没有向我询问进度，
反而是我一直在催他们 review 我的代码，征求他们的建议。他们似乎很忙，总体来看并没有积极地
reivew，这让我有点失望。但建议还是收到一些的，改了一些关于兼容旧 passive translation
的代码，apply 了几个 justus 的小 patch。&lt;/p&gt;
&lt;p&gt;摸鱼的日子一天天过去，迎来了 final evaluations，根据 mentor 的指导写了 GNU style 的
changelog，把整理好的两个 patch 发给他们，并写了一封总结邮件
&lt;a class="reference external" href="http://lists.gnu.org/archive/html/bug-hurd/2016-08/msg00075.html"&gt;[GSoC] Implement xattr Support Update&lt;/a&gt;
到 Hurd 的邮件列表。接着又到 GSoC 的网站上完成了 final evaluations。&lt;/p&gt;
&lt;p&gt;8 月 30 号，收到了 GSoC 完成的通知，结束了这个不算完美的夏天。&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;总结&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我之所以能被 accept，和我的选择是有密切关系的：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;内核项目门槛稍高&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hurd 是冷门（想也知道）项目，&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement xattr Support 是比较重要的项目&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;申请的学生里之前普遍没有参与过 Hurd 的开发&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，和我竞争的学生大概只有 6、7 位，Hurd 最终 accept 了两位学生，除我之外，
另一位是 &lt;a class="reference external" href="https://github.com/Phant0mas"&gt;Phant0mas&lt;/a&gt;，去年的 GSoC 也为 Hurd
贡献了代码，我觉得如果申请的学生中存在本项目的开发者的话，其他人大概都没什么戏。
当时在选择 Hurd 的时候，其实也怀着「冷门项目大概没什么人报吧」这样的想法。&lt;/p&gt;
&lt;p&gt;对于这次的 GSoC，我不满意，自己的参与度不够，一方面受制于自己的英语水平，
一方面自己依然没办法打败自己 —— 自制力太低，效率太低。导致我最终仅仅是名义上地完成了项目，
没有继续贡献社区，也没有交到什么朋友，甚至连自己的代码能不能 merge 到主线都说不准。&lt;/p&gt;
&lt;p&gt;在这其间我收到了 Google 的三笔付款 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;3234.86&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;14635.59&lt;/span&gt; &lt;span class="pre"&gt;+&lt;/span&gt; &lt;span class="pre"&gt;17959.75&lt;/span&gt;&lt;/code&gt; 总计 35830.2 元，
一只圆珠笔，一本本子，一封 PDF 形式的电子证书，还有一件还在路上的 T-shirt，
物质收入颇丰。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;相关链接&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://summerofcode.withgoogle.com/"&gt;GSoC 官网&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/software/hurd/hurd.html"&gt;Hurd 官网&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://summerofcode.withgoogle.com/archive/2016/projects/5786848613892096"&gt;我的项目链接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/SilverRainZ/gsoc-2016"&gt;Patch 和脚本&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/SilverRainZ/hurd"&gt;我的 Hurd fork&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/gsoc-2016-sum-up.html" rel="alternate"/>
    <published>2016-09-29T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/use-sphinx-and-rst-to-manage-your-notes.html</id>
    <title>用 Sphinx + reStructuredText 构建笔记系统</title>
    <updated>2017-03-29T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="sphinx-restructuredtext"&gt;

&lt;p&gt;前几天把个人笔记从 GitBook 迁移到了 Sphinx 上，并在 &lt;a class="reference external" href="http://readthedocs.io/"&gt;Read The Docs&lt;/a&gt;
上发布，地址是 &lt;a class="reference external" href="http://notes.silverrainz.me"&gt;notes.silverrainz.me&lt;/a&gt;，旧域名在过期前也同样有效。&lt;/p&gt;
&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#sphinx-restructuredtext" id="id8"&gt;用 Sphinx + reStructuredText 构建笔记系统&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id2" id="id9"&gt;前言&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#node-js" id="id10"&gt;为什么我不喜欢 Node.js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#markdown-vs-restructuredtext" id="id11"&gt;Markdown vs reStructuredText&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#sphinx" id="id12"&gt;Sphinx 简介&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#markdown-restructuredtext" id="id13"&gt;将 Markdown 笔记转化为 reStructuredText&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#shpinx" id="id14"&gt;Shpinx 的安装和使用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id5" id="id15"&gt;组织和索引&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id6" id="id16"&gt;使用 Read The Docs 发布&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;前言&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;GitBook 是一个用于发布书籍的平台，允许你用 Markdown 编写书籍并使用 git 仓库管理，
还能通过这个平台发布到网络上，GitBook 同时也是 Gitbook 平台推出的书籍生成工具的名字。&lt;/p&gt;
&lt;p&gt;去年十月的的时候我开始用 GitBook + Markdown 维护自己的一些零碎的笔记。
为此在 Arch Linux 打包了 &lt;a class="reference external" href="https://aur.archlinux.org/packages/nodejs-gitbook/"&gt;nodejs-gitbook&lt;/a&gt;，
又写了一个自动生成目录摘要的 &lt;a class="reference external" href="https://github.com/SilverRainZ/dotfiles/blob/master/bin/gitbook-summary"&gt;小脚本&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;为什么现在我又迁移到 Sphinx + reStructuredText 呢？因为：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;GitBook 是 Node.JS 写的&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Markdown 无法适应稍微复杂的写作场景&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="node-js"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;为什么我不喜欢 Node.js&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我不知道 Node.js 开发者为何如此热衷于用它来造各种轮子甚至用来写各种本地应用。
Node 的包管理器 npm 会将一个应用的所有依赖都安装在项目目录下。
每个应用的依赖都是独立的 —— 这对部署来说很方便。并且 npm 的分包粒度相当细，
随便装个包都能带上几百个依赖，连一个字符串的 leftpad 函数都可以单独作为一个包。
去年愚人节的时候，&lt;a class="reference external" href="https://www.npmjs.com/package/left-pad"&gt;这个梗&lt;/a&gt;都玩得很开心……&lt;/p&gt;
&lt;p&gt;因此 Linux 发行版的打包者要打包一个 Node 包，就得打包并维护它附带的成百上千
的依赖，或者直接将包本身和依赖打在一起，代价就是要更新其中一个依赖就得更新整个包
以及接受系统中的文件重复。总之，Node.js 的打包只能在麻烦和冗余两者之间作出选择。
听说 openSUSE 社区还写了一套工具专门用来从多如牛毛的 npm 包自动生成 rpm 包。&lt;/p&gt;
&lt;p&gt;当然对于 Arch Linux 社区，肯定是拿起一把梭就干，即使是官方源的包也都是：&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install -g --user root --prefix &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$pkgdir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;/usr &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$srcdir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;/&lt;span class="nv"&gt;$pkgname&lt;/span&gt;-&lt;span class="nv"&gt;$pkgver&lt;/span&gt;.tgz
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;依赖什么的？不管，例行公事地从 source 下载要安装的包，依赖的什么完全由 npm 处理。&lt;/p&gt;
&lt;p&gt;于是我打包的 nodejs-gitbook （事实上还包含了 nodejs-gitbook-cli）足足有 2w+
个文件，我仿佛看到无数细碎的 Javascript 脚本在我的 SSD 上蠕动……&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ la @ la-arch 10:35 -&amp;gt; ~
$ pacman -Ql nodejs-gitbook | wc -l
23009
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;相比之下 python-sphinx 清爽多了：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/ la @ la-arch 21:27 -&amp;gt; ~
$ pacman -Ql python-sphinx | wc -l
922
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;除去打包上的槽点，nodejs-gitbook 这工具的使用体验也是相当差：目录文件 SUMMARY.md
需要自己手动写；在我 i5 + 8G + SSD 的电脑上生成一本有 24 个 md 文件的书籍需要 &lt;strong&gt;8.6 秒&lt;/strong&gt;
—— 它似乎并没有办法 incremental build；&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gitbook&lt;/span&gt; &lt;span class="pre"&gt;serve&lt;/span&gt;&lt;/code&gt; 命令能在本地启动一个 HTTP Server
预览书籍，并且文件改变的时候网页会自动刷新，这很赞，可是你为什么没告诉我每次文件改动
都要 &lt;strong&gt;重载所有插件，重启 HTTP Server 并且所有的文件重新生成一遍&lt;/strong&gt; 呢？于是每次改动后你
需要十多秒后才能够「实时预览」。&lt;/p&gt;
&lt;p&gt;以上所述的问题针对 GitBook 3.2.1 及以下版本。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="markdown-vs-restructuredtext"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Markdown vs reStructuredText&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Markdown 是啥这里就不说了……Markdown 的问题在于它太轻又没有一个统一的标准。
因此各个社区都自顾自地实现了一套自己的方言，同样是叫 Markdown，
你在这里可以显示的内容，换了一个地方就打回原型。
当然你可以选择使用这些方言里面所共有的语法，而这点语法可能只够在论坛回回帖用。&lt;/p&gt;
&lt;p&gt;目前最流行的 Markdown 方言应该是 GFM(GitHub Flavored Markdown) 了，
但即使你坚持只用 GFM 编写你的文档，你依然会遇到问题：
不同的 GFM 的实现存在细节上的差异。声明标题的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#&lt;/span&gt;&lt;/code&gt; 后面需要空格么？
加粗字体的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;**&lt;/span&gt;&lt;/code&gt; 左右需要空格隔开么？直接跟非符号的文字会有问题么，
Unicode 的文字和符号能被分清么？在不将文件生成为 HTML 之前，你很难知道你的文档是
什么样子。&lt;/p&gt;
&lt;p&gt;另，程序员是 Markdown 的主要使用群体，而 Markdown 居然使用「在行末空两格」
作为换行标记，trailing whitespace 怎么能忍呢……（这个貌似是扩展语法）&lt;/p&gt;
&lt;p&gt;reStructuredText 同样是轻量标记语言的一种，Python Docutils 是其主要实现，
reStructuredText 的语法稍微复杂了一点，具体可以看
&lt;a class="reference external" href="http://zh-sphinx-doc.readthedocs.io/en/latest/rest.html"&gt;reStructuredText 简介&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;相对于 Markdown，reStructuredText：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;提供了更丰富的语法元素：原生 Markdown 并不能调整插图大小，不支持表格（GFM 支持），
不支持脚注，引用，注释 —— 当然这些 reStructuredText 都支持&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对格式的要求更高：我所见过 Markdown 渲染器对待 Mardkown 的态度和浏览器对于
HTML 类似，在处理无法识别的语法的时候会选择忽略。而 Docutils 在遇到未知语法的时候会报错。
因此 Markdown 用户可能需要多次的预览文档来排错，而 reStructuredText 用户可以从报错获得
出现错误的位置&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有更统一的实现：这一点貌似不太公平，因为 Markdown 的实现众多，而 reStructuredText
貌似就只有 Docutils 了？但实际上 reStructuredText 的标准也比 Markdown 明确得多&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在语法上提供了扩展的途径。而 Markdown 并没有，通用的扩展方法是在文档里插入 HTML 标签……&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就我所知， reStructuredText 有两种支持扩展的语法： 解释文本（Interpreted Text）
和 指令（Directives）。&lt;/p&gt;
&lt;p&gt;在 reStructuredText 中，用单个反引号 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;`&lt;/span&gt; &lt;span class="pre"&gt;``&lt;/span&gt; &lt;span class="pre"&gt;包围的字符串称为&lt;/span&gt;
&lt;span class="pre"&gt;`Interpreted&lt;/span&gt; &lt;span class="pre"&gt;Text&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#interpreted-text&amp;gt;`_&lt;/span&gt;
&lt;span class="pre"&gt;，反引号中的内容根据角色（Role）有不同解释方式。Role&lt;/span&gt; &lt;span class="pre"&gt;由冒号&lt;/span&gt; &lt;span class="pre"&gt;``:&lt;/span&gt;&lt;/code&gt; 包围，可以位于
Interpreted Text 的前后。reStructuredText 利用 Interpreted Text 实现了不少的内联标记。比如：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:emphasis:`text` 等价于 *text*
:strong:`text` 等价于 **text**
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Interpreted Text 只能作为行内元素使用（无法跨行），而
&lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#explicit-markup-blocks"&gt;Explicit Markup&lt;/a&gt;
。作用的对象则是文本块。Explicit Mark 以在行首的两个句号 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;..&lt;/span&gt;&lt;/code&gt; 开始，后跟一个空格，
接下来的行保持相同缩进，直到文本块结束。&lt;/p&gt;
&lt;p&gt;Explicit Markup 被用来实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;脚注：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;这是脚注&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#f1]_ ，这也是脚注 [#f2]_ 。&lt;/span&gt;

&lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#f1] 第一条脚注的文本.&lt;/span&gt;
&lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;#f2] 第二条脚注的文本.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引用：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;这篇笔记参考了&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;reStructuredText&lt;/span&gt; &lt;span class="n"&gt;简介&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;reStructuredText&lt;/span&gt; &lt;span class="n"&gt;简介&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;zh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sphinx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readthedocs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;显式的超链接：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;这是一个 `标题`_

.. _标题: http://silverrainz.me
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指令（Directives）是 reStructuredText 的又一扩展机制：插入图片，
代码声明等语法均由 Directives 实现，和 Role 一样，指令可以被开发者定义。
指令名后跟两个冒号，冒号后是参数。在新的一行里可以指定选项，选项由 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:&lt;/span&gt;&lt;/code&gt; 包围，
后跟选项值。选项之后还可能有文本块。&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.. 能够指定高宽，alt 文本，对齐的图片，比 Markdown 不知道高到哪里去了~
.. image:: picture.jpeg
    :height: 100px
    :width: 200 px
    :scale: 50 %
    :alt: alternate text
    :align: right
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sphinx"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Sphinx 简介&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sphinx 是 Georg Brandl 用 Python 编写的文档创建工具，以 BSD 协议开源，使用
reStructuredText 作为标记语言。Sphinx 被用来编写 &lt;a class="reference external" href="https://docs.python.org/"&gt;Python 的官方文档&lt;/a&gt;。
去年 6 月的时候，&lt;a class="reference external" href="https://lwn.net/Articles/692704/"&gt;Linux Kernel 也开始使用 Sphinx + reStructuredText 管理内核文档&lt;/a&gt;。
这里有一个使用 Sphinx 创建文档的项目列表：&lt;a class="reference external" href="http://www.sphinx-doc.org/en/stable/examples.html"&gt;Projects using Sphinx&lt;/a&gt;。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Sphinx 能够将文档输出为 HTML，LaTex，Manuals page 等多种格式。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 reStructuredText 的语法基础上提供了各种信息（文档，章节，函数，引用，术语）的交叉引用&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sphinx 还能轻松地定义文档的层次结构：自动生成目录树，自动发现目录下的其他文档&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sphinx 对 Python/C/C++ 等语言提供了良好的支持&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持扩展，你可以编写自己的模块&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;看起来 Sphinx 的功能比 GitBook 丰富得多，但其实它们之间没什么可比性，
因为 Sphinx 是文档生成工具而 GitBook 只是简单的书籍生成工具。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="markdown-restructuredtext"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;将 Markdown 笔记转化为 reStructuredText&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用 Sphinx 管理笔记的第一步是将之前笔记转成 rst 格式，Pandoc 大法好：&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; md in &lt;span class="k"&gt;$(&lt;/span&gt;find . -name &lt;span class="s1"&gt;&amp;#39;*.md&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    pandoc --from&lt;span class="o"&gt;=&lt;/span&gt;markdown --to&lt;span class="o"&gt;=&lt;/span&gt;rst --output&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="nv"&gt;$md&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$md&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;.rst &lt;span class="nv"&gt;$md&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="shpinx"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Shpinx 的安装和使用&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pip&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt; &lt;span class="pre"&gt;sphinx&lt;/span&gt;&lt;/code&gt; 即可安装 Sphinx，Arch Linux 用户可以执行
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pacman&lt;/span&gt; &lt;span class="pre"&gt;-S&lt;/span&gt; &lt;span class="pre"&gt;python-sphinx&lt;/span&gt;&lt;/code&gt; 安装。Sphinx 提供了 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sphinx-quickstart&lt;/span&gt;&lt;/code&gt; 程序，
可以交互式地建立一个 Sphinx 项目。项目目录下的 conf.py 储存了 Sphinx 的配置，
index.rst 则是默认的文档首页。&lt;/p&gt;
&lt;p&gt;使用 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sphinx-build&lt;/span&gt; &lt;span class="pre"&gt;-b&lt;/span&gt; &lt;span class="pre"&gt;html&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;srcdir&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;builddir&amp;gt;&lt;/span&gt;&lt;/code&gt; 可以从 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;srcdir&amp;gt;&lt;/span&gt;&lt;/code&gt; 生成 HTML
文档输出到 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;builddir&amp;gt;&lt;/span&gt;&lt;/code&gt;，如果在 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sphinx-quickstart&lt;/span&gt;&lt;/code&gt; 中指定了生成 Makefile，通过
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;make&lt;/span&gt; &lt;span class="pre"&gt;html&lt;/span&gt;&lt;/code&gt; 即可生成 HTML 文档到预定义的 build 目录。&lt;/p&gt;
&lt;p&gt;Sphinx 似乎没有提供类似 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gitbook&lt;/span&gt; &lt;span class="pre"&gt;serve&lt;/span&gt;&lt;/code&gt; 在本地启动 HTTP 服务器的功能，Linux
用户在 Makefile 中增加如下内容则可方便的在默认浏览器打开文档的首页：&lt;/p&gt;
&lt;div class="highlight-makefile notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    xdg-open &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BUILDDIR&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/html/index.html&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;组织和索引&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sphinx 定义了 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;toctree&lt;/span&gt;&lt;/code&gt; 指令作为目录树，各个文档由目录树组织在一起，
在构建文档的时候，如果存在没有被引用到的文档，Sphinx 会发出警告。&lt;/p&gt;
&lt;div class="highlight-rst notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;toctree&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
    &lt;span class="nc"&gt;:maxdepth:&lt;/span&gt; &lt;span class="nf"&gt;2&lt;/span&gt;

    intro
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上面的 rst 指令定义了一个最大深度为 2 的目录树，包含了当前目录下的 intro.rst 文件。
在渲染出来的 HTML 文件中，目录树会显示到 intro.html 的链接，链接的标题则会和
intro.rst 中的标题保持一致。如果 intro.rst 中存在章节，也会在目录树中显示出来，
但整个目录树的深度不超过 2。&lt;/p&gt;
&lt;p&gt;如果只想要在目录树中显示文档的标题而不显示内部的章节，需要为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;toctree&lt;/span&gt;&lt;/code&gt; 指令开启
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:titlesonly:&lt;/span&gt;&lt;/code&gt; 选项。&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;toctree&lt;/span&gt;&lt;/code&gt; 在开启 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:glob:&lt;/span&gt;&lt;/code&gt; 的情况下支持通配符，比如 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;*&lt;/span&gt;&lt;/code&gt; 匹配当前目录下所有的
（排除自身，下同）rst 文档。&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;index*&lt;/span&gt;&lt;/code&gt; 匹配当前目录下所有以 index 开头的 rst 文档。&lt;/p&gt;
&lt;p&gt;我在笔记的不同分类的文件夹中都建立了如下内容的 index.rst：&lt;/p&gt;
&lt;div class="highlight-rst notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Title&lt;/span&gt;
&lt;span class="gh"&gt;=====&lt;/span&gt;

Description.

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;toctree&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
   &lt;span class="nc"&gt;:glob:&lt;/span&gt;
   &lt;span class="nc"&gt;:titlesonly:&lt;/span&gt;

   *
   */index
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这个 index.rst 会匹配当前目录所有的 rst 文档，并在所有的文件夹下寻找 index.rst。
所有的笔记通过 index.rst 被组织到一起。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;使用 Read The Docs 发布&lt;/a&gt;&lt;/h2&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/use-sphinx-and-rst-to-manage-your-notes.rst&lt;/span&gt;, line 3); &lt;em&gt;&lt;a href="#id7"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “read the docs”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://readthedocs.io/"&gt;Read The Docs&lt;/a&gt; 是一个托管和展示文档的平台，支持 Sphinx
项目。在网站上注册后，授权 Github 即可从 Github 那边导入仓库。&lt;/p&gt;
&lt;p&gt;因此可以将笔记本身托管在 Github 上，每次更新时会通过 webhook 自动更新
Read The Docs 上的文档。&lt;/p&gt;
&lt;p&gt;P.S. Read The Docs 的主站看起来很简陋…… 给我一种要完蛋了的感觉。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/use-sphinx-and-rst-to-manage-your-notes.html" rel="alternate"/>
    <published>2017-03-29T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/switch-from-duoshuo-to-isso.html</id>
    <title>从多说迁移到 Isso</title>
    <updated>2017-06-10T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="isso"&gt;

&lt;p&gt;前阵子多说 &lt;a class="reference external" href="http://dev.duoshuo.com/threads/58d1169ae293b89a20c57241"&gt;对外宣布&lt;/a&gt;
它将在 2017 年 6 月 1 日停止服务。截至 6 月 9 日，评论框已经无法使用，甚至我的
评论管理后台的域名也已经停止解析了。&lt;/p&gt;
&lt;p&gt;这其实是意料之中的事情，缺乏盈利途径的多说长久以来一直处于缺乏维护的状态，
三头两头挂一次，这次终于撑不下去了。总之还是感谢这一两年来多说它提供的方便又免费
的评论服务。即使是这么一个没人看的小博客，评论功能也是不可缺少的，感谢归感谢，
我还是得找个下家 :-) 。&lt;/p&gt;
&lt;div class="contents topic" id="id2"&gt;
&lt;p class="topic-title"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#isso" id="id18"&gt;从多说迁移到 Isso&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id3" id="id19"&gt;为什么是 Isso&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id9" id="id20"&gt;架设服务&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id12" id="id21"&gt;邮件通知&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id13" id="id22"&gt;客户端&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#jekyll-s-way" id="id23"&gt;Jekyll’s Way&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#https" id="id24"&gt;HTTPS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id14" id="id25"&gt;样式&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id15" id="id26"&gt;数据迁移&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id16" id="id27"&gt;安全&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="#id17" id="id28"&gt;不足&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;为什么是 Isso&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我所见的各种静态博客用得最多的还是 Disqus，曾经我也是 Disqus 的用户，但是 Disqus
存在着一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#id4"&gt;&lt;span class="problematic" id="id5"&gt;:s:`被墙，这当然不是 Disqus 本身的问题，这甚至不算是个问题`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/switch-from-duoshuo-to-isso.rst&lt;/span&gt;, line 31)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id4"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/switch-from-duoshuo-to-isso.rst&lt;/span&gt;, line 31); &lt;em&gt;&lt;a href="#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;评论无法彻底被删除，我曾经在 #archlinux-cn 讨论过这个问题，有人说既然你把数据
公开地 post 到网上来了，就别想着它能够被删除，因为任何人都可以将他备份起来。
我不敢苟同，数据是公开的没错，但作为这个评论系统的管理员，我应当有权利让这些
数据从我「管辖」的范围内删除，而 Disqus 并没有给我这样的权利。更重要的是，看着
这样删不掉的数据真的是太不爽了&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;非 Disqus 用户无法方便地评论，甚至会诱导你注册帐号&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过这次多说的关闭，我还是倾向于寻找一个开源的，能自己架设的评论系统。
&lt;a href="#id6"&gt;&lt;span class="problematic" id="id7"&gt;:people:`biergaizi &amp;lt;https://tomli.blog&amp;gt;`&lt;/span&gt;&lt;/a&gt; 在微博推荐了
Disqus 的开源替代：&lt;a class="reference external" href="https://posativ.org/isso/"&gt;Isso&lt;/a&gt;，Isso 在 Github 上有 2k+
的 stars，开发虽然看起来不活跃但也不至于死掉，官网的 Demo 看起来不错，
AUR 里面还有有现成的包能用，于是就决定是你了，Isso！&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/switch-from-duoshuo-to-isso.rst&lt;/span&gt;, line 39)&lt;/p&gt;
&lt;p&gt;No role entry for “people” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “people” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id6"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/switch-from-duoshuo-to-isso.rst&lt;/span&gt;, line 39); &lt;em&gt;&lt;a href="#id7"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “people”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我的博客托管在 Github 上，源码存放于：
&lt;a class="reference external" href="https://github.com/SilverRainZ/tech"&gt;https://github.com/SilverRainZ/tech&lt;/a&gt;，
Isso 则将部署在一台跑着 Arch Linux 的小破 vps 上。 &lt;strong&gt;以下的操作均针对该代码仓库
以及 vps 上的 Arch 环境。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;架设服务&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先从 AUR 安装安装 Isso：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yaourt -S isso
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;其依赖 python-misaka-v1 和 python-html5lib-9x07 也是 AUR 包，yaourt 也会帮
我们安装上。AUR 虽好，但在安装的时候最好还是检查一下 PKGBUILD 和 .install 文件，
以避免来自收到来自一些混乱邪恶的打包者的恶意（比如前阵子就有人在 Pypi 和 Gem
投了恶意包 Orz）。&lt;/p&gt;
&lt;p&gt;&lt;a href="#id10"&gt;&lt;span class="problematic" id="id11"&gt;:s:`考虑把 Isso 收养到 archlinuxcn 源里，这个以后再说吧……`&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/switch-from-duoshuo-to-isso.rst&lt;/span&gt;, line 65)&lt;/p&gt;
&lt;p&gt;No role entry for “s” in module “docutils.parsers.rst.languages.zh_cn”.
Trying “s” as canonical role name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="system-message" id="id10"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/bullet/bullet/blog/switch-from-duoshuo-to-isso.rst&lt;/span&gt;, line 65); &lt;em&gt;&lt;a href="#id11"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unknown interpreted text role “s”.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;安装完成后，打开 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/isso.conf&lt;/span&gt;&lt;/code&gt; 文件，文件对各个配置项都有详细的解释，
需要重点关注的配置如下：&lt;/p&gt;
&lt;div class="highlight-ini notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Isso configuration file&lt;/span&gt;
&lt;span class="k"&gt;[general]&lt;/span&gt;
&lt;span class="c1"&gt;# 数据库地址，默认值是在 /tmp 里，无法持久化&lt;/span&gt;
&lt;span class="na"&gt;dbpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/lib/isso/comments.db&lt;/span&gt;
&lt;span class="c1"&gt;# 使用 Isso 的网站地址，从不在这个列表里的地址发出的评论会被忽略&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    http://tech.silverrainz.me/&lt;/span&gt;
&lt;span class="s"&gt;    https://tech.silverrainz.me/&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# 日志&lt;/span&gt;
&lt;span class="na"&gt;log-file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/isso.log&lt;/span&gt;

&lt;span class="k"&gt;[server]&lt;/span&gt;
&lt;span class="c1"&gt;# 监听端口&lt;/span&gt;
&lt;span class="na"&gt;listen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http://localhost:8080&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;[guard]&lt;/span&gt;
&lt;span class="c1"&gt;# 开启 SPAM 保护&lt;/span&gt;
&lt;span class="na"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="c1"&gt;# 每分钟内最多五个新评论&lt;/span&gt;
&lt;span class="na"&gt;ratelimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="c1"&gt;# 评论不需要填写邮箱&lt;/span&gt;
&lt;span class="na"&gt;require-email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;更详细的配置参考： &lt;a class="reference external" href="https://posativ.org/isso/docs/configuration/server/"&gt;Server Configuration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;填写配置之后执行 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;systemctl&lt;/span&gt; &lt;span class="pre"&gt;start&lt;/span&gt; &lt;span class="pre"&gt;isso.service&lt;/span&gt;&lt;/code&gt; 就能启动 Isso 了。但注意配置文件
里监听的是本地地址的端口，这里将用 nginx 反向代理将连接转发给 Isso。&lt;/p&gt;
&lt;p&gt;nginx 配置如下（参考 &lt;a class="reference external" href="https://posativ.org/isso/docs/quickstart/#running-isso"&gt;Running Isso&lt;/a&gt;）：&lt;/p&gt;
&lt;div class="highlight-nginx notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;comments.silverrainz.me&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://localhost:8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span class="nv"&gt;$scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;其中 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;comments.silverrainz.me&lt;/span&gt;&lt;/code&gt; 是指向 vps 的域名，你需要在域名所使用的 DNS
服务器提供者那里修改 A 记录。&lt;/p&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;邮件通知&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;// TODO&lt;/p&gt;
&lt;p&gt;还不会配 SMTP，先搁着。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;客户端&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;只要在网页中插入如下代码即可插入评论框：&lt;/p&gt;
&lt;div class="highlight-html notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;data-isso&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//comments.silverrainz.me/&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//comments.silverrainz.me/js/embed.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;isso-thread&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="jekyll-s-way"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;Jekyll’s Way&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对于 Jekyll 博客，比较好的做法是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_includes&lt;/span&gt;&lt;/code&gt; 目录下在建立 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;comments&lt;/span&gt;&lt;/code&gt; 文件用来
存放评论框代码：&lt;/p&gt;
&lt;div class="highlight-html notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ site.baseurl }}/assets/comments.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;data-isso&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//comments.silverrainz.me/&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//comments.silverrainz.me/js/embed.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;isso-thread&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;data-title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ page.title }}&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;data-isso-id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ page.id }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;其中 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;data-isso-id&lt;/span&gt;&lt;/code&gt; 和 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;data-title&lt;/span&gt;&lt;/code&gt;  用来指定文章的唯一标识符和标题。
为每个文章指定标识符便于以后的各种迁移。&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{{&lt;/span&gt; &lt;span class="pre"&gt;page.id&lt;/span&gt; &lt;span class="pre"&gt;}}&lt;/span&gt;&lt;/code&gt;
和  &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{{&lt;/span&gt; &lt;span class="pre"&gt;page.title&lt;/span&gt; &lt;span class="pre"&gt;}}&lt;/span&gt;&lt;/code&gt;
是 Jekyll 提供的模板，用于获取本页面的 ID 和标题。
title 和 id 可以在文件的 yaml 头中设置，但 Jekyll 会为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_posts&lt;/span&gt;&lt;/code&gt; 中的文章自动生成 ID，
对于 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_post/2017-06-10-switch-from-duoshuo-to-isso.md&lt;/span&gt;&lt;/code&gt;，
其 ID 是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/2017/06/10/switch-from-duoshuo-to-isso&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后在页面模板 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;_layouts/page.html&lt;/span&gt;&lt;/code&gt; 里面引用 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;comments&lt;/span&gt;&lt;/code&gt; 文件：
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{%&lt;/span&gt; &lt;span class="pre"&gt;include&lt;/span&gt; &lt;span class="pre"&gt;comments&lt;/span&gt; &lt;span class="pre"&gt;%}&lt;/span&gt;&lt;/code&gt;
就可以在每个使用了 page 模板的网页上显示评论框了。&lt;/p&gt;
&lt;p&gt;详情请参见：&lt;a class="reference external" href="https://github.com/SilverRainZ/tech/commit/91fba1ed944ddc48d10df6dd21fceae5a0860b74"&gt;Commit: Replace duoshuo with isso&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="https"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;HTTPS&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于启用了 HTTPS 的博客来说，部署还没有结束：在 HTTPS 页面（博客）中引用的
HTTP 脚本 (&lt;a class="reference external" href="http://comments.silverrainz.me/js/embed.min.js"&gt;http://comments.silverrainz.me/js/embed.min.js&lt;/a&gt;) 被认为是危险的
Mixed Content，现代浏览器会拒绝加载它们，因此评论框并不能显示出来。&lt;/p&gt;
&lt;p&gt;还好我们有 Let’s Encrypt，给 Isso 上 HTTPS 并不是难事。&lt;/p&gt;
&lt;p&gt;只要验证了你对域名的所有权，Let’s Encrypt 就为你签发证书，整个签发过程通过
certbot 完成，certbot 位于 [Community] 源中。验证所有权可以通过让
Let’s Encrypt 访问你的网站上的随机验证文件完成，如果你使用 nginx 的话，更简单的
方式是安装软件包 certbot-nginx，指定 certbot 使用 nginx 验证方式即可。&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pacman -S certbot certbot-nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;运行 certbot 申请证书需要各种参数，参数也可以写在配置文件中，方便续签证书使用，
假设配置文件地址为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/letsencrypt/cli.ini&lt;/span&gt;&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight-ini notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;rsa-key-size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;4096&lt;/span&gt;
&lt;span class="na"&gt;domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;comments.silverrainz.me&lt;/span&gt;
&lt;span class="na"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;e-mail address&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;authenticator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;其中 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;domains&lt;/span&gt;&lt;/code&gt; 是一个用逗号分隔的域名列表，可以让一个证书能用在多个域名上。
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;authenticator&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;nginx&lt;/span&gt;&lt;/code&gt; 需要你安装 certbot-nginx。&lt;/p&gt;
&lt;p&gt;certbot 的更多用法见：&lt;a class="reference external" href="https://certbot.eff.org/docs/using.html"&gt;User Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;执行以下命令申请证书：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# certbot -c /etc/letsencrypt/cli.ini certonly&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;接着按 certbot 的输出提示操作即可，当你看到类似信息的时候，说明证书已经申请成功了：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/comments.silverrainz.me/fullchain.pem.
 - ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;获得证书后，修改 nginx 中 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;comments.silverrainz.me&lt;/span&gt;&lt;/code&gt; 的 server blcok：&lt;/p&gt;
&lt;div class="highlight-nginx notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt; &lt;span class="s"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt; &lt;span class="s"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;ssl_certificate&lt;/span&gt; &lt;span class="s"&gt;/etc/letsencrypt/live/comments.silverrainz.me/fullchain.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="s"&gt;/etc/letsencrypt/live/comments.silverrainz.me/privkey.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_trusted_certificate&lt;/span&gt; &lt;span class="s"&gt;/etc/letsencrypt/live/comments.silverrainz.me/chain.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="s"&gt;1d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="s"&gt;shared:SSL:50m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_session_tickets&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;Strict-Transport-Security&lt;/span&gt; &lt;span class="s"&gt;max-age=15768000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_stapling&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_stapling_verify&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;comments.silverrainz.me&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://localhost:8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span class="nv"&gt;$scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;至此，应当可以通过 HTTPS 访问 Isso 的脚本了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;样式&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Isso 的评论框默认样式是配合亮色背景工作的，我用 CSS 稍稍做了一下调整，保存在
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;assets/comments.css&lt;/span&gt;&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class="highlight-css notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;isso-thread&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;isso-thread&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;isso-postbox&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;isso-thread&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;auth-section&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;input-wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;isso-thread&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;auth-section&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;post-action&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#DDD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;isso-thread&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;post-action&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;isso-thread&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;isso-comment&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#FFF&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;isso-thread&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;isso-comment&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;isso-comment-header&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#DDD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;larger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id26"&gt;数据迁移&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;完成部署和简单的美化后，接下来就该把旧数据迁移过来了。&lt;/p&gt;
&lt;p&gt;在多说宣布关闭的时候我就从后台导出了我的所有评论数据，数据文件的格式是 JSON，
而 Isso 仅支持 Disqus 和 Wordpress 的 WXR 文件。本着不重复造轮子的原则，我找到了
这个脚本：&lt;a class="reference external" href="https://github.com/JamesPan/duoshuo-migrator"&gt;duoshuo-migrator&lt;/a&gt;，
注意脚本依赖 python2 和 python2-lxml。&lt;/p&gt;
&lt;p&gt;假设多说数据文件名为 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;duoshuo.json&lt;/span&gt;&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://raw.githubusercontent.com/JamesPan/duoshuo-migrator/master/duoshuo-migrator.py
$ python2 duoshuo-migrator.py -i duoshuo.json -o wp.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;然后导入 Isso 数据库：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# isso -c /etc/isso.conf import wp.xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;导入后到对应页面发现之前的评论并没有出现 :-(，使用以下命令将数据库的内容导出来看看&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ echo -e &amp;#39;&amp;quot;page: URI&amp;quot;,&amp;quot;page: title&amp;quot;,&amp;quot;ID&amp;quot;,&amp;quot;mode&amp;quot;,&amp;quot;created on&amp;quot;,&amp;quot;modified on&amp;quot;,&amp;quot;author: name&amp;quot;,&amp;quot;author: email&amp;quot;,&amp;quot;author: website&amp;quot;,&amp;quot;author: IP&amp;quot;,&amp;quot;likes&amp;quot;,&amp;quot;dislikes&amp;quot;,&amp;quot;voters&amp;quot;,&amp;quot;text&amp;quot;\n&amp;#39;&amp;quot;$(sqlite3 /var/lib/isso/comments.db -csv &amp;#39;SELECT threads.uri, threads.title, comments.id, comments.mode, datetime(comments.created, &amp;quot;unixepoch&amp;quot;, &amp;quot;localtime&amp;quot;), datetime(comments.modified, &amp;quot;unixepoch&amp;quot;, &amp;quot;localtime&amp;quot;), comments.author, comments.email, comments.website, comments.remote_addr, comments.likes, comments.dislikes, comments.voters,comments.text FROM comments INNER JOIN threads ON comments.tid=threads.id&amp;#39;)&amp;quot; &amp;gt; export.csv
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这是导出来的 about 页面的一条评论：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;page: URI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;page: title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;created on&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;modified on&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author: name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author: email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author: website&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author: IP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;likes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dislikes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;voters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;关于&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2015-11-10 22:28:27&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Forrest Chang&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*************&lt;/span&gt;&lt;span class="nd"&gt;@gmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;forrestchang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;***.**.***.*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;在知乎上看到，博主今年大二吗？&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;而 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wp.xml&lt;/span&gt;&lt;/code&gt; 中对应的部分是：&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
    &amp;lt;item&amp;gt;
      &amp;lt;title&amp;gt;关于&amp;lt;/title&amp;gt;
      &amp;lt;link&amp;gt;http://lastavenger.github.io/about.html&amp;lt;/link&amp;gt;
      &amp;lt;content:encoded&amp;gt;&amp;lt;![CDATA[]]&amp;gt;&amp;lt;/content:encoded&amp;gt;
      &amp;lt;dsq:thread_identifier&amp;gt;5f3988f7e293c4ef57003c774e2a71aa&amp;lt;/dsq:thread_identifier&amp;gt;
      &amp;lt;dsq:thread_identifier&amp;gt;5f3988f7e293c4ef57003c774e2a71aa&amp;lt;/dsq:thread_identifier&amp;gt;
      &amp;lt;wp:post_date_gmt&amp;gt;&amp;lt;/wp:post_date_gmt&amp;gt;
      &amp;lt;wp:comment_status&amp;gt;open&amp;lt;/wp:comment_status&amp;gt;
      &amp;lt;wp:comment&amp;gt;
        &amp;lt;dsq:remote&amp;gt;
          &amp;lt;dsq:id&amp;gt;&amp;lt;/dsq:id&amp;gt;
          &amp;lt;dsq:avatar&amp;gt;&amp;lt;/dsq:avatar&amp;gt;
        &amp;lt;/dsq:remote&amp;gt;
        &amp;lt;wp:comment_id&amp;gt;6215529386569892609&amp;lt;/wp:comment_id&amp;gt;
        &amp;lt;wp:comment_author&amp;gt;Forrest Chang&amp;lt;/wp:comment_author&amp;gt;
        &amp;lt;wp:comment_author_email&amp;gt;*************@gmail.com&amp;lt;/wp:comment_author_email&amp;gt;
        &amp;lt;wp:comment_author_url&amp;gt;http://forrestchang.github.io/&amp;lt;/wp:comment_author_url&amp;gt;
        &amp;lt;wp:comment_author_IP&amp;gt;***.**.***.***&amp;lt;/wp:comment_author_IP&amp;gt;
        &amp;lt;wp:comment_date_gmt&amp;gt;2015-11-10 22:28:27&amp;lt;/wp:comment_date_gmt&amp;gt;
        &amp;lt;wp:comment_content&amp;gt;&amp;lt;![CDATA[在知乎上看到，博主今年大二吗？]]&amp;gt;&amp;lt;/wp:comment_content&amp;gt;
        &amp;lt;wp:comment_approved&amp;gt;1&amp;lt;/wp:comment_approved&amp;gt;
        &amp;lt;wp:comment_parent&amp;gt;0&amp;lt;/wp:comment_parent&amp;gt;
      &amp;lt;/wp:comment&amp;gt;

      ...

    &amp;lt;/item&amp;gt;
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在多说中我使用 Jekyll 提供的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{{&lt;/span&gt; &lt;span class="pre"&gt;page.id&lt;/span&gt; &lt;span class="pre"&gt;}}&lt;/span&gt;&lt;/code&gt; 来标识文章，
我在 about 页面设置的 id 是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/about&lt;/span&gt;&lt;/code&gt;，因此在 about 页面的评论框代码会请求获取
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/about&lt;/span&gt;&lt;/code&gt; 页面中的评论，而数据库中的 URI 却是 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/about.html&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;从多说评论数据转换而来的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wp.xml&lt;/span&gt;&lt;/code&gt; 中并没有保留之前的文章 ID (Thread ID)，Isso 应该是
直接从域名里把 URI 取出来当作文章 ID 的：
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;link&amp;gt;http://lastavenger.github.io/about.html&amp;lt;/link&amp;gt;&lt;/span&gt;&lt;/code&gt; =&amp;gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/about.html&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;于是尝试用 vim 把链接里面的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.html&lt;/span&gt;&lt;/code&gt; 去掉：&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:%s/.html&amp;lt;\/link&amp;gt;/&amp;lt;\/link&amp;gt;/&lt;/span&gt;&lt;/code&gt;，重新导入，
评论就乖乖地出现了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id27"&gt;安全&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;// TODO&lt;/p&gt;
&lt;p&gt;Isso 的安全性尚未考证，毫无安全技能点的我也只能先搁着了 :-(。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id28"&gt;不足&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当然 Isso 的缺点也是很多的……&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;没有管理界面，要管理评论只能手动操作数据库&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交互并不好：从不在白名单的地址（&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/etc/isso.conf&lt;/span&gt;&lt;/code&gt; 的 &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;hosts&lt;/span&gt;&lt;/code&gt; 列表）发出评论，
评论框是没反应的；如果你的评论 字数不足/邮件地址格式不对/网址不对，点评论按钮也不会
有任何反馈&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以后遇到了再补……&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/switch-from-duoshuo-to-isso.html" rel="alternate"/>
    <published>2017-06-10T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://silverrainz.me/blog/srain-and-me.html</id>
    <title>Srain 1.0 发布了</title>
    <updated>2020-02-29T00:00:00+00:00</updated>
    <author>
      <name>Shengyu Zhang</name>
    </author>
    <content type="html">&lt;div class="section" id="srain-1-0"&gt;

&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;前注：这篇短文之前在知乎和朋友圈都发过了，发到博客仅为存档，另也做了一些小的修正和改动。
不知道这里何时能够不荒废。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/SrainApp/srain"&gt;&amp;#64;SrainApp/srain&lt;/a&gt; 是一个我业余时间开发的 GTK3 IRC 客户端。代码托管在 github 上。&lt;/p&gt;
&lt;p&gt;2015 年末的时候，我刚写完了自己的玩具内核 OS67，处于一段不知道做点什么东西的过渡期。&lt;/p&gt;
&lt;p&gt;同年我已经开始用 openSUSE，为了解决一些问题尝试在 IRC 上提问。
再后来开始用 Arch Linux，整天挂在 #archlinux-cn （那个时候还没有 offtopic）里灌水，
大概在 2016 年年后，我开始了 Srain 的开发，初衷是因为没有一个用起来顺手的 IRC 客户端，
后来因为 GSoC、学画、沉迷 Minecraft、实习、毕业、工作各种各样的事情，也因为能力不足，
Srain 的开发进度一直很缓慢，甚至砍掉了一些规划好的功能。&lt;/p&gt;
&lt;p&gt;在开发过程中经常能收到一些嘲讽或者不解：你在玩自己的开源过家家游戏、IRC 正在慢慢死掉、
你在做没有意义的事情。 他们说得都对，但我是一个把沉没成本看得过分重的人，所以我做到了现在。&lt;/p&gt;
&lt;p&gt;我也能听到一些支持的声音：evacchi 在 Reddit 上帮我打广告；tim77 帮我做了俄文翻译；
xeirrr 帮我写了 gentoo 的构建脚本；cpba 和 Hexchat 作者 TingPing 帮我指出了一些 FreeDesktop 上不规范的地方；
Arch Linux CN 社区的 zwindl 和 VOID001 愿意和我共同维护这个项目（尽管最后「此事古难全」了）；
在漫长的开发过程里，Srain 也慢慢走进了 Flathub、Fedora、openSUSE、openBSD 的官方仓库中。
（Update：截至 2020-04-26，又多了 NetBSD、 Void Linux 和 OpenMandriva）&lt;/p&gt;
&lt;p&gt;下面这篇文章介绍了 Srain 1.0 所拥有的特性以及未来的开发计划，
如果有其他发行版的 maintainer 愿意将 Srain 加入你们的软件源，欢迎联系我。
Srain 未来会继续开发下去，跟着 IRC 一起慢慢消失在历史里。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://srain.im/2020/02/29/introducing-srain.html"&gt;Modern IRC client written in GTK&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Update：从 02-29 发布后截至 2020-04-06，Srain 又进入了三个发行版的官方仓库，
合并了 8 位社区贡献者的 PR，收到了数十个来自社区的反馈，发布了三个版本，
尽管在（只能称之为火花的）宣传热度过去后，来自社区的贡献会慢慢变少，
但我相信是会有人受益于这个软件的吧，一切都会顺利进行的吧，I pray。&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
</content>
    <link href="https://silverrainz.me/blog/srain-and-me.html" rel="alternate"/>
    <published>2020-02-29T00:00:00+00:00</published>
  </entry>
</feed>
